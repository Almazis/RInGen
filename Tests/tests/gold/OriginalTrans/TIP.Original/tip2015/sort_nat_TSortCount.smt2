(set-logic HORN)
(declare-datatypes ((Bool_0 0)) (((false_0 ) (true_0 ))))
(declare-fun diseqBool_0 (Bool_0 Bool_0) Bool)
(declare-fun isfalse_1 (Bool_0) Bool)
(declare-fun istrue_1 (Bool_0) Bool)
(assert (isfalse_1 false_0))
(assert (istrue_1 true_0))
(assert (diseqBool_0 false_0 true_0))
(assert (diseqBool_0 true_0 false_0))
(declare-fun and_0 (Bool_0 Bool_0 Bool_0) Bool)
(declare-fun or_0 (Bool_0 Bool_0 Bool_0) Bool)
(declare-fun hence_0 (Bool_0 Bool_0 Bool_0) Bool)
(declare-fun not_0 (Bool_0 Bool_0) Bool)
(assert (and_0 false_0 false_0 false_0))
(assert (and_0 false_0 true_0 false_0))
(assert (and_0 false_0 false_0 true_0))
(assert (and_0 true_0 true_0 true_0))
(assert (or_0 false_0 false_0 false_0))
(assert (or_0 true_0 true_0 false_0))
(assert (or_0 true_0 false_0 true_0))
(assert (or_0 true_0 true_0 true_0))
(assert (hence_0 true_0 false_0 false_0))
(assert (hence_0 false_0 true_0 false_0))
(assert (hence_0 true_0 false_0 true_0))
(assert (hence_0 true_0 true_0 true_0))
(assert (not_0 true_0 false_0))
(assert (not_0 false_0 true_0))
(declare-datatypes ((Nat_0 0)) (((zero_0 ) (succ_0 (p_0 Nat_0)))))
(declare-fun diseqNat_0 (Nat_0 Nat_0) Bool)
(declare-fun p_1 (Nat_0 Nat_0) Bool)
(declare-fun iszero_0 (Nat_0) Bool)
(declare-fun issucc_0 (Nat_0) Bool)
(assert (forall ((x_59 Nat_0))
	(p_1 x_59 (succ_0 x_59))))
(assert (iszero_0 zero_0))
(assert (forall ((x_61 Nat_0))
	(issucc_0 (succ_0 x_61))))
(assert (forall ((x_62 Nat_0))
	(diseqNat_0 zero_0 (succ_0 x_62))))
(assert (forall ((x_63 Nat_0))
	(diseqNat_0 (succ_0 x_63) zero_0)))
(assert (forall ((x_64 Nat_0) (x_65 Nat_0))
	(=> (diseqNat_0 x_64 x_65)
	    (diseqNat_0 (succ_0 x_64) (succ_0 x_65)))))
(declare-datatypes ((Tree_0 0)) (((TNode_0 (projTNode_0 Tree_0) (projTNode_1 Nat_0) (projTNode_2 Tree_0)) (TNil_0 ))))
(declare-fun diseqTree_0 (Tree_0 Tree_0) Bool)
(declare-fun projTNode_3 (Tree_0 Tree_0) Bool)
(declare-fun projTNode_4 (Nat_0 Tree_0) Bool)
(declare-fun projTNode_5 (Tree_0 Tree_0) Bool)
(declare-fun isTNode_0 (Tree_0) Bool)
(declare-fun isTNil_0 (Tree_0) Bool)
(assert (forall ((x_66 Tree_0) (x_67 Nat_0) (x_68 Tree_0))
	(projTNode_3 x_66 (TNode_0 x_66 x_67 x_68))))
(assert (forall ((x_66 Tree_0) (x_67 Nat_0) (x_68 Tree_0))
	(projTNode_4 x_67 (TNode_0 x_66 x_67 x_68))))
(assert (forall ((x_66 Tree_0) (x_67 Nat_0) (x_68 Tree_0))
	(projTNode_5 x_68 (TNode_0 x_66 x_67 x_68))))
(assert (forall ((x_71 Tree_0) (x_72 Nat_0) (x_73 Tree_0))
	(isTNode_0 (TNode_0 x_71 x_72 x_73))))
(assert (isTNil_0 TNil_0))
(assert (forall ((x_74 Tree_0) (x_75 Nat_0) (x_76 Tree_0))
	(diseqTree_0 (TNode_0 x_74 x_75 x_76) TNil_0)))
(assert (forall ((x_77 Tree_0) (x_78 Nat_0) (x_79 Tree_0))
	(diseqTree_0 TNil_0 (TNode_0 x_77 x_78 x_79))))
(assert (forall ((x_80 Tree_0) (x_81 Nat_0) (x_82 Tree_0) (x_83 Tree_0) (x_84 Nat_0) (x_85 Tree_0))
	(=> (diseqTree_0 x_80 x_83)
	    (diseqTree_0 (TNode_0 x_80 x_81 x_82) (TNode_0 x_83 x_84 x_85)))))
(assert (forall ((x_80 Tree_0) (x_81 Nat_0) (x_82 Tree_0) (x_83 Tree_0) (x_84 Nat_0) (x_85 Tree_0))
	(=> (diseqNat_0 x_81 x_84)
	    (diseqTree_0 (TNode_0 x_80 x_81 x_82) (TNode_0 x_83 x_84 x_85)))))
(assert (forall ((x_80 Tree_0) (x_81 Nat_0) (x_82 Tree_0) (x_83 Tree_0) (x_84 Nat_0) (x_85 Tree_0))
	(=> (diseqTree_0 x_82 x_85)
	    (diseqTree_0 (TNode_0 x_80 x_81 x_82) (TNode_0 x_83 x_84 x_85)))))
(declare-datatypes ((list_0 0)) (((nil_0 ) (cons_0 (head_0 Nat_0) (tail_0 list_0)))))
(declare-fun diseqlist_0 (list_0 list_0) Bool)
(declare-fun head_1 (Nat_0 list_0) Bool)
(declare-fun tail_1 (list_0 list_0) Bool)
(declare-fun isnil_0 (list_0) Bool)
(declare-fun iscons_0 (list_0) Bool)
(assert (forall ((x_87 Nat_0) (x_88 list_0))
	(head_1 x_87 (cons_0 x_87 x_88))))
(assert (forall ((x_87 Nat_0) (x_88 list_0))
	(tail_1 x_88 (cons_0 x_87 x_88))))
(assert (isnil_0 nil_0))
(assert (forall ((x_90 Nat_0) (x_91 list_0))
	(iscons_0 (cons_0 x_90 x_91))))
(assert (forall ((x_92 Nat_0) (x_93 list_0))
	(diseqlist_0 nil_0 (cons_0 x_92 x_93))))
(assert (forall ((x_94 Nat_0) (x_95 list_0))
	(diseqlist_0 (cons_0 x_94 x_95) nil_0)))
(assert (forall ((x_96 Nat_0) (x_97 list_0) (x_98 Nat_0) (x_99 list_0))
	(=> (diseqNat_0 x_96 x_98)
	    (diseqlist_0 (cons_0 x_96 x_97) (cons_0 x_98 x_99)))))
(assert (forall ((x_96 Nat_0) (x_97 list_0) (x_98 Nat_0) (x_99 list_0))
	(=> (diseqlist_0 x_97 x_99)
	    (diseqlist_0 (cons_0 x_96 x_97) (cons_0 x_98 x_99)))))
(declare-fun plus_0 (Nat_0 Nat_0 Nat_0) Bool)
(assert (forall ((x_14 Nat_0) (z_0 Nat_0) (y_0 Nat_0))
	(=> (plus_0 x_14 z_0 y_0)
	    (plus_0 (succ_0 x_14) (succ_0 z_0) y_0))))
(assert (forall ((x_15 Nat_0))
	(plus_0 x_15 zero_0 x_15)))
(declare-fun leq_0 (Bool_0 Nat_0 Nat_0) Bool)
(assert (forall ((x_16 Bool_0) (x_2 Nat_0) (z_1 Nat_0))
	(=> (leq_0 x_16 z_1 x_2)
	    (leq_0 x_16 (succ_0 z_1) (succ_0 x_2)))))
(assert (forall ((z_1 Nat_0))
	(leq_0 false_0 (succ_0 z_1) zero_0)))
(assert (forall ((y_1 Nat_0))
	(leq_0 true_0 zero_0 y_1)))
(declare-fun flatten_0 (list_0 Tree_0 list_0) Bool)
(assert (forall ((x_20 list_0))
	(flatten_0 x_20 TNil_0 x_20)))
(assert (forall ((x_21 list_0) (x_22 list_0) (q_0 Tree_0) (z_2 Nat_0) (r_0 Tree_0) (y_2 list_0))
	(=>	(and (flatten_0 x_22 r_0 y_2)
			(flatten_0 x_21 q_0 (cons_0 z_2 x_22)))
		(flatten_0 x_21 (TNode_0 q_0 z_2 r_0) y_2))))
(declare-fun count_0 (Nat_0 Nat_0 list_0) Bool)
(assert (forall ((x_24 Nat_0) (x_25 Nat_0) (ys_0 list_0) (x_4 Nat_0))
	(=>	(and (count_0 x_25 x_4 ys_0)
			(plus_0 x_24 (succ_0 zero_0) x_25))
		(count_0 x_24 x_4 (cons_0 x_4 ys_0)))))
(assert (forall ((x_27 Nat_0) (z_3 Nat_0) (ys_0 list_0) (x_4 Nat_0))
	(=>	(and (diseqNat_0 x_4 z_3)
			(count_0 x_27 x_4 ys_0))
		(count_0 x_27 x_4 (cons_0 z_3 ys_0)))))
(assert (forall ((x_4 Nat_0))
	(count_0 zero_0 x_4 nil_0)))
(declare-fun add_0 (Tree_0 Nat_0 Tree_0) Bool)
(assert (forall ((x_5 Nat_0))
	(add_0 (TNode_0 TNil_0 x_5 TNil_0) x_5 TNil_0)))
(assert (forall ((x_33 Tree_0) (q_1 Tree_0) (z_4 Nat_0) (r_1 Tree_0) (x_5 Nat_0))
	(=>	(and (add_0 x_33 x_5 q_1)
			(leq_0 true_0 x_5 z_4))
		(add_0 (TNode_0 x_33 z_4 r_1) x_5 (TNode_0 q_1 z_4 r_1)))))
(assert (forall ((x_36 Tree_0) (x_34 Bool_0) (q_1 Tree_0) (z_4 Nat_0) (r_1 Tree_0) (x_5 Nat_0))
	(=>	(and (diseqBool_0 x_34 true_0)
			(add_0 x_36 x_5 r_1)
			(leq_0 x_34 x_5 z_4))
		(add_0 (TNode_0 q_1 z_4 x_36) x_5 (TNode_0 q_1 z_4 r_1)))))
(declare-fun toTree_0 (Tree_0 list_0) Bool)
(assert (forall ((x_37 Tree_0) (x_38 Tree_0) (y_5 Nat_0) (xs_0 list_0))
	(=>	(and (toTree_0 x_38 xs_0)
			(add_0 x_37 y_5 x_38))
		(toTree_0 x_37 (cons_0 y_5 xs_0)))))
(assert (toTree_0 TNil_0 nil_0))
(declare-fun tsort_0 (list_0 list_0) Bool)
(assert (forall ((x_41 list_0) (x_42 Tree_0) (x_7 list_0))
	(=>	(and (toTree_0 x_42 x_7)
			(flatten_0 x_41 x_42 nil_0))
		(tsort_0 x_41 x_7))))
(assert (forall ((x_44 Nat_0) (x_45 Nat_0) (x_46 Nat_0) (x_47 Nat_0) (x_8 Nat_0) (y_6 Nat_0) (z_5 Nat_0))
	(=>	(and (diseqNat_0 x_45 x_47)
			(plus_0 x_44 y_6 z_5)
			(plus_0 x_45 x_8 x_44)
			(plus_0 x_46 x_8 y_6)
			(plus_0 x_47 x_46 z_5))
		false)))
(assert (forall ((x_48 Nat_0) (x_49 Nat_0) (x_9 Nat_0) (y_7 Nat_0))
	(=>	(and (diseqNat_0 x_48 x_49)
			(plus_0 x_48 x_9 y_7)
			(plus_0 x_49 y_7 x_9))
		false)))
(assert (forall ((x_50 Nat_0) (x_10 Nat_0))
	(=>	(and (diseqNat_0 x_50 x_10)
			(plus_0 x_50 x_10 zero_0))
		false)))
(assert (forall ((x_51 Nat_0) (x_11 Nat_0))
	(=>	(and (diseqNat_0 x_51 x_11)
			(plus_0 x_51 zero_0 x_11))
		false)))
(assert (forall ((x_52 list_0) (x_53 Nat_0) (x_54 Nat_0) (x_12 Nat_0) (xs_1 list_0))
	(=>	(and (diseqNat_0 x_53 x_54)
			(tsort_0 x_52 xs_1)
			(count_0 x_53 x_12 x_52)
			(count_0 x_54 x_12 xs_1))
		false)))
(check-sat)
