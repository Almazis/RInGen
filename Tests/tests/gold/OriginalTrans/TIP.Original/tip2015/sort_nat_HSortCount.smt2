(set-logic HORN)
(declare-datatypes ((Bool_0 0)) (((false_0 ) (true_0 ))))
(declare-fun diseqBool_0 (Bool_0 Bool_0) Bool)
(declare-fun isfalse_1 (Bool_0) Bool)
(declare-fun istrue_1 (Bool_0) Bool)
(assert (isfalse_1 false_0))
(assert (istrue_1 true_0))
(assert (diseqBool_0 false_0 true_0))
(assert (diseqBool_0 true_0 false_0))
(declare-fun and_0 (Bool_0 Bool_0 Bool_0) Bool)
(declare-fun or_0 (Bool_0 Bool_0 Bool_0) Bool)
(declare-fun hence_0 (Bool_0 Bool_0 Bool_0) Bool)
(declare-fun not_0 (Bool_0 Bool_0) Bool)
(assert (and_0 false_0 false_0 false_0))
(assert (and_0 false_0 true_0 false_0))
(assert (and_0 false_0 false_0 true_0))
(assert (and_0 true_0 true_0 true_0))
(assert (or_0 false_0 false_0 false_0))
(assert (or_0 true_0 true_0 false_0))
(assert (or_0 true_0 false_0 true_0))
(assert (or_0 true_0 true_0 true_0))
(assert (hence_0 true_0 false_0 false_0))
(assert (hence_0 false_0 true_0 false_0))
(assert (hence_0 true_0 false_0 true_0))
(assert (hence_0 true_0 true_0 true_0))
(assert (not_0 true_0 false_0))
(assert (not_0 false_0 true_0))
(declare-datatypes ((Nat_0 0)) (((zero_0 ) (succ_0 (p_0 Nat_0)))))
(declare-fun diseqNat_0 (Nat_0 Nat_0) Bool)
(declare-fun p_1 (Nat_0 Nat_0) Bool)
(declare-fun iszero_0 (Nat_0) Bool)
(declare-fun issucc_0 (Nat_0) Bool)
(assert (forall ((x_81 Nat_0))
	(p_1 x_81 (succ_0 x_81))))
(assert (iszero_0 zero_0))
(assert (forall ((x_83 Nat_0))
	(issucc_0 (succ_0 x_83))))
(assert (forall ((x_84 Nat_0))
	(diseqNat_0 zero_0 (succ_0 x_84))))
(assert (forall ((x_85 Nat_0))
	(diseqNat_0 (succ_0 x_85) zero_0)))
(assert (forall ((x_86 Nat_0) (x_87 Nat_0))
	(=> (diseqNat_0 x_86 x_87)
	    (diseqNat_0 (succ_0 x_86) (succ_0 x_87)))))
(declare-datatypes ((list_0 0)) (((nil_0 ) (cons_0 (head_0 Nat_0) (tail_0 list_0)))))
(declare-fun diseqlist_0 (list_0 list_0) Bool)
(declare-fun head_2 (Nat_0 list_0) Bool)
(declare-fun tail_2 (list_0 list_0) Bool)
(declare-fun isnil_0 (list_0) Bool)
(declare-fun iscons_0 (list_0) Bool)
(assert (forall ((x_89 Nat_0) (x_90 list_0))
	(head_2 x_89 (cons_0 x_89 x_90))))
(assert (forall ((x_89 Nat_0) (x_90 list_0))
	(tail_2 x_90 (cons_0 x_89 x_90))))
(assert (isnil_0 nil_0))
(assert (forall ((x_92 Nat_0) (x_93 list_0))
	(iscons_0 (cons_0 x_92 x_93))))
(assert (forall ((x_94 Nat_0) (x_95 list_0))
	(diseqlist_0 nil_0 (cons_0 x_94 x_95))))
(assert (forall ((x_96 Nat_0) (x_97 list_0))
	(diseqlist_0 (cons_0 x_96 x_97) nil_0)))
(assert (forall ((x_100 Nat_0) (x_101 list_0) (x_98 Nat_0) (x_99 list_0))
	(=> (diseqNat_0 x_98 x_100)
	    (diseqlist_0 (cons_0 x_98 x_99) (cons_0 x_100 x_101)))))
(assert (forall ((x_100 Nat_0) (x_101 list_0) (x_98 Nat_0) (x_99 list_0))
	(=> (diseqlist_0 x_99 x_101)
	    (diseqlist_0 (cons_0 x_98 x_99) (cons_0 x_100 x_101)))))
(declare-datatypes ((Heap_0 0)) (((Node_0 (projNode_0 Heap_0) (projNode_1 Nat_0) (projNode_2 Heap_0)) (Nil_1 ))))
(declare-fun diseqHeap_0 (Heap_0 Heap_0) Bool)
(declare-fun projNode_3 (Heap_0 Heap_0) Bool)
(declare-fun projNode_4 (Nat_0 Heap_0) Bool)
(declare-fun projNode_5 (Heap_0 Heap_0) Bool)
(declare-fun isNode_0 (Heap_0) Bool)
(declare-fun isNil_1 (Heap_0) Bool)
(assert (forall ((x_102 Heap_0) (x_103 Nat_0) (x_104 Heap_0))
	(projNode_3 x_102 (Node_0 x_102 x_103 x_104))))
(assert (forall ((x_102 Heap_0) (x_103 Nat_0) (x_104 Heap_0))
	(projNode_4 x_103 (Node_0 x_102 x_103 x_104))))
(assert (forall ((x_102 Heap_0) (x_103 Nat_0) (x_104 Heap_0))
	(projNode_5 x_104 (Node_0 x_102 x_103 x_104))))
(assert (forall ((x_107 Heap_0) (x_108 Nat_0) (x_109 Heap_0))
	(isNode_0 (Node_0 x_107 x_108 x_109))))
(assert (isNil_1 Nil_1))
(assert (forall ((x_110 Heap_0) (x_111 Nat_0) (x_112 Heap_0))
	(diseqHeap_0 (Node_0 x_110 x_111 x_112) Nil_1)))
(assert (forall ((x_113 Heap_0) (x_114 Nat_0) (x_115 Heap_0))
	(diseqHeap_0 Nil_1 (Node_0 x_113 x_114 x_115))))
(assert (forall ((x_116 Heap_0) (x_117 Nat_0) (x_118 Heap_0) (x_119 Heap_0) (x_120 Nat_0) (x_121 Heap_0))
	(=> (diseqHeap_0 x_116 x_119)
	    (diseqHeap_0 (Node_0 x_116 x_117 x_118) (Node_0 x_119 x_120 x_121)))))
(assert (forall ((x_116 Heap_0) (x_117 Nat_0) (x_118 Heap_0) (x_119 Heap_0) (x_120 Nat_0) (x_121 Heap_0))
	(=> (diseqNat_0 x_117 x_120)
	    (diseqHeap_0 (Node_0 x_116 x_117 x_118) (Node_0 x_119 x_120 x_121)))))
(assert (forall ((x_116 Heap_0) (x_117 Nat_0) (x_118 Heap_0) (x_119 Heap_0) (x_120 Nat_0) (x_121 Heap_0))
	(=> (diseqHeap_0 x_118 x_121)
	    (diseqHeap_0 (Node_0 x_116 x_117 x_118) (Node_0 x_119 x_120 x_121)))))
(declare-datatypes ((list_1 0)) (((nil_2 ) (cons_1 (head_1 Heap_0) (tail_1 list_1)))))
(declare-fun diseqlist_1 (list_1 list_1) Bool)
(declare-fun head_3 (Heap_0 list_1) Bool)
(declare-fun tail_3 (list_1 list_1) Bool)
(declare-fun isnil_2 (list_1) Bool)
(declare-fun iscons_1 (list_1) Bool)
(assert (forall ((x_123 Heap_0) (x_124 list_1))
	(head_3 x_123 (cons_1 x_123 x_124))))
(assert (forall ((x_123 Heap_0) (x_124 list_1))
	(tail_3 x_124 (cons_1 x_123 x_124))))
(assert (isnil_2 nil_2))
(assert (forall ((x_126 Heap_0) (x_127 list_1))
	(iscons_1 (cons_1 x_126 x_127))))
(assert (forall ((x_128 Heap_0) (x_129 list_1))
	(diseqlist_1 nil_2 (cons_1 x_128 x_129))))
(assert (forall ((x_130 Heap_0) (x_131 list_1))
	(diseqlist_1 (cons_1 x_130 x_131) nil_2)))
(assert (forall ((x_132 Heap_0) (x_133 list_1) (x_134 Heap_0) (x_135 list_1))
	(=> (diseqHeap_0 x_132 x_134)
	    (diseqlist_1 (cons_1 x_132 x_133) (cons_1 x_134 x_135)))))
(assert (forall ((x_132 Heap_0) (x_133 list_1) (x_134 Heap_0) (x_135 list_1))
	(=> (diseqlist_1 x_133 x_135)
	    (diseqlist_1 (cons_1 x_132 x_133) (cons_1 x_134 x_135)))))
(declare-fun toHeap_0 (list_1 list_0) Bool)
(assert (forall ((x_23 list_1) (y_0 Nat_0) (z_0 list_0))
	(=> (toHeap_0 x_23 z_0)
	    (toHeap_0 (cons_1 (Node_0 Nil_1 y_0 Nil_1) x_23) (cons_0 y_0 z_0)))))
(assert (toHeap_0 nil_2 nil_0))
(declare-fun plus_0 (Nat_0 Nat_0 Nat_0) Bool)
(assert (forall ((x_26 Nat_0) (z_1 Nat_0) (y_1 Nat_0))
	(=> (plus_0 x_26 z_1 y_1)
	    (plus_0 (succ_0 x_26) (succ_0 z_1) y_1))))
(assert (forall ((x_27 Nat_0))
	(plus_0 x_27 zero_0 x_27)))
(declare-fun leq_0 (Bool_0 Nat_0 Nat_0) Bool)
(assert (forall ((x_28 Bool_0) (x_3 Nat_0) (z_2 Nat_0))
	(=> (leq_0 x_28 z_2 x_3)
	    (leq_0 x_28 (succ_0 z_2) (succ_0 x_3)))))
(assert (forall ((z_2 Nat_0))
	(leq_0 false_0 (succ_0 z_2) zero_0)))
(assert (forall ((y_2 Nat_0))
	(leq_0 true_0 zero_0 y_2)))
(declare-fun hmerge_0 (Heap_0 Heap_0 Heap_0) Bool)
(assert (forall ((x_32 Heap_0))
	(hmerge_0 x_32 Nil_1 x_32)))
(assert (forall ((z_3 Heap_0) (x_5 Nat_0) (x_6 Heap_0))
	(hmerge_0 (Node_0 z_3 x_5 x_6) (Node_0 z_3 x_5 x_6) Nil_1)))
(assert (forall ((x_36 Heap_0) (x_7 Heap_0) (x_8 Nat_0) (x_9 Heap_0) (z_3 Heap_0) (x_5 Nat_0) (x_6 Heap_0))
	(=>	(and (hmerge_0 x_36 x_6 (Node_0 x_7 x_8 x_9))
			(leq_0 true_0 x_5 x_8))
		(hmerge_0 (Node_0 x_36 x_5 z_3) (Node_0 z_3 x_5 x_6) (Node_0 x_7 x_8 x_9)))))
(assert (forall ((x_39 Heap_0) (x_37 Bool_0) (x_7 Heap_0) (x_8 Nat_0) (x_9 Heap_0) (z_3 Heap_0) (x_5 Nat_0) (x_6 Heap_0))
	(=>	(and (diseqBool_0 x_37 true_0)
			(hmerge_0 x_39 (Node_0 z_3 x_5 x_6) x_9)
			(leq_0 x_37 x_5 x_8))
		(hmerge_0 (Node_0 x_39 x_8 x_7) (Node_0 z_3 x_5 x_6) (Node_0 x_7 x_8 x_9)))))
(declare-fun hpairwise_0 (list_1 list_1) Bool)
(assert (forall ((x_41 Heap_0) (x_42 list_1) (r_0 Heap_0) (qs_0 list_1) (q_0 Heap_0))
	(=>	(and (hmerge_0 x_41 q_0 r_0)
			(hpairwise_0 x_42 qs_0))
		(hpairwise_0 (cons_1 x_41 x_42) (cons_1 q_0 (cons_1 r_0 qs_0))))))
(assert (forall ((q_0 Heap_0))
	(hpairwise_0 (cons_1 q_0 nil_2) (cons_1 q_0 nil_2))))
(assert (hpairwise_0 nil_2 nil_2))
(declare-fun hmerging_0 (Heap_0 list_1) Bool)
(assert (forall ((x_45 Heap_0) (x_46 list_1) (z_4 Heap_0) (x_12 list_1) (q_1 Heap_0))
	(=>	(and (hpairwise_0 x_46 (cons_1 q_1 (cons_1 z_4 x_12)))
			(hmerging_0 x_45 x_46))
		(hmerging_0 x_45 (cons_1 q_1 (cons_1 z_4 x_12))))))
(assert (forall ((q_1 Heap_0))
	(hmerging_0 q_1 (cons_1 q_1 nil_2))))
(assert (hmerging_0 Nil_1 nil_2))
(declare-fun toHeap_1 (Heap_0 list_0) Bool)
(assert (forall ((x_50 Heap_0) (x_51 list_1) (x_13 list_0))
	(=>	(and (toHeap_0 x_51 x_13)
			(hmerging_0 x_50 x_51))
		(toHeap_1 x_50 x_13))))
(declare-fun toList_0 (list_0 Heap_0) Bool)
(assert (toList_0 nil_0 Nil_1))
(assert (forall ((x_55 Heap_0) (x_56 list_0) (q_2 Heap_0) (y_6 Nat_0) (r_1 Heap_0))
	(=>	(and (hmerge_0 x_55 q_2 r_1)
			(toList_0 x_56 x_55))
		(toList_0 (cons_0 y_6 x_56) (Node_0 q_2 y_6 r_1)))))
(declare-fun hsort_0 (list_0 list_0) Bool)
(assert (forall ((x_57 list_0) (x_58 Heap_0) (x_15 list_0))
	(=>	(and (toHeap_1 x_58 x_15)
			(toList_0 x_57 x_58))
		(hsort_0 x_57 x_15))))
(declare-fun count_0 (Nat_0 Nat_0 list_0) Bool)
(assert (forall ((x_60 Nat_0) (x_61 Nat_0) (ys_0 list_0) (x_16 Nat_0))
	(=>	(and (count_0 x_61 x_16 ys_0)
			(plus_0 x_60 (succ_0 zero_0) x_61))
		(count_0 x_60 x_16 (cons_0 x_16 ys_0)))))
(assert (forall ((x_63 Nat_0) (z_5 Nat_0) (ys_0 list_0) (x_16 Nat_0))
	(=>	(and (diseqNat_0 x_16 z_5)
			(count_0 x_63 x_16 ys_0))
		(count_0 x_63 x_16 (cons_0 z_5 ys_0)))))
(assert (forall ((x_16 Nat_0))
	(count_0 zero_0 x_16 nil_0)))
(assert (forall ((x_66 Nat_0) (x_67 Nat_0) (x_68 Nat_0) (x_69 Nat_0) (x_17 Nat_0) (y_8 Nat_0) (z_6 Nat_0))
	(=>	(and (diseqNat_0 x_67 x_69)
			(plus_0 x_66 y_8 z_6)
			(plus_0 x_67 x_17 x_66)
			(plus_0 x_68 x_17 y_8)
			(plus_0 x_69 x_68 z_6))
		false)))
(assert (forall ((x_70 Nat_0) (x_71 Nat_0) (x_18 Nat_0) (y_9 Nat_0))
	(=>	(and (diseqNat_0 x_70 x_71)
			(plus_0 x_70 x_18 y_9)
			(plus_0 x_71 y_9 x_18))
		false)))
(assert (forall ((x_72 Nat_0) (x_19 Nat_0))
	(=>	(and (diseqNat_0 x_72 x_19)
			(plus_0 x_72 x_19 zero_0))
		false)))
(assert (forall ((x_73 Nat_0) (x_20 Nat_0))
	(=>	(and (diseqNat_0 x_73 x_20)
			(plus_0 x_73 zero_0 x_20))
		false)))
(assert (forall ((x_74 list_0) (x_75 Nat_0) (x_76 Nat_0) (x_21 Nat_0) (xs_0 list_0))
	(=>	(and (diseqNat_0 x_75 x_76)
			(hsort_0 x_74 xs_0)
			(count_0 x_75 x_21 x_74)
			(count_0 x_76 x_21 xs_0))
		false)))
(check-sat)
