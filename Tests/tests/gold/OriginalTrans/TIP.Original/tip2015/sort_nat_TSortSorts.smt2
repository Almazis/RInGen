(set-logic HORN)
(declare-datatypes ((Bool_0 0)) (((false_0 ) (true_0 ))))
(declare-fun diseqBool_0 (Bool_0 Bool_0) Bool)
(declare-fun isfalse_1 (Bool_0) Bool)
(declare-fun istrue_1 (Bool_0) Bool)
(assert (isfalse_1 false_0))
(assert (istrue_1 true_0))
(assert (diseqBool_0 false_0 true_0))
(assert (diseqBool_0 true_0 false_0))
(declare-fun and_0 (Bool_0 Bool_0 Bool_0) Bool)
(declare-fun or_0 (Bool_0 Bool_0 Bool_0) Bool)
(declare-fun hence_0 (Bool_0 Bool_0 Bool_0) Bool)
(declare-fun not_0 (Bool_0 Bool_0) Bool)
(assert (and_0 false_0 false_0 false_0))
(assert (and_0 false_0 true_0 false_0))
(assert (and_0 false_0 false_0 true_0))
(assert (and_0 true_0 true_0 true_0))
(assert (or_0 false_0 false_0 false_0))
(assert (or_0 true_0 true_0 false_0))
(assert (or_0 true_0 false_0 true_0))
(assert (or_0 true_0 true_0 true_0))
(assert (hence_0 true_0 false_0 false_0))
(assert (hence_0 false_0 true_0 false_0))
(assert (hence_0 true_0 false_0 true_0))
(assert (hence_0 true_0 true_0 true_0))
(assert (not_0 true_0 false_0))
(assert (not_0 false_0 true_0))
(declare-datatypes ((Nat_0 0)) (((zero_0 ) (succ_0 (p_0 Nat_0)))))
(declare-fun diseqNat_0 (Nat_0 Nat_0) Bool)
(declare-fun p_1 (Nat_0 Nat_0) Bool)
(declare-fun iszero_0 (Nat_0) Bool)
(declare-fun issucc_0 (Nat_0) Bool)
(assert (forall ((x_41 Nat_0))
	(p_1 x_41 (succ_0 x_41))))
(assert (iszero_0 zero_0))
(assert (forall ((x_43 Nat_0))
	(issucc_0 (succ_0 x_43))))
(assert (forall ((x_44 Nat_0))
	(diseqNat_0 zero_0 (succ_0 x_44))))
(assert (forall ((x_45 Nat_0))
	(diseqNat_0 (succ_0 x_45) zero_0)))
(assert (forall ((x_46 Nat_0) (x_47 Nat_0))
	(=> (diseqNat_0 x_46 x_47)
	    (diseqNat_0 (succ_0 x_46) (succ_0 x_47)))))
(declare-datatypes ((Tree_0 0)) (((TNode_0 (projTNode_0 Tree_0) (projTNode_1 Nat_0) (projTNode_2 Tree_0)) (TNil_0 ))))
(declare-fun diseqTree_0 (Tree_0 Tree_0) Bool)
(declare-fun projTNode_3 (Tree_0 Tree_0) Bool)
(declare-fun projTNode_4 (Nat_0 Tree_0) Bool)
(declare-fun projTNode_5 (Tree_0 Tree_0) Bool)
(declare-fun isTNode_0 (Tree_0) Bool)
(declare-fun isTNil_0 (Tree_0) Bool)
(assert (forall ((x_48 Tree_0) (x_49 Nat_0) (x_50 Tree_0))
	(projTNode_3 x_48 (TNode_0 x_48 x_49 x_50))))
(assert (forall ((x_48 Tree_0) (x_49 Nat_0) (x_50 Tree_0))
	(projTNode_4 x_49 (TNode_0 x_48 x_49 x_50))))
(assert (forall ((x_48 Tree_0) (x_49 Nat_0) (x_50 Tree_0))
	(projTNode_5 x_50 (TNode_0 x_48 x_49 x_50))))
(assert (forall ((x_53 Tree_0) (x_54 Nat_0) (x_55 Tree_0))
	(isTNode_0 (TNode_0 x_53 x_54 x_55))))
(assert (isTNil_0 TNil_0))
(assert (forall ((x_56 Tree_0) (x_57 Nat_0) (x_58 Tree_0))
	(diseqTree_0 (TNode_0 x_56 x_57 x_58) TNil_0)))
(assert (forall ((x_59 Tree_0) (x_60 Nat_0) (x_61 Tree_0))
	(diseqTree_0 TNil_0 (TNode_0 x_59 x_60 x_61))))
(assert (forall ((x_62 Tree_0) (x_63 Nat_0) (x_64 Tree_0) (x_65 Tree_0) (x_66 Nat_0) (x_67 Tree_0))
	(=> (diseqTree_0 x_62 x_65)
	    (diseqTree_0 (TNode_0 x_62 x_63 x_64) (TNode_0 x_65 x_66 x_67)))))
(assert (forall ((x_62 Tree_0) (x_63 Nat_0) (x_64 Tree_0) (x_65 Tree_0) (x_66 Nat_0) (x_67 Tree_0))
	(=> (diseqNat_0 x_63 x_66)
	    (diseqTree_0 (TNode_0 x_62 x_63 x_64) (TNode_0 x_65 x_66 x_67)))))
(assert (forall ((x_62 Tree_0) (x_63 Nat_0) (x_64 Tree_0) (x_65 Tree_0) (x_66 Nat_0) (x_67 Tree_0))
	(=> (diseqTree_0 x_64 x_67)
	    (diseqTree_0 (TNode_0 x_62 x_63 x_64) (TNode_0 x_65 x_66 x_67)))))
(declare-datatypes ((list_0 0)) (((nil_0 ) (cons_0 (head_0 Nat_0) (tail_0 list_0)))))
(declare-fun diseqlist_0 (list_0 list_0) Bool)
(declare-fun head_1 (Nat_0 list_0) Bool)
(declare-fun tail_1 (list_0 list_0) Bool)
(declare-fun isnil_0 (list_0) Bool)
(declare-fun iscons_0 (list_0) Bool)
(assert (forall ((x_69 Nat_0) (x_70 list_0))
	(head_1 x_69 (cons_0 x_69 x_70))))
(assert (forall ((x_69 Nat_0) (x_70 list_0))
	(tail_1 x_70 (cons_0 x_69 x_70))))
(assert (isnil_0 nil_0))
(assert (forall ((x_72 Nat_0) (x_73 list_0))
	(iscons_0 (cons_0 x_72 x_73))))
(assert (forall ((x_74 Nat_0) (x_75 list_0))
	(diseqlist_0 nil_0 (cons_0 x_74 x_75))))
(assert (forall ((x_76 Nat_0) (x_77 list_0))
	(diseqlist_0 (cons_0 x_76 x_77) nil_0)))
(assert (forall ((x_78 Nat_0) (x_79 list_0) (x_80 Nat_0) (x_81 list_0))
	(=> (diseqNat_0 x_78 x_80)
	    (diseqlist_0 (cons_0 x_78 x_79) (cons_0 x_80 x_81)))))
(assert (forall ((x_78 Nat_0) (x_79 list_0) (x_80 Nat_0) (x_81 list_0))
	(=> (diseqlist_0 x_79 x_81)
	    (diseqlist_0 (cons_0 x_78 x_79) (cons_0 x_80 x_81)))))
(declare-fun leq_0 (Bool_0 Nat_0 Nat_0) Bool)
(assert (forall ((x_7 Bool_0) (x_1 Nat_0) (z_0 Nat_0))
	(=> (leq_0 x_7 z_0 x_1)
	    (leq_0 x_7 (succ_0 z_0) (succ_0 x_1)))))
(assert (forall ((z_0 Nat_0))
	(leq_0 false_0 (succ_0 z_0) zero_0)))
(assert (forall ((y_0 Nat_0))
	(leq_0 true_0 zero_0 y_0)))
(declare-fun ordered_0 (Bool_0 list_0) Bool)
(assert (forall ((x_11 Bool_0) (x_12 Bool_0) (x_13 Bool_0) (y_2 Nat_0) (xs_0 list_0) (y_1 Nat_0))
	(=>	(and (leq_0 x_12 y_1 y_2)
			(ordered_0 x_13 (cons_0 y_2 xs_0))
			(and_0 x_11 x_12 x_13))
		(ordered_0 x_11 (cons_0 y_1 (cons_0 y_2 xs_0))))))
(assert (forall ((y_1 Nat_0))
	(ordered_0 true_0 (cons_0 y_1 nil_0))))
(assert (ordered_0 true_0 nil_0))
(declare-fun flatten_0 (list_0 Tree_0 list_0) Bool)
(assert (forall ((x_16 list_0))
	(flatten_0 x_16 TNil_0 x_16)))
(assert (forall ((x_17 list_0) (x_18 list_0) (q_0 Tree_0) (z_2 Nat_0) (r_0 Tree_0) (y_3 list_0))
	(=>	(and (flatten_0 x_18 r_0 y_3)
			(flatten_0 x_17 q_0 (cons_0 z_2 x_18)))
		(flatten_0 x_17 (TNode_0 q_0 z_2 r_0) y_3))))
(declare-fun add_0 (Tree_0 Nat_0 Tree_0) Bool)
(assert (forall ((x_4 Nat_0))
	(add_0 (TNode_0 TNil_0 x_4 TNil_0) x_4 TNil_0)))
(assert (forall ((x_23 Tree_0) (q_1 Tree_0) (z_3 Nat_0) (r_1 Tree_0) (x_4 Nat_0))
	(=>	(and (add_0 x_23 x_4 q_1)
			(leq_0 true_0 x_4 z_3))
		(add_0 (TNode_0 x_23 z_3 r_1) x_4 (TNode_0 q_1 z_3 r_1)))))
(assert (forall ((x_26 Tree_0) (x_24 Bool_0) (q_1 Tree_0) (z_3 Nat_0) (r_1 Tree_0) (x_4 Nat_0))
	(=>	(and (diseqBool_0 x_24 true_0)
			(add_0 x_26 x_4 r_1)
			(leq_0 x_24 x_4 z_3))
		(add_0 (TNode_0 q_1 z_3 x_26) x_4 (TNode_0 q_1 z_3 r_1)))))
(declare-fun toTree_0 (Tree_0 list_0) Bool)
(assert (forall ((x_27 Tree_0) (x_28 Tree_0) (y_5 Nat_0) (xs_1 list_0))
	(=>	(and (toTree_0 x_28 xs_1)
			(add_0 x_27 y_5 x_28))
		(toTree_0 x_27 (cons_0 y_5 xs_1)))))
(assert (toTree_0 TNil_0 nil_0))
(declare-fun tsort_0 (list_0 list_0) Bool)
(assert (forall ((x_31 list_0) (x_32 Tree_0) (x_6 list_0))
	(=>	(and (toTree_0 x_32 x_6)
			(flatten_0 x_31 x_32 nil_0))
		(tsort_0 x_31 x_6))))
(assert (forall ((x_34 list_0) (x_35 Bool_0) (xs_2 list_0))
	(=>	(and (diseqBool_0 x_35 true_0)
			(tsort_0 x_34 xs_2)
			(ordered_0 x_35 x_34))
		false)))
(check-sat)
