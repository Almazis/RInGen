(set-logic HORN)
(declare-datatypes ((Bool_0 0)) (((false_0 ) (true_0 ))))
(declare-fun diseqBool_0 (Bool_0 Bool_0) Bool)
(declare-fun isfalse_1 (Bool_0) Bool)
(declare-fun istrue_1 (Bool_0) Bool)
(assert (isfalse_1 false_0))
(assert (istrue_1 true_0))
(assert (diseqBool_0 false_0 true_0))
(assert (diseqBool_0 true_0 false_0))
(declare-fun and_0 (Bool_0 Bool_0 Bool_0) Bool)
(declare-fun or_0 (Bool_0 Bool_0 Bool_0) Bool)
(declare-fun hence_0 (Bool_0 Bool_0 Bool_0) Bool)
(declare-fun not_0 (Bool_0 Bool_0) Bool)
(assert (and_0 false_0 false_0 false_0))
(assert (and_0 false_0 true_0 false_0))
(assert (and_0 false_0 false_0 true_0))
(assert (and_0 true_0 true_0 true_0))
(assert (or_0 false_0 false_0 false_0))
(assert (or_0 true_0 true_0 false_0))
(assert (or_0 true_0 false_0 true_0))
(assert (or_0 true_0 true_0 true_0))
(assert (hence_0 true_0 false_0 false_0))
(assert (hence_0 false_0 true_0 false_0))
(assert (hence_0 true_0 false_0 true_0))
(assert (hence_0 true_0 true_0 true_0))
(assert (not_0 true_0 false_0))
(assert (not_0 false_0 true_0))
(declare-datatypes ((Nat_0 0)) (((zero_0 ) (succ_0 (p_0 Nat_0)))))
(declare-fun diseqNat_0 (Nat_0 Nat_0) Bool)
(declare-fun p_1 (Nat_0 Nat_0) Bool)
(declare-fun iszero_0 (Nat_0) Bool)
(declare-fun issucc_0 (Nat_0) Bool)
(assert (forall ((x_68 Nat_0))
	(p_1 x_68 (succ_0 x_68))))
(assert (iszero_0 zero_0))
(assert (forall ((x_70 Nat_0))
	(issucc_0 (succ_0 x_70))))
(assert (forall ((x_71 Nat_0))
	(diseqNat_0 zero_0 (succ_0 x_71))))
(assert (forall ((x_72 Nat_0))
	(diseqNat_0 (succ_0 x_72) zero_0)))
(assert (forall ((x_73 Nat_0) (x_74 Nat_0))
	(=> (diseqNat_0 x_73 x_74)
	    (diseqNat_0 (succ_0 x_73) (succ_0 x_74)))))
(declare-datatypes ((list_0 0)) (((nil_0 ) (cons_0 (head_0 Nat_0) (tail_0 list_0)))))
(declare-fun diseqlist_0 (list_0 list_0) Bool)
(declare-fun head_1 (Nat_0 list_0) Bool)
(declare-fun tail_1 (list_0 list_0) Bool)
(declare-fun isnil_0 (list_0) Bool)
(declare-fun iscons_0 (list_0) Bool)
(assert (forall ((x_76 Nat_0) (x_77 list_0))
	(head_1 x_76 (cons_0 x_76 x_77))))
(assert (forall ((x_76 Nat_0) (x_77 list_0))
	(tail_1 x_77 (cons_0 x_76 x_77))))
(assert (isnil_0 nil_0))
(assert (forall ((x_79 Nat_0) (x_80 list_0))
	(iscons_0 (cons_0 x_79 x_80))))
(assert (forall ((x_81 Nat_0) (x_82 list_0))
	(diseqlist_0 nil_0 (cons_0 x_81 x_82))))
(assert (forall ((x_83 Nat_0) (x_84 list_0))
	(diseqlist_0 (cons_0 x_83 x_84) nil_0)))
(assert (forall ((x_85 Nat_0) (x_86 list_0) (x_87 Nat_0) (x_88 list_0))
	(=> (diseqNat_0 x_85 x_87)
	    (diseqlist_0 (cons_0 x_85 x_86) (cons_0 x_87 x_88)))))
(assert (forall ((x_85 Nat_0) (x_86 list_0) (x_87 Nat_0) (x_88 list_0))
	(=> (diseqlist_0 x_86 x_88)
	    (diseqlist_0 (cons_0 x_85 x_86) (cons_0 x_87 x_88)))))
(declare-datatypes ((Heap_0 0)) (((Node_0 (projNode_0 Heap_0) (projNode_1 Nat_0) (projNode_2 Heap_0)) (Nil_1 ))))
(declare-fun diseqHeap_0 (Heap_0 Heap_0) Bool)
(declare-fun projNode_3 (Heap_0 Heap_0) Bool)
(declare-fun projNode_4 (Nat_0 Heap_0) Bool)
(declare-fun projNode_5 (Heap_0 Heap_0) Bool)
(declare-fun isNode_0 (Heap_0) Bool)
(declare-fun isNil_1 (Heap_0) Bool)
(assert (forall ((x_89 Heap_0) (x_90 Nat_0) (x_91 Heap_0))
	(projNode_3 x_89 (Node_0 x_89 x_90 x_91))))
(assert (forall ((x_89 Heap_0) (x_90 Nat_0) (x_91 Heap_0))
	(projNode_4 x_90 (Node_0 x_89 x_90 x_91))))
(assert (forall ((x_89 Heap_0) (x_90 Nat_0) (x_91 Heap_0))
	(projNode_5 x_91 (Node_0 x_89 x_90 x_91))))
(assert (forall ((x_94 Heap_0) (x_95 Nat_0) (x_96 Heap_0))
	(isNode_0 (Node_0 x_94 x_95 x_96))))
(assert (isNil_1 Nil_1))
(assert (forall ((x_97 Heap_0) (x_98 Nat_0) (x_99 Heap_0))
	(diseqHeap_0 (Node_0 x_97 x_98 x_99) Nil_1)))
(assert (forall ((x_100 Heap_0) (x_101 Nat_0) (x_102 Heap_0))
	(diseqHeap_0 Nil_1 (Node_0 x_100 x_101 x_102))))
(assert (forall ((x_103 Heap_0) (x_104 Nat_0) (x_105 Heap_0) (x_106 Heap_0) (x_107 Nat_0) (x_108 Heap_0))
	(=> (diseqHeap_0 x_103 x_106)
	    (diseqHeap_0 (Node_0 x_103 x_104 x_105) (Node_0 x_106 x_107 x_108)))))
(assert (forall ((x_103 Heap_0) (x_104 Nat_0) (x_105 Heap_0) (x_106 Heap_0) (x_107 Nat_0) (x_108 Heap_0))
	(=> (diseqNat_0 x_104 x_107)
	    (diseqHeap_0 (Node_0 x_103 x_104 x_105) (Node_0 x_106 x_107 x_108)))))
(assert (forall ((x_103 Heap_0) (x_104 Nat_0) (x_105 Heap_0) (x_106 Heap_0) (x_107 Nat_0) (x_108 Heap_0))
	(=> (diseqHeap_0 x_105 x_108)
	    (diseqHeap_0 (Node_0 x_103 x_104 x_105) (Node_0 x_106 x_107 x_108)))))
(declare-fun plus_0 (Nat_0 Nat_0 Nat_0) Bool)
(assert (forall ((x_20 Nat_0) (z_0 Nat_0) (y_0 Nat_0))
	(=> (plus_0 x_20 z_0 y_0)
	    (plus_0 (succ_0 x_20) (succ_0 z_0) y_0))))
(assert (forall ((x_21 Nat_0))
	(plus_0 x_21 zero_0 x_21)))
(declare-fun leq_0 (Bool_0 Nat_0 Nat_0) Bool)
(assert (forall ((x_22 Bool_0) (x_2 Nat_0) (z_1 Nat_0))
	(=> (leq_0 x_22 z_1 x_2)
	    (leq_0 x_22 (succ_0 z_1) (succ_0 x_2)))))
(assert (forall ((z_1 Nat_0))
	(leq_0 false_0 (succ_0 z_1) zero_0)))
(assert (forall ((y_1 Nat_0))
	(leq_0 true_0 zero_0 y_1)))
(declare-fun hmerge_0 (Heap_0 Heap_0 Heap_0) Bool)
(assert (forall ((x_26 Heap_0))
	(hmerge_0 x_26 Nil_1 x_26)))
(assert (forall ((z_2 Heap_0) (x_4 Nat_0) (x_5 Heap_0))
	(hmerge_0 (Node_0 z_2 x_4 x_5) (Node_0 z_2 x_4 x_5) Nil_1)))
(assert (forall ((x_30 Heap_0) (x_6 Heap_0) (x_7 Nat_0) (x_8 Heap_0) (z_2 Heap_0) (x_4 Nat_0) (x_5 Heap_0))
	(=>	(and (hmerge_0 x_30 x_5 (Node_0 x_6 x_7 x_8))
			(leq_0 true_0 x_4 x_7))
		(hmerge_0 (Node_0 x_30 x_4 z_2) (Node_0 z_2 x_4 x_5) (Node_0 x_6 x_7 x_8)))))
(assert (forall ((x_33 Heap_0) (x_31 Bool_0) (x_6 Heap_0) (x_7 Nat_0) (x_8 Heap_0) (z_2 Heap_0) (x_4 Nat_0) (x_5 Heap_0))
	(=>	(and (diseqBool_0 x_31 true_0)
			(hmerge_0 x_33 (Node_0 z_2 x_4 x_5) x_8)
			(leq_0 x_31 x_4 x_7))
		(hmerge_0 (Node_0 x_33 x_7 x_6) (Node_0 z_2 x_4 x_5) (Node_0 x_6 x_7 x_8)))))
(declare-fun toList_0 (list_0 Heap_0) Bool)
(assert (toList_0 nil_0 Nil_1))
(assert (forall ((x_36 Heap_0) (x_37 list_0) (q_0 Heap_0) (y_3 Nat_0) (r_0 Heap_0))
	(=>	(and (hmerge_0 x_36 q_0 r_0)
			(toList_0 x_37 x_36))
		(toList_0 (cons_0 y_3 x_37) (Node_0 q_0 y_3 r_0)))))
(declare-fun hinsert_0 (Heap_0 Nat_0 Heap_0) Bool)
(assert (forall ((x_38 Heap_0) (x_10 Nat_0) (y_4 Heap_0))
	(=> (hmerge_0 x_38 (Node_0 Nil_1 x_10 Nil_1) y_4)
	    (hinsert_0 x_38 x_10 y_4))))
(declare-fun toHeap_0 (Heap_0 list_0) Bool)
(assert (forall ((x_40 Heap_0) (x_41 Heap_0) (y_5 Nat_0) (xs_0 list_0))
	(=>	(and (toHeap_0 x_41 xs_0)
			(hinsert_0 x_40 y_5 x_41))
		(toHeap_0 x_40 (cons_0 y_5 xs_0)))))
(assert (toHeap_0 Nil_1 nil_0))
(declare-fun hsort_0 (list_0 list_0) Bool)
(assert (forall ((x_44 list_0) (x_45 Heap_0) (x_12 list_0))
	(=>	(and (toHeap_0 x_45 x_12)
			(toList_0 x_44 x_45))
		(hsort_0 x_44 x_12))))
(declare-fun count_0 (Nat_0 Nat_0 list_0) Bool)
(assert (forall ((x_47 Nat_0) (x_48 Nat_0) (ys_0 list_0) (x_13 Nat_0))
	(=>	(and (count_0 x_48 x_13 ys_0)
			(plus_0 x_47 (succ_0 zero_0) x_48))
		(count_0 x_47 x_13 (cons_0 x_13 ys_0)))))
(assert (forall ((x_50 Nat_0) (z_3 Nat_0) (ys_0 list_0) (x_13 Nat_0))
	(=>	(and (diseqNat_0 x_13 z_3)
			(count_0 x_50 x_13 ys_0))
		(count_0 x_50 x_13 (cons_0 z_3 ys_0)))))
(assert (forall ((x_13 Nat_0))
	(count_0 zero_0 x_13 nil_0)))
(assert (forall ((x_53 Nat_0) (x_54 Nat_0) (x_55 Nat_0) (x_56 Nat_0) (x_14 Nat_0) (y_7 Nat_0) (z_4 Nat_0))
	(=>	(and (diseqNat_0 x_54 x_56)
			(plus_0 x_53 y_7 z_4)
			(plus_0 x_54 x_14 x_53)
			(plus_0 x_55 x_14 y_7)
			(plus_0 x_56 x_55 z_4))
		false)))
(assert (forall ((x_57 Nat_0) (x_58 Nat_0) (x_15 Nat_0) (y_8 Nat_0))
	(=>	(and (diseqNat_0 x_57 x_58)
			(plus_0 x_57 x_15 y_8)
			(plus_0 x_58 y_8 x_15))
		false)))
(assert (forall ((x_59 Nat_0) (x_16 Nat_0))
	(=>	(and (diseqNat_0 x_59 x_16)
			(plus_0 x_59 x_16 zero_0))
		false)))
(assert (forall ((x_60 Nat_0) (x_17 Nat_0))
	(=>	(and (diseqNat_0 x_60 x_17)
			(plus_0 x_60 zero_0 x_17))
		false)))
(assert (forall ((x_61 list_0) (x_62 Nat_0) (x_63 Nat_0) (x_18 Nat_0) (xs_1 list_0))
	(=>	(and (diseqNat_0 x_62 x_63)
			(hsort_0 x_61 xs_1)
			(count_0 x_62 x_18 x_61)
			(count_0 x_63 x_18 xs_1))
		false)))
(check-sat)
