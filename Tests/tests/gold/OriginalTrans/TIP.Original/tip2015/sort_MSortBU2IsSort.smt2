(set-logic HORN)
(declare-datatypes ((Nat_0 0)) (((Z_4 ) (Z_5 (unS_0 Nat_0)))))
(declare-fun diseqNat_0 (Nat_0 Nat_0) Bool)
(declare-fun unS_1 (Nat_0 Nat_0) Bool)
(declare-fun isZ_2 (Nat_0) Bool)
(declare-fun isZ_3 (Nat_0) Bool)
(assert (forall ((x_52 Nat_0))
	(unS_1 x_52 (Z_5 x_52))))
(assert (isZ_2 Z_4))
(assert (forall ((x_54 Nat_0))
	(isZ_3 (Z_5 x_54))))
(assert (forall ((x_55 Nat_0))
	(diseqNat_0 Z_4 (Z_5 x_55))))
(assert (forall ((x_56 Nat_0))
	(diseqNat_0 (Z_5 x_56) Z_4)))
(assert (forall ((x_57 Nat_0) (x_58 Nat_0))
	(=> (diseqNat_0 x_57 x_58)
	    (diseqNat_0 (Z_5 x_57) (Z_5 x_58)))))
(declare-fun add_0 (Nat_0 Nat_0 Nat_0) Bool)
(declare-fun minus_0 (Nat_0 Nat_0 Nat_0) Bool)
(declare-fun le_0 (Nat_0 Nat_0) Bool)
(declare-fun ge_0 (Nat_0 Nat_0) Bool)
(declare-fun lt_0 (Nat_0 Nat_0) Bool)
(declare-fun gt_0 (Nat_0 Nat_0) Bool)
(declare-fun mult_0 (Nat_0 Nat_0 Nat_0) Bool)
(declare-fun div_0 (Nat_0 Nat_0 Nat_0) Bool)
(declare-fun mod_0 (Nat_0 Nat_0 Nat_0) Bool)
(assert (forall ((y_7 Nat_0))
	(add_0 y_7 Z_4 y_7)))
(assert (forall ((r_0 Nat_0) (x_50 Nat_0) (y_7 Nat_0))
	(=> (add_0 r_0 x_50 y_7)
	    (add_0 (Z_5 r_0) (Z_5 x_50) y_7))))
(assert (forall ((y_7 Nat_0))
	(minus_0 Z_4 Z_4 y_7)))
(assert (forall ((r_0 Nat_0) (x_50 Nat_0) (y_7 Nat_0))
	(=> (minus_0 r_0 x_50 y_7)
	    (minus_0 (Z_5 r_0) (Z_5 x_50) y_7))))
(assert (forall ((y_7 Nat_0))
	(le_0 Z_4 y_7)))
(assert (forall ((x_50 Nat_0) (y_7 Nat_0))
	(=> (le_0 x_50 y_7)
	    (le_0 (Z_5 x_50) (Z_5 y_7)))))
(assert (forall ((y_7 Nat_0))
	(ge_0 y_7 Z_4)))
(assert (forall ((x_50 Nat_0) (y_7 Nat_0))
	(=> (ge_0 x_50 y_7)
	    (ge_0 (Z_5 x_50) (Z_5 y_7)))))
(assert (forall ((y_7 Nat_0))
	(lt_0 Z_4 (Z_5 y_7))))
(assert (forall ((x_50 Nat_0) (y_7 Nat_0))
	(=> (lt_0 x_50 y_7)
	    (lt_0 (Z_5 x_50) (Z_5 y_7)))))
(assert (forall ((y_7 Nat_0))
	(gt_0 (Z_5 y_7) Z_4)))
(assert (forall ((x_50 Nat_0) (y_7 Nat_0))
	(=> (gt_0 x_50 y_7)
	    (gt_0 (Z_5 x_50) (Z_5 y_7)))))
(assert (forall ((y_7 Nat_0))
	(mult_0 Z_4 Z_4 y_7)))
(assert (forall ((r_0 Nat_0) (x_50 Nat_0) (y_7 Nat_0) (z_6 Nat_0))
	(=>	(and (mult_0 r_0 x_50 y_7)
			(add_0 z_6 r_0 y_7))
		(mult_0 z_6 (Z_5 x_50) y_7))))
(assert (forall ((x_50 Nat_0) (y_7 Nat_0))
	(=> (lt_0 x_50 y_7)
	    (div_0 Z_4 x_50 y_7))))
(assert (forall ((r_0 Nat_0) (x_50 Nat_0) (y_7 Nat_0) (z_6 Nat_0))
	(=>	(and (ge_0 x_50 y_7)
			(minus_0 z_6 x_50 y_7)
			(div_0 r_0 z_6 y_7))
		(div_0 (Z_5 r_0) x_50 y_7))))
(assert (forall ((x_50 Nat_0) (y_7 Nat_0))
	(=> (lt_0 x_50 y_7)
	    (mod_0 x_50 x_50 y_7))))
(assert (forall ((r_0 Nat_0) (x_50 Nat_0) (y_7 Nat_0) (z_6 Nat_0))
	(=>	(and (ge_0 x_50 y_7)
			(minus_0 z_6 x_50 y_7)
			(mod_0 r_0 z_6 y_7))
		(mod_0 r_0 x_50 y_7))))
(declare-datatypes ((list_0 0)) (((nil_0 ) (cons_0 (head_0 Nat_0) (tail_0 list_0)))))
(declare-fun diseqlist_0 (list_0 list_0) Bool)
(declare-fun head_2 (Nat_0 list_0) Bool)
(declare-fun tail_2 (list_0 list_0) Bool)
(declare-fun isnil_0 (list_0) Bool)
(declare-fun iscons_0 (list_0) Bool)
(assert (forall ((x_60 Nat_0) (x_61 list_0))
	(head_2 x_60 (cons_0 x_60 x_61))))
(assert (forall ((x_60 Nat_0) (x_61 list_0))
	(tail_2 x_61 (cons_0 x_60 x_61))))
(assert (isnil_0 nil_0))
(assert (forall ((x_63 Nat_0) (x_64 list_0))
	(iscons_0 (cons_0 x_63 x_64))))
(assert (forall ((x_65 Nat_0) (x_66 list_0))
	(diseqlist_0 nil_0 (cons_0 x_65 x_66))))
(assert (forall ((x_67 Nat_0) (x_68 list_0))
	(diseqlist_0 (cons_0 x_67 x_68) nil_0)))
(assert (forall ((x_69 Nat_0) (x_70 list_0) (x_71 Nat_0) (x_72 list_0))
	(=> (diseqNat_0 x_69 x_71)
	    (diseqlist_0 (cons_0 x_69 x_70) (cons_0 x_71 x_72)))))
(assert (forall ((x_69 Nat_0) (x_70 list_0) (x_71 Nat_0) (x_72 list_0))
	(=> (diseqlist_0 x_70 x_72)
	    (diseqlist_0 (cons_0 x_69 x_70) (cons_0 x_71 x_72)))))
(declare-datatypes ((list_1 0)) (((nil_1 ) (cons_1 (head_1 list_0) (tail_1 list_1)))))
(declare-fun diseqlist_1 (list_1 list_1) Bool)
(declare-fun head_3 (list_0 list_1) Bool)
(declare-fun tail_3 (list_1 list_1) Bool)
(declare-fun isnil_1 (list_1) Bool)
(declare-fun iscons_1 (list_1) Bool)
(assert (forall ((x_74 list_0) (x_75 list_1))
	(head_3 x_74 (cons_1 x_74 x_75))))
(assert (forall ((x_74 list_0) (x_75 list_1))
	(tail_3 x_75 (cons_1 x_74 x_75))))
(assert (isnil_1 nil_1))
(assert (forall ((x_77 list_0) (x_78 list_1))
	(iscons_1 (cons_1 x_77 x_78))))
(assert (forall ((x_79 list_0) (x_80 list_1))
	(diseqlist_1 nil_1 (cons_1 x_79 x_80))))
(assert (forall ((x_81 list_0) (x_82 list_1))
	(diseqlist_1 (cons_1 x_81 x_82) nil_1)))
(assert (forall ((x_83 list_0) (x_84 list_1) (x_85 list_0) (x_86 list_1))
	(=> (diseqlist_0 x_83 x_85)
	    (diseqlist_1 (cons_1 x_83 x_84) (cons_1 x_85 x_86)))))
(assert (forall ((x_83 list_0) (x_84 list_1) (x_85 list_0) (x_86 list_1))
	(=> (diseqlist_1 x_84 x_86)
	    (diseqlist_1 (cons_1 x_83 x_84) (cons_1 x_85 x_86)))))
(declare-fun risers_0 (list_1 list_0) Bool)
(assert (forall ((ys_0 list_0) (yss_0 list_1) (y_1 Nat_0) (xs_0 list_0) (y_0 Nat_0))
	(=>	(and (le_0 y_0 y_1)
			(risers_0 (cons_1 ys_0 yss_0) (cons_0 y_1 xs_0)))
		(risers_0 (cons_1 (cons_0 y_0 ys_0) yss_0) (cons_0 y_0 (cons_0 y_1 xs_0))))))
(assert (forall ((x_14 list_1) (y_1 Nat_0) (xs_0 list_0) (y_0 Nat_0))
	(=>	(and (gt_0 y_0 y_1)
			(risers_0 x_14 (cons_0 y_1 xs_0)))
		(risers_0 (cons_1 (cons_0 y_0 nil_0) x_14) (cons_0 y_0 (cons_0 y_1 xs_0))))))
(assert (forall ((y_1 Nat_0) (xs_0 list_0) (y_0 Nat_0))
	(=>	(and (le_0 y_0 y_1)
			(risers_0 nil_1 (cons_0 y_1 xs_0)))
		(risers_0 nil_1 (cons_0 y_0 (cons_0 y_1 xs_0))))))
(assert (forall ((x_18 list_1) (y_1 Nat_0) (xs_0 list_0) (y_0 Nat_0))
	(=>	(and (gt_0 y_0 y_1)
			(risers_0 x_18 (cons_0 y_1 xs_0)))
		(risers_0 (cons_1 (cons_0 y_0 nil_0) x_18) (cons_0 y_0 (cons_0 y_1 xs_0))))))
(assert (forall ((y_0 Nat_0))
	(risers_0 (cons_1 (cons_0 y_0 nil_0) nil_1) (cons_0 y_0 nil_0))))
(assert (risers_0 nil_1 nil_0))
(declare-fun lmerge_0 (list_0 list_0 list_0) Bool)
(assert (forall ((x_22 list_0) (x_3 Nat_0) (x_4 list_0) (z_1 Nat_0) (x_2 list_0))
	(=>	(and (le_0 z_1 x_3)
			(lmerge_0 x_22 x_2 (cons_0 x_3 x_4)))
		(lmerge_0 (cons_0 z_1 x_22) (cons_0 z_1 x_2) (cons_0 x_3 x_4)))))
(assert (forall ((x_24 list_0) (x_3 Nat_0) (x_4 list_0) (z_1 Nat_0) (x_2 list_0))
	(=>	(and (gt_0 z_1 x_3)
			(lmerge_0 x_24 (cons_0 z_1 x_2) x_4))
		(lmerge_0 (cons_0 x_3 x_24) (cons_0 z_1 x_2) (cons_0 x_3 x_4)))))
(assert (forall ((z_1 Nat_0) (x_2 list_0))
	(lmerge_0 (cons_0 z_1 x_2) (cons_0 z_1 x_2) nil_0)))
(assert (forall ((x_26 list_0))
	(lmerge_0 x_26 nil_0 x_26)))
(declare-fun pairwise_0 (list_1 list_1) Bool)
(assert (forall ((x_28 list_0) (x_29 list_1) (ys_1 list_0) (xss_0 list_1) (xs_1 list_0))
	(=>	(and (lmerge_0 x_28 xs_1 ys_1)
			(pairwise_0 x_29 xss_0))
		(pairwise_0 (cons_1 x_28 x_29) (cons_1 xs_1 (cons_1 ys_1 xss_0))))))
(assert (forall ((xs_1 list_0))
	(pairwise_0 (cons_1 xs_1 nil_1) (cons_1 xs_1 nil_1))))
(assert (pairwise_0 nil_1 nil_1))
(declare-fun mergingbu_0 (list_0 list_1) Bool)
(assert (forall ((x_32 list_0) (x_33 list_1) (z_2 list_0) (x_7 list_1) (xs_2 list_0))
	(=>	(and (pairwise_0 x_33 (cons_1 xs_2 (cons_1 z_2 x_7)))
			(mergingbu_0 x_32 x_33))
		(mergingbu_0 x_32 (cons_1 xs_2 (cons_1 z_2 x_7))))))
(assert (forall ((x_35 list_0))
	(mergingbu_0 x_35 (cons_1 x_35 nil_1))))
(assert (mergingbu_0 nil_0 nil_1))
(declare-fun msortbu_0 (list_0 list_0) Bool)
(assert (forall ((x_37 list_0) (x_38 list_1) (x_8 list_0))
	(=>	(and (risers_0 x_38 x_8)
			(mergingbu_0 x_37 x_38))
		(msortbu_0 x_37 x_8))))
(declare-fun insert_0 (list_0 Nat_0 list_0) Bool)
(assert (forall ((z_3 Nat_0) (xs_3 list_0) (x_9 Nat_0))
	(=> (le_0 x_9 z_3)
	    (insert_0 (cons_0 x_9 (cons_0 z_3 xs_3)) x_9 (cons_0 z_3 xs_3)))))
(assert (forall ((x_42 list_0) (z_3 Nat_0) (xs_3 list_0) (x_9 Nat_0))
	(=>	(and (gt_0 x_9 z_3)
			(insert_0 x_42 x_9 xs_3))
		(insert_0 (cons_0 z_3 x_42) x_9 (cons_0 z_3 xs_3)))))
(assert (forall ((x_9 Nat_0))
	(insert_0 (cons_0 x_9 nil_0) x_9 nil_0)))
(declare-fun isort_0 (list_0 list_0) Bool)
(assert (forall ((x_44 list_0) (x_45 list_0) (y_6 Nat_0) (xs_4 list_0))
	(=>	(and (isort_0 x_45 xs_4)
			(insert_0 x_44 y_6 x_45))
		(isort_0 x_44 (cons_0 y_6 xs_4)))))
(assert (isort_0 nil_0 nil_0))
(assert (forall ((x_48 list_0) (x_49 list_0) (xs_5 list_0))
	(=>	(and (diseqlist_0 x_48 x_49)
			(msortbu_0 x_48 xs_5)
			(isort_0 x_49 xs_5))
		false)))
(check-sat)
