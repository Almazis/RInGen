(set-logic HORN)
(declare-datatypes ((Nat_0 0)) (((Z_2 ) (Z_3 (unS_0 Nat_0)))))
(declare-fun diseqNat_0 (Nat_0 Nat_0) Bool)
(declare-fun unS_1 (Nat_0 Nat_0) Bool)
(declare-fun isZ_2 (Nat_0) Bool)
(declare-fun isZ_3 (Nat_0) Bool)
(assert (forall ((x_76 Nat_0))
	(unS_1 x_76 (Z_3 x_76))))
(assert (isZ_2 Z_2))
(assert (forall ((x_78 Nat_0))
	(isZ_3 (Z_3 x_78))))
(assert (forall ((x_79 Nat_0))
	(diseqNat_0 Z_2 (Z_3 x_79))))
(assert (forall ((x_80 Nat_0))
	(diseqNat_0 (Z_3 x_80) Z_2)))
(assert (forall ((x_81 Nat_0) (x_82 Nat_0))
	(=> (diseqNat_0 x_81 x_82)
	    (diseqNat_0 (Z_3 x_81) (Z_3 x_82)))))
(declare-fun add_0 (Nat_0 Nat_0 Nat_0) Bool)
(declare-fun minus_0 (Nat_0 Nat_0 Nat_0) Bool)
(declare-fun le_0 (Nat_0 Nat_0) Bool)
(declare-fun ge_0 (Nat_0 Nat_0) Bool)
(declare-fun lt_0 (Nat_0 Nat_0) Bool)
(declare-fun gt_0 (Nat_0 Nat_0) Bool)
(declare-fun mult_0 (Nat_0 Nat_0 Nat_0) Bool)
(declare-fun div_0 (Nat_0 Nat_0 Nat_0) Bool)
(declare-fun mod_0 (Nat_0 Nat_0 Nat_0) Bool)
(assert (forall ((y_3 Nat_0))
	(add_0 y_3 Z_2 y_3)))
(assert (forall ((r_0 Nat_0) (x_26 Nat_0) (y_3 Nat_0))
	(=> (add_0 r_0 x_26 y_3)
	    (add_0 (Z_3 r_0) (Z_3 x_26) y_3))))
(assert (forall ((y_3 Nat_0))
	(minus_0 Z_2 Z_2 y_3)))
(assert (forall ((r_0 Nat_0) (x_26 Nat_0) (y_3 Nat_0))
	(=> (minus_0 r_0 x_26 y_3)
	    (minus_0 (Z_3 r_0) (Z_3 x_26) y_3))))
(assert (forall ((y_3 Nat_0))
	(le_0 Z_2 y_3)))
(assert (forall ((x_26 Nat_0) (y_3 Nat_0))
	(=> (le_0 x_26 y_3)
	    (le_0 (Z_3 x_26) (Z_3 y_3)))))
(assert (forall ((y_3 Nat_0))
	(ge_0 y_3 Z_2)))
(assert (forall ((x_26 Nat_0) (y_3 Nat_0))
	(=> (ge_0 x_26 y_3)
	    (ge_0 (Z_3 x_26) (Z_3 y_3)))))
(assert (forall ((y_3 Nat_0))
	(lt_0 Z_2 (Z_3 y_3))))
(assert (forall ((x_26 Nat_0) (y_3 Nat_0))
	(=> (lt_0 x_26 y_3)
	    (lt_0 (Z_3 x_26) (Z_3 y_3)))))
(assert (forall ((y_3 Nat_0))
	(gt_0 (Z_3 y_3) Z_2)))
(assert (forall ((x_26 Nat_0) (y_3 Nat_0))
	(=> (gt_0 x_26 y_3)
	    (gt_0 (Z_3 x_26) (Z_3 y_3)))))
(assert (forall ((y_3 Nat_0))
	(mult_0 Z_2 Z_2 y_3)))
(assert (forall ((r_0 Nat_0) (x_26 Nat_0) (y_3 Nat_0) (z_4 Nat_0))
	(=>	(and (mult_0 r_0 x_26 y_3)
			(add_0 z_4 r_0 y_3))
		(mult_0 z_4 (Z_3 x_26) y_3))))
(assert (forall ((x_26 Nat_0) (y_3 Nat_0))
	(=> (lt_0 x_26 y_3)
	    (div_0 Z_2 x_26 y_3))))
(assert (forall ((r_0 Nat_0) (x_26 Nat_0) (y_3 Nat_0) (z_4 Nat_0))
	(=>	(and (ge_0 x_26 y_3)
			(minus_0 z_4 x_26 y_3)
			(div_0 r_0 z_4 y_3))
		(div_0 (Z_3 r_0) x_26 y_3))))
(assert (forall ((x_26 Nat_0) (y_3 Nat_0))
	(=> (lt_0 x_26 y_3)
	    (mod_0 x_26 x_26 y_3))))
(assert (forall ((r_0 Nat_0) (x_26 Nat_0) (y_3 Nat_0) (z_4 Nat_0))
	(=>	(and (ge_0 x_26 y_3)
			(minus_0 z_4 x_26 y_3)
			(mod_0 r_0 z_4 y_3))
		(mod_0 r_0 x_26 y_3))))
(declare-datatypes ((list_0 0)) (((nil_0 ) (cons_0 (head_0 Nat_0) (tail_0 list_0)))))
(declare-fun diseqlist_0 (list_0 list_0) Bool)
(declare-fun head_2 (Nat_0 list_0) Bool)
(declare-fun tail_2 (list_0 list_0) Bool)
(declare-fun isnil_0 (list_0) Bool)
(declare-fun iscons_0 (list_0) Bool)
(assert (forall ((x_28 Nat_0) (x_29 list_0))
	(head_2 x_28 (cons_0 x_28 x_29))))
(assert (forall ((x_28 Nat_0) (x_29 list_0))
	(tail_2 x_29 (cons_0 x_28 x_29))))
(assert (isnil_0 nil_0))
(assert (forall ((x_31 Nat_0) (x_32 list_0))
	(iscons_0 (cons_0 x_31 x_32))))
(assert (forall ((x_33 Nat_0) (x_34 list_0))
	(diseqlist_0 nil_0 (cons_0 x_33 x_34))))
(assert (forall ((x_35 Nat_0) (x_36 list_0))
	(diseqlist_0 (cons_0 x_35 x_36) nil_0)))
(assert (forall ((x_37 Nat_0) (x_38 list_0) (x_39 Nat_0) (x_40 list_0))
	(=> (diseqNat_0 x_37 x_39)
	    (diseqlist_0 (cons_0 x_37 x_38) (cons_0 x_39 x_40)))))
(assert (forall ((x_37 Nat_0) (x_38 list_0) (x_39 Nat_0) (x_40 list_0))
	(=> (diseqlist_0 x_38 x_40)
	    (diseqlist_0 (cons_0 x_37 x_38) (cons_0 x_39 x_40)))))
(declare-datatypes ((Tree_0 0)) (((Node_0 (projNode_0 Tree_0) (projNode_1 Nat_0) (projNode_2 Tree_0)) (Nil_1 ))))
(declare-fun diseqTree_0 (Tree_0 Tree_0) Bool)
(declare-fun projNode_3 (Tree_0 Tree_0) Bool)
(declare-fun projNode_4 (Nat_0 Tree_0) Bool)
(declare-fun projNode_5 (Tree_0 Tree_0) Bool)
(declare-fun isNode_0 (Tree_0) Bool)
(declare-fun isNil_1 (Tree_0) Bool)
(assert (forall ((x_41 Tree_0) (x_42 Nat_0) (x_43 Tree_0))
	(projNode_3 x_41 (Node_0 x_41 x_42 x_43))))
(assert (forall ((x_41 Tree_0) (x_42 Nat_0) (x_43 Tree_0))
	(projNode_4 x_42 (Node_0 x_41 x_42 x_43))))
(assert (forall ((x_41 Tree_0) (x_42 Nat_0) (x_43 Tree_0))
	(projNode_5 x_43 (Node_0 x_41 x_42 x_43))))
(assert (forall ((x_46 Tree_0) (x_47 Nat_0) (x_48 Tree_0))
	(isNode_0 (Node_0 x_46 x_47 x_48))))
(assert (isNil_1 Nil_1))
(assert (forall ((x_49 Tree_0) (x_50 Nat_0) (x_51 Tree_0))
	(diseqTree_0 (Node_0 x_49 x_50 x_51) Nil_1)))
(assert (forall ((x_52 Tree_0) (x_53 Nat_0) (x_54 Tree_0))
	(diseqTree_0 Nil_1 (Node_0 x_52 x_53 x_54))))
(assert (forall ((x_55 Tree_0) (x_56 Nat_0) (x_57 Tree_0) (x_58 Tree_0) (x_59 Nat_0) (x_60 Tree_0))
	(=> (diseqTree_0 x_55 x_58)
	    (diseqTree_0 (Node_0 x_55 x_56 x_57) (Node_0 x_58 x_59 x_60)))))
(assert (forall ((x_55 Tree_0) (x_56 Nat_0) (x_57 Tree_0) (x_58 Tree_0) (x_59 Nat_0) (x_60 Tree_0))
	(=> (diseqNat_0 x_56 x_59)
	    (diseqTree_0 (Node_0 x_55 x_56 x_57) (Node_0 x_58 x_59 x_60)))))
(assert (forall ((x_55 Tree_0) (x_56 Nat_0) (x_57 Tree_0) (x_58 Tree_0) (x_59 Nat_0) (x_60 Tree_0))
	(=> (diseqTree_0 x_57 x_60)
	    (diseqTree_0 (Node_0 x_55 x_56 x_57) (Node_0 x_58 x_59 x_60)))))
(declare-datatypes ((list_1 0)) (((nil_2 ) (cons_1 (head_1 Tree_0) (tail_1 list_1)))))
(declare-fun diseqlist_1 (list_1 list_1) Bool)
(declare-fun head_3 (Tree_0 list_1) Bool)
(declare-fun tail_3 (list_1 list_1) Bool)
(declare-fun isnil_2 (list_1) Bool)
(declare-fun iscons_1 (list_1) Bool)
(assert (forall ((x_62 Tree_0) (x_63 list_1))
	(head_3 x_62 (cons_1 x_62 x_63))))
(assert (forall ((x_62 Tree_0) (x_63 list_1))
	(tail_3 x_63 (cons_1 x_62 x_63))))
(assert (isnil_2 nil_2))
(assert (forall ((x_65 Tree_0) (x_66 list_1))
	(iscons_1 (cons_1 x_65 x_66))))
(assert (forall ((x_67 Tree_0) (x_68 list_1))
	(diseqlist_1 nil_2 (cons_1 x_67 x_68))))
(assert (forall ((x_69 Tree_0) (x_70 list_1))
	(diseqlist_1 (cons_1 x_69 x_70) nil_2)))
(assert (forall ((x_71 Tree_0) (x_72 list_1) (x_73 Tree_0) (x_74 list_1))
	(=> (diseqTree_0 x_71 x_73)
	    (diseqlist_1 (cons_1 x_71 x_72) (cons_1 x_73 x_74)))))
(assert (forall ((x_71 Tree_0) (x_72 list_1) (x_73 Tree_0) (x_74 list_1))
	(=> (diseqlist_1 x_72 x_74)
	    (diseqlist_1 (cons_1 x_71 x_72) (cons_1 x_73 x_74)))))
(declare-fun flatten_0 (list_0 list_1) Bool)
(assert (forall ((x_8 list_0) (ps_0 list_1))
	(=> (flatten_0 x_8 ps_0)
	    (flatten_0 x_8 (cons_1 Nil_1 ps_0)))))
(assert (forall ((x_11 list_0) (x_1 Nat_0) (q_0 Tree_0) (ps_0 list_1))
	(=> (flatten_0 x_11 (cons_1 q_0 ps_0))
	    (flatten_0 (cons_0 x_1 x_11) (cons_1 (Node_0 Nil_1 x_1 q_0) ps_0)))))
(assert (forall ((x_12 list_0) (x_2 Tree_0) (x_3 Nat_0) (x_4 Tree_0) (x_1 Nat_0) (q_0 Tree_0) (ps_0 list_1))
	(=> (flatten_0 x_12 (cons_1 (Node_0 x_2 x_3 x_4) (cons_1 (Node_0 Nil_1 x_1 q_0) ps_0)))
	    (flatten_0 x_12 (cons_1 (Node_0 (Node_0 x_2 x_3 x_4) x_1 q_0) ps_0)))))
(assert (flatten_0 nil_0 nil_2))
(declare-fun x_5 (list_0 list_0 list_0) Bool)
(assert (forall ((x_16 list_0) (z_1 Nat_0) (xs_0 list_0) (y_1 list_0))
	(=> (x_5 x_16 xs_0 y_1)
	    (x_5 (cons_0 z_1 x_16) (cons_0 z_1 xs_0) y_1))))
(assert (forall ((x_17 list_0))
	(x_5 x_17 nil_0 x_17)))
(declare-fun flatten_1 (list_0 Tree_0) Bool)
(assert (flatten_1 nil_0 Nil_1))
(assert (forall ((x_19 list_0) (x_20 list_0) (x_21 list_0) (x_22 list_0) (p_0 Tree_0) (y_2 Nat_0) (q_1 Tree_0))
	(=>	(and (flatten_1 x_20 p_0)
			(flatten_1 x_21 q_1)
			(x_5 x_22 (cons_0 y_2 nil_0) x_21)
			(x_5 x_19 x_20 x_22))
		(flatten_1 x_19 (Node_0 p_0 y_2 q_1)))))
(assert (forall ((x_24 list_0) (x_25 list_0) (p_1 Tree_0))
	(=>	(and (diseqlist_0 x_24 x_25)
			(flatten_0 x_24 (cons_1 p_1 nil_2))
			(flatten_1 x_25 p_1))
		false)))
(check-sat)
