(set-logic HORN)
(declare-datatypes ((Bool_0 0)) (((false_0 ) (true_0 ))))
(declare-fun diseqBool_0 (Bool_0 Bool_0) Bool)
(declare-fun isfalse_1 (Bool_0) Bool)
(declare-fun istrue_1 (Bool_0) Bool)
(assert (isfalse_1 false_0))
(assert (istrue_1 true_0))
(assert (diseqBool_0 false_0 true_0))
(assert (diseqBool_0 true_0 false_0))
(declare-fun and_0 (Bool_0 Bool_0 Bool_0) Bool)
(declare-fun or_0 (Bool_0 Bool_0 Bool_0) Bool)
(declare-fun hence_0 (Bool_0 Bool_0 Bool_0) Bool)
(declare-fun not_0 (Bool_0 Bool_0) Bool)
(assert (and_0 false_0 false_0 false_0))
(assert (and_0 false_0 true_0 false_0))
(assert (and_0 false_0 false_0 true_0))
(assert (and_0 true_0 true_0 true_0))
(assert (or_0 false_0 false_0 false_0))
(assert (or_0 true_0 true_0 false_0))
(assert (or_0 true_0 false_0 true_0))
(assert (or_0 true_0 true_0 true_0))
(assert (hence_0 true_0 false_0 false_0))
(assert (hence_0 false_0 true_0 false_0))
(assert (hence_0 true_0 false_0 true_0))
(assert (hence_0 true_0 true_0 true_0))
(assert (not_0 true_0 false_0))
(assert (not_0 false_0 true_0))
(declare-datatypes ((Nat_0 0)) (((zero_0 ) (succ_0 (p_0 Nat_0)))))
(declare-fun diseqNat_0 (Nat_0 Nat_0) Bool)
(declare-fun p_1 (Nat_0 Nat_0) Bool)
(declare-fun iszero_0 (Nat_0) Bool)
(declare-fun issucc_0 (Nat_0) Bool)
(assert (forall ((x_119 Nat_0))
	(p_1 x_119 (succ_0 x_119))))
(assert (iszero_0 zero_0))
(assert (forall ((x_121 Nat_0))
	(issucc_0 (succ_0 x_121))))
(assert (forall ((x_122 Nat_0))
	(diseqNat_0 zero_0 (succ_0 x_122))))
(assert (forall ((x_123 Nat_0))
	(diseqNat_0 (succ_0 x_123) zero_0)))
(assert (forall ((x_124 Nat_0) (x_125 Nat_0))
	(=> (diseqNat_0 x_124 x_125)
	    (diseqNat_0 (succ_0 x_124) (succ_0 x_125)))))
(declare-datatypes ((list_0 0)) (((nil_0 ) (cons_0 (head_0 Nat_0) (tail_0 list_0)))))
(declare-fun diseqlist_0 (list_0 list_0) Bool)
(declare-fun head_1 (Nat_0 list_0) Bool)
(declare-fun tail_1 (list_0 list_0) Bool)
(declare-fun isnil_0 (list_0) Bool)
(declare-fun iscons_0 (list_0) Bool)
(assert (forall ((x_127 Nat_0) (x_128 list_0))
	(head_1 x_127 (cons_0 x_127 x_128))))
(assert (forall ((x_127 Nat_0) (x_128 list_0))
	(tail_1 x_128 (cons_0 x_127 x_128))))
(assert (isnil_0 nil_0))
(assert (forall ((x_130 Nat_0) (x_131 list_0))
	(iscons_0 (cons_0 x_130 x_131))))
(assert (forall ((x_132 Nat_0) (x_133 list_0))
	(diseqlist_0 nil_0 (cons_0 x_132 x_133))))
(assert (forall ((x_134 Nat_0) (x_135 list_0))
	(diseqlist_0 (cons_0 x_134 x_135) nil_0)))
(assert (forall ((x_136 Nat_0) (x_137 list_0) (x_138 Nat_0) (x_139 list_0))
	(=> (diseqNat_0 x_136 x_138)
	    (diseqlist_0 (cons_0 x_136 x_137) (cons_0 x_138 x_139)))))
(assert (forall ((x_136 Nat_0) (x_137 list_0) (x_138 Nat_0) (x_139 list_0))
	(=> (diseqlist_0 x_137 x_139)
	    (diseqlist_0 (cons_0 x_136 x_137) (cons_0 x_138 x_139)))))
(declare-datatypes ((pair_0 0)) (((pair_1 (projpair_0 list_0) (projpair_1 list_0)))))
(declare-fun diseqpair_0 (pair_0 pair_0) Bool)
(declare-fun projpair_2 (list_0 pair_0) Bool)
(declare-fun projpair_3 (list_0 pair_0) Bool)
(declare-fun ispair_0 (pair_0) Bool)
(assert (forall ((x_140 list_0) (x_141 list_0))
	(projpair_2 x_140 (pair_1 x_140 x_141))))
(assert (forall ((x_140 list_0) (x_141 list_0))
	(projpair_3 x_141 (pair_1 x_140 x_141))))
(assert (forall ((x_143 list_0) (x_144 list_0))
	(ispair_0 (pair_1 x_143 x_144))))
(assert (forall ((x_145 list_0) (x_146 list_0) (x_147 list_0) (x_148 list_0))
	(=> (diseqlist_0 x_145 x_147)
	    (diseqpair_0 (pair_1 x_145 x_146) (pair_1 x_147 x_148)))))
(assert (forall ((x_145 list_0) (x_146 list_0) (x_147 list_0) (x_148 list_0))
	(=> (diseqlist_0 x_146 x_148)
	    (diseqpair_0 (pair_1 x_145 x_146) (pair_1 x_147 x_148)))))
(declare-fun take_0 (list_0 Nat_0 list_0) Bool)
(assert (forall ((x_30 list_0) (z_1 Nat_0) (xs_0 list_0) (z_0 Nat_0))
	(=> (take_0 x_30 z_0 xs_0)
	    (take_0 (cons_0 z_1 x_30) (succ_0 z_0) (cons_0 z_1 xs_0)))))
(assert (forall ((z_0 Nat_0))
	(take_0 nil_0 (succ_0 z_0) nil_0)))
(assert (forall ((y_0 list_0))
	(take_0 nil_0 zero_0 y_0)))
(declare-fun plus_0 (Nat_0 Nat_0 Nat_0) Bool)
(assert (forall ((x_34 Nat_0) (z_2 Nat_0) (y_1 Nat_0))
	(=> (plus_0 x_34 z_2 y_1)
	    (plus_0 (succ_0 x_34) (succ_0 z_2) y_1))))
(assert (forall ((x_35 Nat_0))
	(plus_0 x_35 zero_0 x_35)))
(declare-fun minus_0 (Nat_0 Nat_0 Nat_0) Bool)
(assert (forall ((x_36 Nat_0) (y_3 Nat_0) (z_3 Nat_0))
	(=> (minus_0 x_36 z_3 y_3)
	    (minus_0 x_36 (succ_0 z_3) (succ_0 y_3)))))
(assert (forall ((z_3 Nat_0))
	(minus_0 zero_0 (succ_0 z_3) zero_0)))
(assert (forall ((y_2 Nat_0))
	(minus_0 zero_0 zero_0 y_2)))
(declare-fun lt_0 (Bool_0 Nat_0 Nat_0) Bool)
(assert (forall ((x_40 Bool_0) (n_0 Nat_0) (z_4 Nat_0))
	(=> (lt_0 x_40 n_0 z_4)
	    (lt_0 x_40 (succ_0 n_0) (succ_0 z_4)))))
(assert (forall ((z_4 Nat_0))
	(lt_0 true_0 zero_0 (succ_0 z_4))))
(assert (forall ((x_3 Nat_0))
	(lt_0 false_0 x_3 zero_0)))
(declare-fun leq_0 (Bool_0 Nat_0 Nat_0) Bool)
(assert (forall ((x_44 Bool_0) (x_5 Nat_0) (z_5 Nat_0))
	(=> (leq_0 x_44 z_5 x_5)
	    (leq_0 x_44 (succ_0 z_5) (succ_0 x_5)))))
(assert (forall ((z_5 Nat_0))
	(leq_0 false_0 (succ_0 z_5) zero_0)))
(assert (forall ((y_5 Nat_0))
	(leq_0 true_0 zero_0 y_5)))
(declare-fun sort_0 (list_0 Nat_0 Nat_0) Bool)
(assert (forall ((x_6 Nat_0) (y_6 Nat_0))
	(=> (leq_0 true_0 x_6 y_6)
	    (sort_0 (cons_0 x_6 (cons_0 y_6 nil_0)) x_6 y_6))))
(assert (forall ((x_50 Bool_0) (x_6 Nat_0) (y_6 Nat_0))
	(=>	(and (diseqBool_0 x_50 true_0)
			(leq_0 x_50 x_6 y_6))
		(sort_0 (cons_0 y_6 (cons_0 x_6 nil_0)) x_6 y_6))))
(declare-fun length_0 (Nat_0 list_0) Bool)
(assert (forall ((x_52 Nat_0) (x_53 Nat_0) (y_7 Nat_0) (l_0 list_0))
	(=>	(and (length_0 x_53 l_0)
			(plus_0 x_52 (succ_0 zero_0) x_53))
		(length_0 x_52 (cons_0 y_7 l_0)))))
(assert (length_0 zero_0 nil_0))
(declare-fun idiv_0 (Nat_0 Nat_0 Nat_0) Bool)
(assert (forall ((x_8 Nat_0) (y_8 Nat_0))
	(=> (lt_0 true_0 x_8 y_8)
	    (idiv_0 zero_0 x_8 y_8))))
(assert (forall ((x_60 Nat_0) (x_61 Nat_0) (x_58 Bool_0) (x_8 Nat_0) (y_8 Nat_0))
	(=>	(and (diseqBool_0 x_58 true_0)
			(minus_0 x_60 x_8 y_8)
			(idiv_0 x_61 x_60 y_8)
			(lt_0 x_58 x_8 y_8))
		(idiv_0 (succ_0 x_61) x_8 y_8))))
(declare-fun drop_0 (list_0 Nat_0 list_0) Bool)
(assert (forall ((x_62 list_0) (z_7 Nat_0) (xs_1 list_0) (z_6 Nat_0))
	(=> (drop_0 x_62 z_6 xs_1)
	    (drop_0 x_62 (succ_0 z_6) (cons_0 z_7 xs_1)))))
(assert (forall ((z_6 Nat_0))
	(drop_0 nil_0 (succ_0 z_6) nil_0)))
(assert (forall ((x_65 list_0))
	(drop_0 x_65 zero_0 x_65)))
(declare-fun splitAt_0 (pair_0 Nat_0 list_0) Bool)
(assert (forall ((x_67 list_0) (x_68 list_0) (x_10 Nat_0) (y_10 list_0))
	(=>	(and (take_0 x_67 x_10 y_10)
			(drop_0 x_68 x_10 y_10))
		(splitAt_0 (pair_1 x_67 x_68) x_10 y_10))))
(declare-fun count_0 (Nat_0 Nat_0 list_0) Bool)
(assert (forall ((x_69 Nat_0) (x_70 Nat_0) (ys_0 list_0) (x_11 Nat_0))
	(=>	(and (count_0 x_70 x_11 ys_0)
			(plus_0 x_69 (succ_0 zero_0) x_70))
		(count_0 x_69 x_11 (cons_0 x_11 ys_0)))))
(assert (forall ((x_72 Nat_0) (z_8 Nat_0) (ys_0 list_0) (x_11 Nat_0))
	(=>	(and (diseqNat_0 x_11 z_8)
			(count_0 x_72 x_11 ys_0))
		(count_0 x_72 x_11 (cons_0 z_8 ys_0)))))
(assert (forall ((x_11 Nat_0))
	(count_0 zero_0 x_11 nil_0)))
(declare-fun x_12 (list_0 list_0 list_0) Bool)
(assert (forall ((x_76 list_0) (z_9 Nat_0) (xs_2 list_0) (y_12 list_0))
	(=> (x_12 x_76 xs_2 y_12)
	    (x_12 (cons_0 z_9 x_76) (cons_0 z_9 xs_2) y_12))))
(assert (forall ((x_77 list_0))
	(x_12 x_77 nil_0 x_77)))
(declare-fun reverse_0 (list_0 list_0) Bool)
(assert (forall ((x_78 list_0) (x_79 list_0) (y_13 Nat_0) (xs_3 list_0))
	(=>	(and (reverse_0 x_79 xs_3)
			(x_12 x_78 x_79 (cons_0 y_13 nil_0)))
		(reverse_0 x_78 (cons_0 y_13 xs_3)))))
(assert (reverse_0 nil_0 nil_0))
(declare-fun stoogesort_0 (list_0 list_0) Bool)
(declare-fun stoogesort_1 (list_0 list_0) Bool)
(declare-fun stoogesort_2 (list_0 list_0) Bool)
(assert (forall ((x_86 list_0) (x_87 list_0) (x_88 list_0) (x_82 Nat_0) (x_83 Nat_0) (x_84 list_0) (ys_1 list_0) (zs_0 list_0) (x_18 list_0))
	(=>	(and (stoogesort_1 x_87 zs_0)
			(reverse_0 x_88 ys_1)
			(x_12 x_86 x_87 x_88)
			(length_0 x_82 x_18)
			(idiv_0 x_83 x_82 (succ_0 (succ_0 (succ_0 zero_0))))
			(reverse_0 x_84 x_18)
			(splitAt_0 (pair_1 ys_1 zs_0) x_83 x_84))
		(stoogesort_0 x_86 x_18))))
(assert (forall ((x_90 list_0) (x_91 list_0) (x_92 list_0) (x_21 Nat_0) (x_22 list_0) (y_15 Nat_0) (y_14 Nat_0))
	(=>	(and (stoogesort_0 x_91 (cons_0 y_14 (cons_0 y_15 (cons_0 x_21 x_22))))
			(stoogesort_2 x_92 x_91)
			(stoogesort_0 x_90 x_92))
		(stoogesort_1 x_90 (cons_0 y_14 (cons_0 y_15 (cons_0 x_21 x_22)))))))
(assert (forall ((x_94 list_0) (y_15 Nat_0) (y_14 Nat_0))
	(=> (sort_0 x_94 y_14 y_15)
	    (stoogesort_1 x_94 (cons_0 y_14 (cons_0 y_15 nil_0))))))
(assert (forall ((y_14 Nat_0))
	(stoogesort_1 (cons_0 y_14 nil_0) (cons_0 y_14 nil_0))))
(assert (stoogesort_1 nil_0 nil_0))
(assert (forall ((x_101 list_0) (x_102 list_0) (x_98 Nat_0) (x_99 Nat_0) (ys_2 list_0) (zs_1 list_0) (x_23 list_0))
	(=>	(and (stoogesort_1 x_102 zs_1)
			(x_12 x_101 ys_2 x_102)
			(length_0 x_98 x_23)
			(idiv_0 x_99 x_98 (succ_0 (succ_0 (succ_0 zero_0))))
			(splitAt_0 (pair_1 ys_2 zs_1) x_99 x_23))
		(stoogesort_2 x_101 x_23))))
(assert (forall ((x_104 Nat_0) (x_105 Nat_0) (x_106 Nat_0) (x_107 Nat_0) (x_24 Nat_0) (y_16 Nat_0) (z_11 Nat_0))
	(=>	(and (diseqNat_0 x_105 x_107)
			(plus_0 x_104 y_16 z_11)
			(plus_0 x_105 x_24 x_104)
			(plus_0 x_106 x_24 y_16)
			(plus_0 x_107 x_106 z_11))
		false)))
(assert (forall ((x_108 Nat_0) (x_109 Nat_0) (x_25 Nat_0) (y_17 Nat_0))
	(=>	(and (diseqNat_0 x_108 x_109)
			(plus_0 x_108 x_25 y_17)
			(plus_0 x_109 y_17 x_25))
		false)))
(assert (forall ((x_110 Nat_0) (x_26 Nat_0))
	(=>	(and (diseqNat_0 x_110 x_26)
			(plus_0 x_110 x_26 zero_0))
		false)))
(assert (forall ((x_111 Nat_0) (x_27 Nat_0))
	(=>	(and (diseqNat_0 x_111 x_27)
			(plus_0 x_111 zero_0 x_27))
		false)))
(assert (forall ((x_112 list_0) (x_113 Nat_0) (x_114 Nat_0) (x_28 Nat_0) (xs_4 list_0))
	(=>	(and (diseqNat_0 x_113 x_114)
			(stoogesort_1 x_112 xs_4)
			(count_0 x_113 x_28 x_112)
			(count_0 x_114 x_28 xs_4))
		false)))
(check-sat)
