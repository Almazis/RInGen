(set-logic HORN)
(declare-datatypes ((Nat_0 0)) (((Z_2 ) (Z_3 (unS_0 Nat_0)))))
(declare-fun diseqNat_0 (Nat_0 Nat_0) Bool)
(declare-fun unS_1 (Nat_0 Nat_0) Bool)
(declare-fun isZ_2 (Nat_0) Bool)
(declare-fun isZ_3 (Nat_0) Bool)
(assert (forall ((x_20 Nat_0))
	(unS_1 x_20 (Z_3 x_20))))
(assert (isZ_2 Z_2))
(assert (forall ((x_22 Nat_0))
	(isZ_3 (Z_3 x_22))))
(assert (forall ((x_23 Nat_0))
	(diseqNat_0 Z_2 (Z_3 x_23))))
(assert (forall ((x_24 Nat_0))
	(diseqNat_0 (Z_3 x_24) Z_2)))
(assert (forall ((x_25 Nat_0) (x_26 Nat_0))
	(=> (diseqNat_0 x_25 x_26)
	    (diseqNat_0 (Z_3 x_25) (Z_3 x_26)))))
(declare-fun add_0 (Nat_0 Nat_0 Nat_0) Bool)
(declare-fun minus_0 (Nat_0 Nat_0 Nat_0) Bool)
(declare-fun le_0 (Nat_0 Nat_0) Bool)
(declare-fun ge_0 (Nat_0 Nat_0) Bool)
(declare-fun lt_0 (Nat_0 Nat_0) Bool)
(declare-fun gt_0 (Nat_0 Nat_0) Bool)
(declare-fun mult_0 (Nat_0 Nat_0 Nat_0) Bool)
(declare-fun div_0 (Nat_0 Nat_0 Nat_0) Bool)
(declare-fun mod_0 (Nat_0 Nat_0 Nat_0) Bool)
(assert (forall ((y_4 Nat_0))
	(add_0 y_4 Z_2 y_4)))
(assert (forall ((r_0 Nat_0) (x_18 Nat_0) (y_4 Nat_0))
	(=> (add_0 r_0 x_18 y_4)
	    (add_0 (Z_3 r_0) (Z_3 x_18) y_4))))
(assert (forall ((y_4 Nat_0))
	(minus_0 Z_2 Z_2 y_4)))
(assert (forall ((r_0 Nat_0) (x_18 Nat_0) (y_4 Nat_0))
	(=> (minus_0 r_0 x_18 y_4)
	    (minus_0 (Z_3 r_0) (Z_3 x_18) y_4))))
(assert (forall ((y_4 Nat_0))
	(le_0 Z_2 y_4)))
(assert (forall ((x_18 Nat_0) (y_4 Nat_0))
	(=> (le_0 x_18 y_4)
	    (le_0 (Z_3 x_18) (Z_3 y_4)))))
(assert (forall ((y_4 Nat_0))
	(ge_0 y_4 Z_2)))
(assert (forall ((x_18 Nat_0) (y_4 Nat_0))
	(=> (ge_0 x_18 y_4)
	    (ge_0 (Z_3 x_18) (Z_3 y_4)))))
(assert (forall ((y_4 Nat_0))
	(lt_0 Z_2 (Z_3 y_4))))
(assert (forall ((x_18 Nat_0) (y_4 Nat_0))
	(=> (lt_0 x_18 y_4)
	    (lt_0 (Z_3 x_18) (Z_3 y_4)))))
(assert (forall ((y_4 Nat_0))
	(gt_0 (Z_3 y_4) Z_2)))
(assert (forall ((x_18 Nat_0) (y_4 Nat_0))
	(=> (gt_0 x_18 y_4)
	    (gt_0 (Z_3 x_18) (Z_3 y_4)))))
(assert (forall ((y_4 Nat_0))
	(mult_0 Z_2 Z_2 y_4)))
(assert (forall ((r_0 Nat_0) (x_18 Nat_0) (y_4 Nat_0) (z_4 Nat_0))
	(=>	(and (mult_0 r_0 x_18 y_4)
			(add_0 z_4 r_0 y_4))
		(mult_0 z_4 (Z_3 x_18) y_4))))
(assert (forall ((x_18 Nat_0) (y_4 Nat_0))
	(=> (lt_0 x_18 y_4)
	    (div_0 Z_2 x_18 y_4))))
(assert (forall ((r_0 Nat_0) (x_18 Nat_0) (y_4 Nat_0) (z_4 Nat_0))
	(=>	(and (ge_0 x_18 y_4)
			(minus_0 z_4 x_18 y_4)
			(div_0 r_0 z_4 y_4))
		(div_0 (Z_3 r_0) x_18 y_4))))
(assert (forall ((x_18 Nat_0) (y_4 Nat_0))
	(=> (lt_0 x_18 y_4)
	    (mod_0 x_18 x_18 y_4))))
(assert (forall ((r_0 Nat_0) (x_18 Nat_0) (y_4 Nat_0) (z_4 Nat_0))
	(=>	(and (ge_0 x_18 y_4)
			(minus_0 z_4 x_18 y_4)
			(mod_0 r_0 z_4 y_4))
		(mod_0 r_0 x_18 y_4))))
(declare-datatypes ((Bool_0 0)) (((false_0 ) (true_0 ))))
(declare-fun diseqBool_0 (Bool_0 Bool_0) Bool)
(declare-fun isfalse_1 (Bool_0) Bool)
(declare-fun istrue_1 (Bool_0) Bool)
(assert (isfalse_1 false_0))
(assert (istrue_1 true_0))
(assert (diseqBool_0 false_0 true_0))
(assert (diseqBool_0 true_0 false_0))
(declare-fun and_0 (Bool_0 Bool_0 Bool_0) Bool)
(declare-fun or_0 (Bool_0 Bool_0 Bool_0) Bool)
(declare-fun hence_0 (Bool_0 Bool_0 Bool_0) Bool)
(declare-fun not_0 (Bool_0 Bool_0) Bool)
(assert (and_0 false_0 false_0 false_0))
(assert (and_0 false_0 true_0 false_0))
(assert (and_0 false_0 false_0 true_0))
(assert (and_0 true_0 true_0 true_0))
(assert (or_0 false_0 false_0 false_0))
(assert (or_0 true_0 true_0 false_0))
(assert (or_0 true_0 false_0 true_0))
(assert (or_0 true_0 true_0 true_0))
(assert (hence_0 true_0 false_0 false_0))
(assert (hence_0 false_0 true_0 false_0))
(assert (hence_0 true_0 false_0 true_0))
(assert (hence_0 true_0 true_0 true_0))
(assert (not_0 true_0 false_0))
(assert (not_0 false_0 true_0))
(declare-datatypes ((list_0 0)) (((nil_0 ) (cons_0 (head_0 Nat_0) (tail_0 list_0)))))
(declare-fun diseqlist_0 (list_0 list_0) Bool)
(declare-fun head_1 (Nat_0 list_0) Bool)
(declare-fun tail_1 (list_0 list_0) Bool)
(declare-fun isnil_0 (list_0) Bool)
(declare-fun iscons_0 (list_0) Bool)
(assert (forall ((x_30 Nat_0) (x_31 list_0))
	(head_1 x_30 (cons_0 x_30 x_31))))
(assert (forall ((x_30 Nat_0) (x_31 list_0))
	(tail_1 x_31 (cons_0 x_30 x_31))))
(assert (isnil_0 nil_0))
(assert (forall ((x_33 Nat_0) (x_34 list_0))
	(iscons_0 (cons_0 x_33 x_34))))
(assert (forall ((x_35 Nat_0) (x_36 list_0))
	(diseqlist_0 nil_0 (cons_0 x_35 x_36))))
(assert (forall ((x_37 Nat_0) (x_38 list_0))
	(diseqlist_0 (cons_0 x_37 x_38) nil_0)))
(assert (forall ((x_39 Nat_0) (x_40 list_0) (x_41 Nat_0) (x_42 list_0))
	(=> (diseqNat_0 x_39 x_41)
	    (diseqlist_0 (cons_0 x_39 x_40) (cons_0 x_41 x_42)))))
(assert (forall ((x_39 Nat_0) (x_40 list_0) (x_41 Nat_0) (x_42 list_0))
	(=> (diseqlist_0 x_40 x_42)
	    (diseqlist_0 (cons_0 x_39 x_40) (cons_0 x_41 x_42)))))
(declare-fun ordered_0 (Bool_0 list_0) Bool)
(assert (forall ((x_3 Bool_0) (y_1 Nat_0) (xs_0 list_0) (y_0 Nat_0))
	(=>	(and (le_0 y_0 y_1)
			(ordered_0 x_3 (cons_0 y_1 xs_0)))
		(ordered_0 x_3 (cons_0 y_0 (cons_0 y_1 xs_0))))))
(assert (forall ((y_1 Nat_0) (xs_0 list_0) (y_0 Nat_0))
	(=> (gt_0 y_0 y_1)
	    (ordered_0 false_0 (cons_0 y_0 (cons_0 y_1 xs_0))))))
(assert (forall ((y_0 Nat_0))
	(ordered_0 true_0 (cons_0 y_0 nil_0))))
(assert (ordered_0 true_0 nil_0))
(declare-fun insert_0 (list_0 Nat_0 list_0) Bool)
(assert (forall ((z_1 Nat_0) (xs_1 list_0) (x_1 Nat_0))
	(=> (le_0 x_1 z_1)
	    (insert_0 (cons_0 x_1 (cons_0 z_1 xs_1)) x_1 (cons_0 z_1 xs_1)))))
(assert (forall ((x_10 list_0) (z_1 Nat_0) (xs_1 list_0) (x_1 Nat_0))
	(=>	(and (gt_0 x_1 z_1)
			(insert_0 x_10 x_1 xs_1))
		(insert_0 (cons_0 z_1 x_10) x_1 (cons_0 z_1 xs_1)))))
(assert (forall ((x_1 Nat_0))
	(insert_0 (cons_0 x_1 nil_0) x_1 nil_0)))
(declare-fun isort_0 (list_0 list_0) Bool)
(assert (forall ((x_12 list_0) (x_13 list_0) (y_3 Nat_0) (xs_2 list_0))
	(=>	(and (isort_0 x_13 xs_2)
			(insert_0 x_12 y_3 x_13))
		(isort_0 x_12 (cons_0 y_3 xs_2)))))
(assert (isort_0 nil_0 nil_0))
(assert (forall ((x_16 list_0) (x_17 Bool_0) (xs_3 list_0))
	(=>	(and (diseqBool_0 x_17 true_0)
			(isort_0 x_16 xs_3)
			(ordered_0 x_17 x_16))
		false)))
(check-sat)
