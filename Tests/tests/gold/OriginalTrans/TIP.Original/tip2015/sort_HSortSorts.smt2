(set-logic HORN)
(declare-datatypes ((Nat_0 0)) (((Z_4 ) (Z_5 (unS_0 Nat_0)))))
(declare-fun diseqNat_0 (Nat_0 Nat_0) Bool)
(declare-fun unS_1 (Nat_0 Nat_0) Bool)
(declare-fun isZ_2 (Nat_0) Bool)
(declare-fun isZ_3 (Nat_0) Bool)
(assert (forall ((x_52 Nat_0))
	(unS_1 x_52 (Z_5 x_52))))
(assert (isZ_2 Z_4))
(assert (forall ((x_54 Nat_0))
	(isZ_3 (Z_5 x_54))))
(assert (forall ((x_55 Nat_0))
	(diseqNat_0 Z_4 (Z_5 x_55))))
(assert (forall ((x_56 Nat_0))
	(diseqNat_0 (Z_5 x_56) Z_4)))
(assert (forall ((x_57 Nat_0) (x_58 Nat_0))
	(=> (diseqNat_0 x_57 x_58)
	    (diseqNat_0 (Z_5 x_57) (Z_5 x_58)))))
(declare-fun add_0 (Nat_0 Nat_0 Nat_0) Bool)
(declare-fun minus_0 (Nat_0 Nat_0 Nat_0) Bool)
(declare-fun le_0 (Nat_0 Nat_0) Bool)
(declare-fun ge_0 (Nat_0 Nat_0) Bool)
(declare-fun lt_0 (Nat_0 Nat_0) Bool)
(declare-fun gt_0 (Nat_0 Nat_0) Bool)
(declare-fun mult_0 (Nat_0 Nat_0 Nat_0) Bool)
(declare-fun div_0 (Nat_0 Nat_0 Nat_0) Bool)
(declare-fun mod_0 (Nat_0 Nat_0 Nat_0) Bool)
(assert (forall ((y_7 Nat_0))
	(add_0 y_7 Z_4 y_7)))
(assert (forall ((r_0 Nat_0) (x_50 Nat_0) (y_7 Nat_0))
	(=> (add_0 r_0 x_50 y_7)
	    (add_0 (Z_5 r_0) (Z_5 x_50) y_7))))
(assert (forall ((y_7 Nat_0))
	(minus_0 Z_4 Z_4 y_7)))
(assert (forall ((r_0 Nat_0) (x_50 Nat_0) (y_7 Nat_0))
	(=> (minus_0 r_0 x_50 y_7)
	    (minus_0 (Z_5 r_0) (Z_5 x_50) y_7))))
(assert (forall ((y_7 Nat_0))
	(le_0 Z_4 y_7)))
(assert (forall ((x_50 Nat_0) (y_7 Nat_0))
	(=> (le_0 x_50 y_7)
	    (le_0 (Z_5 x_50) (Z_5 y_7)))))
(assert (forall ((y_7 Nat_0))
	(ge_0 y_7 Z_4)))
(assert (forall ((x_50 Nat_0) (y_7 Nat_0))
	(=> (ge_0 x_50 y_7)
	    (ge_0 (Z_5 x_50) (Z_5 y_7)))))
(assert (forall ((y_7 Nat_0))
	(lt_0 Z_4 (Z_5 y_7))))
(assert (forall ((x_50 Nat_0) (y_7 Nat_0))
	(=> (lt_0 x_50 y_7)
	    (lt_0 (Z_5 x_50) (Z_5 y_7)))))
(assert (forall ((y_7 Nat_0))
	(gt_0 (Z_5 y_7) Z_4)))
(assert (forall ((x_50 Nat_0) (y_7 Nat_0))
	(=> (gt_0 x_50 y_7)
	    (gt_0 (Z_5 x_50) (Z_5 y_7)))))
(assert (forall ((y_7 Nat_0))
	(mult_0 Z_4 Z_4 y_7)))
(assert (forall ((r_0 Nat_0) (x_50 Nat_0) (y_7 Nat_0) (z_6 Nat_0))
	(=>	(and (mult_0 r_0 x_50 y_7)
			(add_0 z_6 r_0 y_7))
		(mult_0 z_6 (Z_5 x_50) y_7))))
(assert (forall ((x_50 Nat_0) (y_7 Nat_0))
	(=> (lt_0 x_50 y_7)
	    (div_0 Z_4 x_50 y_7))))
(assert (forall ((r_0 Nat_0) (x_50 Nat_0) (y_7 Nat_0) (z_6 Nat_0))
	(=>	(and (ge_0 x_50 y_7)
			(minus_0 z_6 x_50 y_7)
			(div_0 r_0 z_6 y_7))
		(div_0 (Z_5 r_0) x_50 y_7))))
(assert (forall ((x_50 Nat_0) (y_7 Nat_0))
	(=> (lt_0 x_50 y_7)
	    (mod_0 x_50 x_50 y_7))))
(assert (forall ((r_0 Nat_0) (x_50 Nat_0) (y_7 Nat_0) (z_6 Nat_0))
	(=>	(and (ge_0 x_50 y_7)
			(minus_0 z_6 x_50 y_7)
			(mod_0 r_0 z_6 y_7))
		(mod_0 r_0 x_50 y_7))))
(declare-datatypes ((Bool_0 0)) (((false_0 ) (true_0 ))))
(declare-fun diseqBool_0 (Bool_0 Bool_0) Bool)
(declare-fun isfalse_1 (Bool_0) Bool)
(declare-fun istrue_1 (Bool_0) Bool)
(assert (isfalse_1 false_0))
(assert (istrue_1 true_0))
(assert (diseqBool_0 false_0 true_0))
(assert (diseqBool_0 true_0 false_0))
(declare-fun and_0 (Bool_0 Bool_0 Bool_0) Bool)
(declare-fun or_0 (Bool_0 Bool_0 Bool_0) Bool)
(declare-fun hence_0 (Bool_0 Bool_0 Bool_0) Bool)
(declare-fun not_0 (Bool_0 Bool_0) Bool)
(assert (and_0 false_0 false_0 false_0))
(assert (and_0 false_0 true_0 false_0))
(assert (and_0 false_0 false_0 true_0))
(assert (and_0 true_0 true_0 true_0))
(assert (or_0 false_0 false_0 false_0))
(assert (or_0 true_0 true_0 false_0))
(assert (or_0 true_0 false_0 true_0))
(assert (or_0 true_0 true_0 true_0))
(assert (hence_0 true_0 false_0 false_0))
(assert (hence_0 false_0 true_0 false_0))
(assert (hence_0 true_0 false_0 true_0))
(assert (hence_0 true_0 true_0 true_0))
(assert (not_0 true_0 false_0))
(assert (not_0 false_0 true_0))
(declare-datatypes ((list_0 0)) (((nil_0 ) (cons_0 (head_0 Nat_0) (tail_0 list_0)))))
(declare-fun diseqlist_0 (list_0 list_0) Bool)
(declare-fun head_2 (Nat_0 list_0) Bool)
(declare-fun tail_2 (list_0 list_0) Bool)
(declare-fun isnil_0 (list_0) Bool)
(declare-fun iscons_0 (list_0) Bool)
(assert (forall ((x_62 Nat_0) (x_63 list_0))
	(head_2 x_62 (cons_0 x_62 x_63))))
(assert (forall ((x_62 Nat_0) (x_63 list_0))
	(tail_2 x_63 (cons_0 x_62 x_63))))
(assert (isnil_0 nil_0))
(assert (forall ((x_65 Nat_0) (x_66 list_0))
	(iscons_0 (cons_0 x_65 x_66))))
(assert (forall ((x_67 Nat_0) (x_68 list_0))
	(diseqlist_0 nil_0 (cons_0 x_67 x_68))))
(assert (forall ((x_69 Nat_0) (x_70 list_0))
	(diseqlist_0 (cons_0 x_69 x_70) nil_0)))
(assert (forall ((x_71 Nat_0) (x_72 list_0) (x_73 Nat_0) (x_74 list_0))
	(=> (diseqNat_0 x_71 x_73)
	    (diseqlist_0 (cons_0 x_71 x_72) (cons_0 x_73 x_74)))))
(assert (forall ((x_71 Nat_0) (x_72 list_0) (x_73 Nat_0) (x_74 list_0))
	(=> (diseqlist_0 x_72 x_74)
	    (diseqlist_0 (cons_0 x_71 x_72) (cons_0 x_73 x_74)))))
(declare-datatypes ((Heap_0 0)) (((Node_0 (projNode_0 Heap_0) (projNode_1 Nat_0) (projNode_2 Heap_0)) (Nil_1 ))))
(declare-fun diseqHeap_0 (Heap_0 Heap_0) Bool)
(declare-fun projNode_3 (Heap_0 Heap_0) Bool)
(declare-fun projNode_4 (Nat_0 Heap_0) Bool)
(declare-fun projNode_5 (Heap_0 Heap_0) Bool)
(declare-fun isNode_0 (Heap_0) Bool)
(declare-fun isNil_1 (Heap_0) Bool)
(assert (forall ((x_75 Heap_0) (x_76 Nat_0) (x_77 Heap_0))
	(projNode_3 x_75 (Node_0 x_75 x_76 x_77))))
(assert (forall ((x_75 Heap_0) (x_76 Nat_0) (x_77 Heap_0))
	(projNode_4 x_76 (Node_0 x_75 x_76 x_77))))
(assert (forall ((x_75 Heap_0) (x_76 Nat_0) (x_77 Heap_0))
	(projNode_5 x_77 (Node_0 x_75 x_76 x_77))))
(assert (forall ((x_80 Heap_0) (x_81 Nat_0) (x_82 Heap_0))
	(isNode_0 (Node_0 x_80 x_81 x_82))))
(assert (isNil_1 Nil_1))
(assert (forall ((x_83 Heap_0) (x_84 Nat_0) (x_85 Heap_0))
	(diseqHeap_0 (Node_0 x_83 x_84 x_85) Nil_1)))
(assert (forall ((x_86 Heap_0) (x_87 Nat_0) (x_88 Heap_0))
	(diseqHeap_0 Nil_1 (Node_0 x_86 x_87 x_88))))
(assert (forall ((x_89 Heap_0) (x_90 Nat_0) (x_91 Heap_0) (x_92 Heap_0) (x_93 Nat_0) (x_94 Heap_0))
	(=> (diseqHeap_0 x_89 x_92)
	    (diseqHeap_0 (Node_0 x_89 x_90 x_91) (Node_0 x_92 x_93 x_94)))))
(assert (forall ((x_89 Heap_0) (x_90 Nat_0) (x_91 Heap_0) (x_92 Heap_0) (x_93 Nat_0) (x_94 Heap_0))
	(=> (diseqNat_0 x_90 x_93)
	    (diseqHeap_0 (Node_0 x_89 x_90 x_91) (Node_0 x_92 x_93 x_94)))))
(assert (forall ((x_89 Heap_0) (x_90 Nat_0) (x_91 Heap_0) (x_92 Heap_0) (x_93 Nat_0) (x_94 Heap_0))
	(=> (diseqHeap_0 x_91 x_94)
	    (diseqHeap_0 (Node_0 x_89 x_90 x_91) (Node_0 x_92 x_93 x_94)))))
(declare-datatypes ((list_1 0)) (((nil_2 ) (cons_1 (head_1 Heap_0) (tail_1 list_1)))))
(declare-fun diseqlist_1 (list_1 list_1) Bool)
(declare-fun head_3 (Heap_0 list_1) Bool)
(declare-fun tail_3 (list_1 list_1) Bool)
(declare-fun isnil_2 (list_1) Bool)
(declare-fun iscons_1 (list_1) Bool)
(assert (forall ((x_96 Heap_0) (x_97 list_1))
	(head_3 x_96 (cons_1 x_96 x_97))))
(assert (forall ((x_96 Heap_0) (x_97 list_1))
	(tail_3 x_97 (cons_1 x_96 x_97))))
(assert (isnil_2 nil_2))
(assert (forall ((x_100 list_1) (x_99 Heap_0))
	(iscons_1 (cons_1 x_99 x_100))))
(assert (forall ((x_101 Heap_0) (x_102 list_1))
	(diseqlist_1 nil_2 (cons_1 x_101 x_102))))
(assert (forall ((x_103 Heap_0) (x_104 list_1))
	(diseqlist_1 (cons_1 x_103 x_104) nil_2)))
(assert (forall ((x_105 Heap_0) (x_106 list_1) (x_107 Heap_0) (x_108 list_1))
	(=> (diseqHeap_0 x_105 x_107)
	    (diseqlist_1 (cons_1 x_105 x_106) (cons_1 x_107 x_108)))))
(assert (forall ((x_105 Heap_0) (x_106 list_1) (x_107 Heap_0) (x_108 list_1))
	(=> (diseqlist_1 x_106 x_108)
	    (diseqlist_1 (cons_1 x_105 x_106) (cons_1 x_107 x_108)))))
(declare-fun toHeap_0 (list_1 list_0) Bool)
(assert (forall ((x_15 list_1) (y_0 Nat_0) (z_0 list_0))
	(=> (toHeap_0 x_15 z_0)
	    (toHeap_0 (cons_1 (Node_0 Nil_1 y_0 Nil_1) x_15) (cons_0 y_0 z_0)))))
(assert (toHeap_0 nil_2 nil_0))
(declare-fun ordered_0 (Bool_0 list_0) Bool)
(assert (forall ((x_17 Bool_0) (y_2 Nat_0) (xs_0 list_0) (y_1 Nat_0))
	(=>	(and (le_0 y_1 y_2)
			(ordered_0 x_17 (cons_0 y_2 xs_0)))
		(ordered_0 x_17 (cons_0 y_1 (cons_0 y_2 xs_0))))))
(assert (forall ((y_2 Nat_0) (xs_0 list_0) (y_1 Nat_0))
	(=> (gt_0 y_1 y_2)
	    (ordered_0 false_0 (cons_0 y_1 (cons_0 y_2 xs_0))))))
(assert (forall ((y_1 Nat_0))
	(ordered_0 true_0 (cons_0 y_1 nil_0))))
(assert (ordered_0 true_0 nil_0))
(declare-fun hmerge_0 (Heap_0 Heap_0 Heap_0) Bool)
(assert (forall ((x_22 Heap_0))
	(hmerge_0 x_22 Nil_1 x_22)))
(assert (forall ((z_2 Heap_0) (x_3 Nat_0) (x_4 Heap_0))
	(hmerge_0 (Node_0 z_2 x_3 x_4) (Node_0 z_2 x_3 x_4) Nil_1)))
(assert (forall ((x_25 Heap_0) (x_5 Heap_0) (x_6 Nat_0) (x_7 Heap_0) (z_2 Heap_0) (x_3 Nat_0) (x_4 Heap_0))
	(=>	(and (le_0 x_3 x_6)
			(hmerge_0 x_25 x_4 (Node_0 x_5 x_6 x_7)))
		(hmerge_0 (Node_0 x_25 x_3 z_2) (Node_0 z_2 x_3 x_4) (Node_0 x_5 x_6 x_7)))))
(assert (forall ((x_27 Heap_0) (x_5 Heap_0) (x_6 Nat_0) (x_7 Heap_0) (z_2 Heap_0) (x_3 Nat_0) (x_4 Heap_0))
	(=>	(and (gt_0 x_3 x_6)
			(hmerge_0 x_27 (Node_0 z_2 x_3 x_4) x_7))
		(hmerge_0 (Node_0 x_27 x_6 x_5) (Node_0 z_2 x_3 x_4) (Node_0 x_5 x_6 x_7)))))
(declare-fun hpairwise_0 (list_1 list_1) Bool)
(assert (forall ((x_29 Heap_0) (x_30 list_1) (q_0 Heap_0) (qs_0 list_1) (p_0 Heap_0))
	(=>	(and (hmerge_0 x_29 p_0 q_0)
			(hpairwise_0 x_30 qs_0))
		(hpairwise_0 (cons_1 x_29 x_30) (cons_1 p_0 (cons_1 q_0 qs_0))))))
(assert (forall ((p_0 Heap_0))
	(hpairwise_0 (cons_1 p_0 nil_2) (cons_1 p_0 nil_2))))
(assert (hpairwise_0 nil_2 nil_2))
(declare-fun hmerging_0 (Heap_0 list_1) Bool)
(assert (forall ((x_33 Heap_0) (x_34 list_1) (z_3 Heap_0) (x_10 list_1) (p_1 Heap_0))
	(=>	(and (hpairwise_0 x_34 (cons_1 p_1 (cons_1 z_3 x_10)))
			(hmerging_0 x_33 x_34))
		(hmerging_0 x_33 (cons_1 p_1 (cons_1 z_3 x_10))))))
(assert (forall ((p_1 Heap_0))
	(hmerging_0 p_1 (cons_1 p_1 nil_2))))
(assert (hmerging_0 Nil_1 nil_2))
(declare-fun toHeap_1 (Heap_0 list_0) Bool)
(assert (forall ((x_38 Heap_0) (x_39 list_1) (x_11 list_0))
	(=>	(and (toHeap_0 x_39 x_11)
			(hmerging_0 x_38 x_39))
		(toHeap_1 x_38 x_11))))
(declare-fun toList_0 (list_0 Heap_0) Bool)
(assert (toList_0 nil_0 Nil_1))
(assert (forall ((x_43 Heap_0) (x_44 list_0) (p_2 Heap_0) (y_6 Nat_0) (q_1 Heap_0))
	(=>	(and (hmerge_0 x_43 p_2 q_1)
			(toList_0 x_44 x_43))
		(toList_0 (cons_0 y_6 x_44) (Node_0 p_2 y_6 q_1)))))
(declare-fun hsort_0 (list_0 list_0) Bool)
(assert (forall ((x_45 list_0) (x_46 Heap_0) (x_13 list_0))
	(=>	(and (toHeap_1 x_46 x_13)
			(toList_0 x_45 x_46))
		(hsort_0 x_45 x_13))))
(assert (forall ((x_48 list_0) (x_49 Bool_0) (xs_1 list_0))
	(=>	(and (diseqBool_0 x_49 true_0)
			(hsort_0 x_48 xs_1)
			(ordered_0 x_49 x_48))
		false)))
(check-sat)
