(set-logic HORN)
(declare-datatypes ((Nat_0 0)) (((Z_3 ) (Z_4 (unS_0 Nat_0)))))
(declare-fun diseqNat_0 (Nat_0 Nat_0) Bool)
(declare-fun unS_1 (Nat_0 Nat_0) Bool)
(declare-fun isZ_2 (Nat_0) Bool)
(declare-fun isZ_3 (Nat_0) Bool)
(assert (forall ((x_30 Nat_0))
	(unS_1 x_30 (Z_4 x_30))))
(assert (isZ_2 Z_3))
(assert (forall ((x_32 Nat_0))
	(isZ_3 (Z_4 x_32))))
(assert (forall ((x_33 Nat_0))
	(diseqNat_0 Z_3 (Z_4 x_33))))
(assert (forall ((x_34 Nat_0))
	(diseqNat_0 (Z_4 x_34) Z_3)))
(assert (forall ((x_35 Nat_0) (x_36 Nat_0))
	(=> (diseqNat_0 x_35 x_36)
	    (diseqNat_0 (Z_4 x_35) (Z_4 x_36)))))
(declare-fun add_1 (Nat_0 Nat_0 Nat_0) Bool)
(declare-fun minus_0 (Nat_0 Nat_0 Nat_0) Bool)
(declare-fun le_0 (Nat_0 Nat_0) Bool)
(declare-fun ge_0 (Nat_0 Nat_0) Bool)
(declare-fun lt_0 (Nat_0 Nat_0) Bool)
(declare-fun gt_0 (Nat_0 Nat_0) Bool)
(declare-fun mult_0 (Nat_0 Nat_0 Nat_0) Bool)
(declare-fun div_0 (Nat_0 Nat_0 Nat_0) Bool)
(declare-fun mod_0 (Nat_0 Nat_0 Nat_0) Bool)
(assert (forall ((y_5 Nat_0))
	(add_1 y_5 Z_3 y_5)))
(assert (forall ((r_0 Nat_0) (x_28 Nat_0) (y_5 Nat_0))
	(=> (add_1 r_0 x_28 y_5)
	    (add_1 (Z_4 r_0) (Z_4 x_28) y_5))))
(assert (forall ((y_5 Nat_0))
	(minus_0 Z_3 Z_3 y_5)))
(assert (forall ((r_0 Nat_0) (x_28 Nat_0) (y_5 Nat_0))
	(=> (minus_0 r_0 x_28 y_5)
	    (minus_0 (Z_4 r_0) (Z_4 x_28) y_5))))
(assert (forall ((y_5 Nat_0))
	(le_0 Z_3 y_5)))
(assert (forall ((x_28 Nat_0) (y_5 Nat_0))
	(=> (le_0 x_28 y_5)
	    (le_0 (Z_4 x_28) (Z_4 y_5)))))
(assert (forall ((y_5 Nat_0))
	(ge_0 y_5 Z_3)))
(assert (forall ((x_28 Nat_0) (y_5 Nat_0))
	(=> (ge_0 x_28 y_5)
	    (ge_0 (Z_4 x_28) (Z_4 y_5)))))
(assert (forall ((y_5 Nat_0))
	(lt_0 Z_3 (Z_4 y_5))))
(assert (forall ((x_28 Nat_0) (y_5 Nat_0))
	(=> (lt_0 x_28 y_5)
	    (lt_0 (Z_4 x_28) (Z_4 y_5)))))
(assert (forall ((y_5 Nat_0))
	(gt_0 (Z_4 y_5) Z_3)))
(assert (forall ((x_28 Nat_0) (y_5 Nat_0))
	(=> (gt_0 x_28 y_5)
	    (gt_0 (Z_4 x_28) (Z_4 y_5)))))
(assert (forall ((y_5 Nat_0))
	(mult_0 Z_3 Z_3 y_5)))
(assert (forall ((r_0 Nat_0) (x_28 Nat_0) (y_5 Nat_0) (z_5 Nat_0))
	(=>	(and (mult_0 r_0 x_28 y_5)
			(add_1 z_5 r_0 y_5))
		(mult_0 z_5 (Z_4 x_28) y_5))))
(assert (forall ((x_28 Nat_0) (y_5 Nat_0))
	(=> (lt_0 x_28 y_5)
	    (div_0 Z_3 x_28 y_5))))
(assert (forall ((r_0 Nat_0) (x_28 Nat_0) (y_5 Nat_0) (z_5 Nat_0))
	(=>	(and (ge_0 x_28 y_5)
			(minus_0 z_5 x_28 y_5)
			(div_0 r_0 z_5 y_5))
		(div_0 (Z_4 r_0) x_28 y_5))))
(assert (forall ((x_28 Nat_0) (y_5 Nat_0))
	(=> (lt_0 x_28 y_5)
	    (mod_0 x_28 x_28 y_5))))
(assert (forall ((r_0 Nat_0) (x_28 Nat_0) (y_5 Nat_0) (z_5 Nat_0))
	(=>	(and (ge_0 x_28 y_5)
			(minus_0 z_5 x_28 y_5)
			(mod_0 r_0 z_5 y_5))
		(mod_0 r_0 x_28 y_5))))
(declare-datatypes ((Bool_0 0)) (((false_0 ) (true_0 ))))
(declare-fun diseqBool_0 (Bool_0 Bool_0) Bool)
(declare-fun isfalse_1 (Bool_0) Bool)
(declare-fun istrue_1 (Bool_0) Bool)
(assert (isfalse_1 false_0))
(assert (istrue_1 true_0))
(assert (diseqBool_0 false_0 true_0))
(assert (diseqBool_0 true_0 false_0))
(declare-fun and_0 (Bool_0 Bool_0 Bool_0) Bool)
(declare-fun or_0 (Bool_0 Bool_0 Bool_0) Bool)
(declare-fun hence_0 (Bool_0 Bool_0 Bool_0) Bool)
(declare-fun not_0 (Bool_0 Bool_0) Bool)
(assert (and_0 false_0 false_0 false_0))
(assert (and_0 false_0 true_0 false_0))
(assert (and_0 false_0 false_0 true_0))
(assert (and_0 true_0 true_0 true_0))
(assert (or_0 false_0 false_0 false_0))
(assert (or_0 true_0 true_0 false_0))
(assert (or_0 true_0 false_0 true_0))
(assert (or_0 true_0 true_0 true_0))
(assert (hence_0 true_0 false_0 false_0))
(assert (hence_0 false_0 true_0 false_0))
(assert (hence_0 true_0 false_0 true_0))
(assert (hence_0 true_0 true_0 true_0))
(assert (not_0 true_0 false_0))
(assert (not_0 false_0 true_0))
(declare-datatypes ((list_0 0)) (((nil_0 ) (cons_0 (head_0 Nat_0) (tail_0 list_0)))))
(declare-fun diseqlist_0 (list_0 list_0) Bool)
(declare-fun head_1 (Nat_0 list_0) Bool)
(declare-fun tail_1 (list_0 list_0) Bool)
(declare-fun isnil_0 (list_0) Bool)
(declare-fun iscons_0 (list_0) Bool)
(assert (forall ((x_40 Nat_0) (x_41 list_0))
	(head_1 x_40 (cons_0 x_40 x_41))))
(assert (forall ((x_40 Nat_0) (x_41 list_0))
	(tail_1 x_41 (cons_0 x_40 x_41))))
(assert (isnil_0 nil_0))
(assert (forall ((x_43 Nat_0) (x_44 list_0))
	(iscons_0 (cons_0 x_43 x_44))))
(assert (forall ((x_45 Nat_0) (x_46 list_0))
	(diseqlist_0 nil_0 (cons_0 x_45 x_46))))
(assert (forall ((x_47 Nat_0) (x_48 list_0))
	(diseqlist_0 (cons_0 x_47 x_48) nil_0)))
(assert (forall ((x_49 Nat_0) (x_50 list_0) (x_51 Nat_0) (x_52 list_0))
	(=> (diseqNat_0 x_49 x_51)
	    (diseqlist_0 (cons_0 x_49 x_50) (cons_0 x_51 x_52)))))
(assert (forall ((x_49 Nat_0) (x_50 list_0) (x_51 Nat_0) (x_52 list_0))
	(=> (diseqlist_0 x_50 x_52)
	    (diseqlist_0 (cons_0 x_49 x_50) (cons_0 x_51 x_52)))))
(declare-datatypes ((Tree_0 0)) (((TNode_0 (projTNode_0 Tree_0) (projTNode_1 Nat_0) (projTNode_2 Tree_0)) (TNil_0 ))))
(declare-fun diseqTree_0 (Tree_0 Tree_0) Bool)
(declare-fun projTNode_3 (Tree_0 Tree_0) Bool)
(declare-fun projTNode_4 (Nat_0 Tree_0) Bool)
(declare-fun projTNode_5 (Tree_0 Tree_0) Bool)
(declare-fun isTNode_0 (Tree_0) Bool)
(declare-fun isTNil_0 (Tree_0) Bool)
(assert (forall ((x_53 Tree_0) (x_54 Nat_0) (x_55 Tree_0))
	(projTNode_3 x_53 (TNode_0 x_53 x_54 x_55))))
(assert (forall ((x_53 Tree_0) (x_54 Nat_0) (x_55 Tree_0))
	(projTNode_4 x_54 (TNode_0 x_53 x_54 x_55))))
(assert (forall ((x_53 Tree_0) (x_54 Nat_0) (x_55 Tree_0))
	(projTNode_5 x_55 (TNode_0 x_53 x_54 x_55))))
(assert (forall ((x_58 Tree_0) (x_59 Nat_0) (x_60 Tree_0))
	(isTNode_0 (TNode_0 x_58 x_59 x_60))))
(assert (isTNil_0 TNil_0))
(assert (forall ((x_61 Tree_0) (x_62 Nat_0) (x_63 Tree_0))
	(diseqTree_0 (TNode_0 x_61 x_62 x_63) TNil_0)))
(assert (forall ((x_64 Tree_0) (x_65 Nat_0) (x_66 Tree_0))
	(diseqTree_0 TNil_0 (TNode_0 x_64 x_65 x_66))))
(assert (forall ((x_67 Tree_0) (x_68 Nat_0) (x_69 Tree_0) (x_70 Tree_0) (x_71 Nat_0) (x_72 Tree_0))
	(=> (diseqTree_0 x_67 x_70)
	    (diseqTree_0 (TNode_0 x_67 x_68 x_69) (TNode_0 x_70 x_71 x_72)))))
(assert (forall ((x_67 Tree_0) (x_68 Nat_0) (x_69 Tree_0) (x_70 Tree_0) (x_71 Nat_0) (x_72 Tree_0))
	(=> (diseqNat_0 x_68 x_71)
	    (diseqTree_0 (TNode_0 x_67 x_68 x_69) (TNode_0 x_70 x_71 x_72)))))
(assert (forall ((x_67 Tree_0) (x_68 Nat_0) (x_69 Tree_0) (x_70 Tree_0) (x_71 Nat_0) (x_72 Tree_0))
	(=> (diseqTree_0 x_69 x_72)
	    (diseqTree_0 (TNode_0 x_67 x_68 x_69) (TNode_0 x_70 x_71 x_72)))))
(declare-fun ordered_0 (Bool_0 list_0) Bool)
(assert (forall ((x_5 Bool_0) (y_1 Nat_0) (xs_0 list_0) (y_0 Nat_0))
	(=>	(and (le_0 y_0 y_1)
			(ordered_0 x_5 (cons_0 y_1 xs_0)))
		(ordered_0 x_5 (cons_0 y_0 (cons_0 y_1 xs_0))))))
(assert (forall ((y_1 Nat_0) (xs_0 list_0) (y_0 Nat_0))
	(=> (gt_0 y_0 y_1)
	    (ordered_0 false_0 (cons_0 y_0 (cons_0 y_1 xs_0))))))
(assert (forall ((y_0 Nat_0))
	(ordered_0 true_0 (cons_0 y_0 nil_0))))
(assert (ordered_0 true_0 nil_0))
(declare-fun flatten_0 (list_0 Tree_0 list_0) Bool)
(assert (forall ((x_10 list_0))
	(flatten_0 x_10 TNil_0 x_10)))
(assert (forall ((x_11 list_0) (x_12 list_0) (p_0 Tree_0) (z_1 Nat_0) (q_0 Tree_0) (y_2 list_0))
	(=>	(and (flatten_0 x_12 q_0 y_2)
			(flatten_0 x_11 p_0 (cons_0 z_1 x_12)))
		(flatten_0 x_11 (TNode_0 p_0 z_1 q_0) y_2))))
(declare-fun add_0 (Tree_0 Nat_0 Tree_0) Bool)
(assert (forall ((x_2 Nat_0))
	(add_0 (TNode_0 TNil_0 x_2 TNil_0) x_2 TNil_0)))
(assert (forall ((x_16 Tree_0) (p_1 Tree_0) (z_2 Nat_0) (q_1 Tree_0) (x_2 Nat_0))
	(=>	(and (le_0 x_2 z_2)
			(add_0 x_16 x_2 p_1))
		(add_0 (TNode_0 x_16 z_2 q_1) x_2 (TNode_0 p_1 z_2 q_1)))))
(assert (forall ((x_18 Tree_0) (p_1 Tree_0) (z_2 Nat_0) (q_1 Tree_0) (x_2 Nat_0))
	(=>	(and (gt_0 x_2 z_2)
			(add_0 x_18 x_2 q_1))
		(add_0 (TNode_0 p_1 z_2 x_18) x_2 (TNode_0 p_1 z_2 q_1)))))
(declare-fun toTree_0 (Tree_0 list_0) Bool)
(assert (forall ((x_19 Tree_0) (x_20 Tree_0) (y_4 Nat_0) (xs_1 list_0))
	(=>	(and (toTree_0 x_20 xs_1)
			(add_0 x_19 y_4 x_20))
		(toTree_0 x_19 (cons_0 y_4 xs_1)))))
(assert (toTree_0 TNil_0 nil_0))
(declare-fun tsort_0 (list_0 list_0) Bool)
(assert (forall ((x_23 list_0) (x_24 Tree_0) (x_4 list_0))
	(=>	(and (toTree_0 x_24 x_4)
			(flatten_0 x_23 x_24 nil_0))
		(tsort_0 x_23 x_4))))
(assert (forall ((x_26 list_0) (x_27 Bool_0) (xs_2 list_0))
	(=>	(and (diseqBool_0 x_27 true_0)
			(tsort_0 x_26 xs_2)
			(ordered_0 x_27 x_26))
		false)))
(check-sat)
