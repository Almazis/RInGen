(set-logic HORN)
(declare-datatypes ((Bool_0 0)) (((false_0 ) (true_0 ))))
(declare-fun diseqBool_0 (Bool_0 Bool_0) Bool)
(declare-fun isfalse_1 (Bool_0) Bool)
(declare-fun istrue_1 (Bool_0) Bool)
(assert (isfalse_1 false_0))
(assert (istrue_1 true_0))
(assert (diseqBool_0 false_0 true_0))
(assert (diseqBool_0 true_0 false_0))
(declare-fun and_0 (Bool_0 Bool_0 Bool_0) Bool)
(declare-fun or_0 (Bool_0 Bool_0 Bool_0) Bool)
(declare-fun hence_0 (Bool_0 Bool_0 Bool_0) Bool)
(declare-fun not_0 (Bool_0 Bool_0) Bool)
(assert (and_0 false_0 false_0 false_0))
(assert (and_0 false_0 true_0 false_0))
(assert (and_0 false_0 false_0 true_0))
(assert (and_0 true_0 true_0 true_0))
(assert (or_0 false_0 false_0 false_0))
(assert (or_0 true_0 true_0 false_0))
(assert (or_0 true_0 false_0 true_0))
(assert (or_0 true_0 true_0 true_0))
(assert (hence_0 true_0 false_0 false_0))
(assert (hence_0 false_0 true_0 false_0))
(assert (hence_0 true_0 false_0 true_0))
(assert (hence_0 true_0 true_0 true_0))
(assert (not_0 true_0 false_0))
(assert (not_0 false_0 true_0))
(declare-datatypes ((It_0 0)) (((A_0 ) (B_0 ) (C_0 ))))
(declare-fun diseqIt_0 (It_0 It_0) Bool)
(declare-fun isA_0 (It_0) Bool)
(declare-fun isB_0 (It_0) Bool)
(declare-fun isC_0 (It_0) Bool)
(assert (isA_0 A_0))
(assert (isB_0 B_0))
(assert (isC_0 C_0))
(assert (diseqIt_0 A_0 B_0))
(assert (diseqIt_0 A_0 C_0))
(assert (diseqIt_0 B_0 A_0))
(assert (diseqIt_0 C_0 A_0))
(assert (diseqIt_0 B_0 C_0))
(assert (diseqIt_0 C_0 B_0))
(declare-datatypes ((list_0 0)) (((nil_0 ) (cons_0 (head_0 It_0) (tail_0 list_0)))))
(declare-fun diseqlist_0 (list_0 list_0) Bool)
(declare-fun head_1 (It_0 list_0) Bool)
(declare-fun tail_1 (list_0 list_0) Bool)
(declare-fun isnil_0 (list_0) Bool)
(declare-fun iscons_0 (list_0) Bool)
(assert (forall ((x_36 It_0) (x_37 list_0))
	(head_1 x_36 (cons_0 x_36 x_37))))
(assert (forall ((x_36 It_0) (x_37 list_0))
	(tail_1 x_37 (cons_0 x_36 x_37))))
(assert (isnil_0 nil_0))
(assert (forall ((x_39 It_0) (x_40 list_0))
	(iscons_0 (cons_0 x_39 x_40))))
(assert (forall ((x_41 It_0) (x_42 list_0))
	(diseqlist_0 nil_0 (cons_0 x_41 x_42))))
(assert (forall ((x_43 It_0) (x_44 list_0))
	(diseqlist_0 (cons_0 x_43 x_44) nil_0)))
(assert (forall ((x_45 It_0) (x_46 list_0) (x_47 It_0) (x_48 list_0))
	(=> (diseqIt_0 x_45 x_47)
	    (diseqlist_0 (cons_0 x_45 x_46) (cons_0 x_47 x_48)))))
(assert (forall ((x_45 It_0) (x_46 list_0) (x_47 It_0) (x_48 list_0))
	(=> (diseqlist_0 x_46 x_48)
	    (diseqlist_0 (cons_0 x_45 x_46) (cons_0 x_47 x_48)))))
(declare-fun isPrefix_0 (Bool_0 list_0 list_0) Bool)
(assert (forall ((x_12 Bool_0) (x_2 It_0) (x_3 list_0) (x_1 list_0))
	(=> (isPrefix_0 x_12 x_1 x_3)
	    (isPrefix_0 x_12 (cons_0 x_2 x_1) (cons_0 x_2 x_3)))))
(assert (forall ((x_2 It_0) (x_3 list_0) (z_0 It_0) (x_1 list_0))
	(=> (diseqIt_0 z_0 x_2)
	    (isPrefix_0 false_0 (cons_0 z_0 x_1) (cons_0 x_2 x_3)))))
(assert (forall ((z_0 It_0) (x_1 list_0))
	(isPrefix_0 false_0 (cons_0 z_0 x_1) nil_0)))
(assert (forall ((y_0 list_0))
	(isPrefix_0 true_0 nil_0 y_0)))
(declare-fun isRelaxedPrefix_0 (Bool_0 list_0 list_0) Bool)
(assert (forall ((x_17 Bool_0) (x_8 It_0) (x_9 list_0) (x_6 It_0) (x_7 list_0))
	(=> (isRelaxedPrefix_0 x_17 (cons_0 x_6 x_7) x_9)
	    (isRelaxedPrefix_0 x_17 (cons_0 x_8 (cons_0 x_6 x_7)) (cons_0 x_8 x_9)))))
(assert (forall ((x_19 Bool_0) (x_8 It_0) (x_9 list_0) (x_6 It_0) (x_7 list_0) (z_1 It_0))
	(=>	(and (diseqIt_0 z_1 x_8)
			(isPrefix_0 x_19 (cons_0 x_6 x_7) (cons_0 x_8 x_9)))
		(isRelaxedPrefix_0 x_19 (cons_0 z_1 (cons_0 x_6 x_7)) (cons_0 x_8 x_9)))))
(assert (forall ((x_6 It_0) (x_7 list_0) (z_1 It_0))
	(isRelaxedPrefix_0 false_0 (cons_0 z_1 (cons_0 x_6 x_7)) nil_0)))
(assert (forall ((z_1 It_0) (y_1 list_0))
	(isRelaxedPrefix_0 true_0 (cons_0 z_1 nil_0) y_1)))
(assert (forall ((y_1 list_0))
	(isRelaxedPrefix_0 true_0 nil_0 y_1)))
(declare-fun x_10 (list_0 list_0 list_0) Bool)
(assert (forall ((x_25 list_0) (z_2 It_0) (xs_0 list_0) (y_2 list_0))
	(=> (x_10 x_25 xs_0 y_2)
	    (x_10 (cons_0 z_2 x_25) (cons_0 z_2 xs_0) y_2))))
(assert (forall ((x_26 list_0))
	(x_10 x_26 nil_0 x_26)))
(assert (forall ((x_27 list_0) (x_28 Bool_0) (xs_1 list_0) (ys_0 list_0))
	(=>	(and (diseqBool_0 x_28 true_0)
			(x_10 x_27 xs_1 ys_0)
			(isRelaxedPrefix_0 x_28 xs_1 x_27))
		false)))
(check-sat)
