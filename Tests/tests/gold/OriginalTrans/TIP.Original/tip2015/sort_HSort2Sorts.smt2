(set-logic HORN)
(declare-datatypes ((Nat_0 0)) (((Z_2 ) (Z_3 (unS_0 Nat_0)))))
(declare-fun diseqNat_0 (Nat_0 Nat_0) Bool)
(declare-fun unS_1 (Nat_0 Nat_0) Bool)
(declare-fun isZ_2 (Nat_0) Bool)
(declare-fun isZ_3 (Nat_0) Bool)
(assert (forall ((x_39 Nat_0))
	(unS_1 x_39 (Z_3 x_39))))
(assert (isZ_2 Z_2))
(assert (forall ((x_41 Nat_0))
	(isZ_3 (Z_3 x_41))))
(assert (forall ((x_42 Nat_0))
	(diseqNat_0 Z_2 (Z_3 x_42))))
(assert (forall ((x_43 Nat_0))
	(diseqNat_0 (Z_3 x_43) Z_2)))
(assert (forall ((x_44 Nat_0) (x_45 Nat_0))
	(=> (diseqNat_0 x_44 x_45)
	    (diseqNat_0 (Z_3 x_44) (Z_3 x_45)))))
(declare-fun add_0 (Nat_0 Nat_0 Nat_0) Bool)
(declare-fun minus_0 (Nat_0 Nat_0 Nat_0) Bool)
(declare-fun le_0 (Nat_0 Nat_0) Bool)
(declare-fun ge_0 (Nat_0 Nat_0) Bool)
(declare-fun lt_0 (Nat_0 Nat_0) Bool)
(declare-fun gt_0 (Nat_0 Nat_0) Bool)
(declare-fun mult_0 (Nat_0 Nat_0 Nat_0) Bool)
(declare-fun div_0 (Nat_0 Nat_0 Nat_0) Bool)
(declare-fun mod_0 (Nat_0 Nat_0 Nat_0) Bool)
(assert (forall ((y_6 Nat_0))
	(add_0 y_6 Z_2 y_6)))
(assert (forall ((r_0 Nat_0) (x_37 Nat_0) (y_6 Nat_0))
	(=> (add_0 r_0 x_37 y_6)
	    (add_0 (Z_3 r_0) (Z_3 x_37) y_6))))
(assert (forall ((y_6 Nat_0))
	(minus_0 Z_2 Z_2 y_6)))
(assert (forall ((r_0 Nat_0) (x_37 Nat_0) (y_6 Nat_0))
	(=> (minus_0 r_0 x_37 y_6)
	    (minus_0 (Z_3 r_0) (Z_3 x_37) y_6))))
(assert (forall ((y_6 Nat_0))
	(le_0 Z_2 y_6)))
(assert (forall ((x_37 Nat_0) (y_6 Nat_0))
	(=> (le_0 x_37 y_6)
	    (le_0 (Z_3 x_37) (Z_3 y_6)))))
(assert (forall ((y_6 Nat_0))
	(ge_0 y_6 Z_2)))
(assert (forall ((x_37 Nat_0) (y_6 Nat_0))
	(=> (ge_0 x_37 y_6)
	    (ge_0 (Z_3 x_37) (Z_3 y_6)))))
(assert (forall ((y_6 Nat_0))
	(lt_0 Z_2 (Z_3 y_6))))
(assert (forall ((x_37 Nat_0) (y_6 Nat_0))
	(=> (lt_0 x_37 y_6)
	    (lt_0 (Z_3 x_37) (Z_3 y_6)))))
(assert (forall ((y_6 Nat_0))
	(gt_0 (Z_3 y_6) Z_2)))
(assert (forall ((x_37 Nat_0) (y_6 Nat_0))
	(=> (gt_0 x_37 y_6)
	    (gt_0 (Z_3 x_37) (Z_3 y_6)))))
(assert (forall ((y_6 Nat_0))
	(mult_0 Z_2 Z_2 y_6)))
(assert (forall ((r_0 Nat_0) (x_37 Nat_0) (y_6 Nat_0) (z_4 Nat_0))
	(=>	(and (mult_0 r_0 x_37 y_6)
			(add_0 z_4 r_0 y_6))
		(mult_0 z_4 (Z_3 x_37) y_6))))
(assert (forall ((x_37 Nat_0) (y_6 Nat_0))
	(=> (lt_0 x_37 y_6)
	    (div_0 Z_2 x_37 y_6))))
(assert (forall ((r_0 Nat_0) (x_37 Nat_0) (y_6 Nat_0) (z_4 Nat_0))
	(=>	(and (ge_0 x_37 y_6)
			(minus_0 z_4 x_37 y_6)
			(div_0 r_0 z_4 y_6))
		(div_0 (Z_3 r_0) x_37 y_6))))
(assert (forall ((x_37 Nat_0) (y_6 Nat_0))
	(=> (lt_0 x_37 y_6)
	    (mod_0 x_37 x_37 y_6))))
(assert (forall ((r_0 Nat_0) (x_37 Nat_0) (y_6 Nat_0) (z_4 Nat_0))
	(=>	(and (ge_0 x_37 y_6)
			(minus_0 z_4 x_37 y_6)
			(mod_0 r_0 z_4 y_6))
		(mod_0 r_0 x_37 y_6))))
(declare-datatypes ((Bool_0 0)) (((false_0 ) (true_0 ))))
(declare-fun diseqBool_0 (Bool_0 Bool_0) Bool)
(declare-fun isfalse_1 (Bool_0) Bool)
(declare-fun istrue_1 (Bool_0) Bool)
(assert (isfalse_1 false_0))
(assert (istrue_1 true_0))
(assert (diseqBool_0 false_0 true_0))
(assert (diseqBool_0 true_0 false_0))
(declare-fun and_0 (Bool_0 Bool_0 Bool_0) Bool)
(declare-fun or_0 (Bool_0 Bool_0 Bool_0) Bool)
(declare-fun hence_0 (Bool_0 Bool_0 Bool_0) Bool)
(declare-fun not_0 (Bool_0 Bool_0) Bool)
(assert (and_0 false_0 false_0 false_0))
(assert (and_0 false_0 true_0 false_0))
(assert (and_0 false_0 false_0 true_0))
(assert (and_0 true_0 true_0 true_0))
(assert (or_0 false_0 false_0 false_0))
(assert (or_0 true_0 true_0 false_0))
(assert (or_0 true_0 false_0 true_0))
(assert (or_0 true_0 true_0 true_0))
(assert (hence_0 true_0 false_0 false_0))
(assert (hence_0 false_0 true_0 false_0))
(assert (hence_0 true_0 false_0 true_0))
(assert (hence_0 true_0 true_0 true_0))
(assert (not_0 true_0 false_0))
(assert (not_0 false_0 true_0))
(declare-datatypes ((list_0 0)) (((nil_0 ) (cons_0 (head_0 Nat_0) (tail_0 list_0)))))
(declare-fun diseqlist_0 (list_0 list_0) Bool)
(declare-fun head_1 (Nat_0 list_0) Bool)
(declare-fun tail_1 (list_0 list_0) Bool)
(declare-fun isnil_0 (list_0) Bool)
(declare-fun iscons_0 (list_0) Bool)
(assert (forall ((x_49 Nat_0) (x_50 list_0))
	(head_1 x_49 (cons_0 x_49 x_50))))
(assert (forall ((x_49 Nat_0) (x_50 list_0))
	(tail_1 x_50 (cons_0 x_49 x_50))))
(assert (isnil_0 nil_0))
(assert (forall ((x_52 Nat_0) (x_53 list_0))
	(iscons_0 (cons_0 x_52 x_53))))
(assert (forall ((x_54 Nat_0) (x_55 list_0))
	(diseqlist_0 nil_0 (cons_0 x_54 x_55))))
(assert (forall ((x_56 Nat_0) (x_57 list_0))
	(diseqlist_0 (cons_0 x_56 x_57) nil_0)))
(assert (forall ((x_58 Nat_0) (x_59 list_0) (x_60 Nat_0) (x_61 list_0))
	(=> (diseqNat_0 x_58 x_60)
	    (diseqlist_0 (cons_0 x_58 x_59) (cons_0 x_60 x_61)))))
(assert (forall ((x_58 Nat_0) (x_59 list_0) (x_60 Nat_0) (x_61 list_0))
	(=> (diseqlist_0 x_59 x_61)
	    (diseqlist_0 (cons_0 x_58 x_59) (cons_0 x_60 x_61)))))
(declare-datatypes ((Heap_0 0)) (((Node_0 (projNode_0 Heap_0) (projNode_1 Nat_0) (projNode_2 Heap_0)) (Nil_1 ))))
(declare-fun diseqHeap_0 (Heap_0 Heap_0) Bool)
(declare-fun projNode_3 (Heap_0 Heap_0) Bool)
(declare-fun projNode_4 (Nat_0 Heap_0) Bool)
(declare-fun projNode_5 (Heap_0 Heap_0) Bool)
(declare-fun isNode_0 (Heap_0) Bool)
(declare-fun isNil_1 (Heap_0) Bool)
(assert (forall ((x_62 Heap_0) (x_63 Nat_0) (x_64 Heap_0))
	(projNode_3 x_62 (Node_0 x_62 x_63 x_64))))
(assert (forall ((x_62 Heap_0) (x_63 Nat_0) (x_64 Heap_0))
	(projNode_4 x_63 (Node_0 x_62 x_63 x_64))))
(assert (forall ((x_62 Heap_0) (x_63 Nat_0) (x_64 Heap_0))
	(projNode_5 x_64 (Node_0 x_62 x_63 x_64))))
(assert (forall ((x_67 Heap_0) (x_68 Nat_0) (x_69 Heap_0))
	(isNode_0 (Node_0 x_67 x_68 x_69))))
(assert (isNil_1 Nil_1))
(assert (forall ((x_70 Heap_0) (x_71 Nat_0) (x_72 Heap_0))
	(diseqHeap_0 (Node_0 x_70 x_71 x_72) Nil_1)))
(assert (forall ((x_73 Heap_0) (x_74 Nat_0) (x_75 Heap_0))
	(diseqHeap_0 Nil_1 (Node_0 x_73 x_74 x_75))))
(assert (forall ((x_76 Heap_0) (x_77 Nat_0) (x_78 Heap_0) (x_79 Heap_0) (x_80 Nat_0) (x_81 Heap_0))
	(=> (diseqHeap_0 x_76 x_79)
	    (diseqHeap_0 (Node_0 x_76 x_77 x_78) (Node_0 x_79 x_80 x_81)))))
(assert (forall ((x_76 Heap_0) (x_77 Nat_0) (x_78 Heap_0) (x_79 Heap_0) (x_80 Nat_0) (x_81 Heap_0))
	(=> (diseqNat_0 x_77 x_80)
	    (diseqHeap_0 (Node_0 x_76 x_77 x_78) (Node_0 x_79 x_80 x_81)))))
(assert (forall ((x_76 Heap_0) (x_77 Nat_0) (x_78 Heap_0) (x_79 Heap_0) (x_80 Nat_0) (x_81 Heap_0))
	(=> (diseqHeap_0 x_78 x_81)
	    (diseqHeap_0 (Node_0 x_76 x_77 x_78) (Node_0 x_79 x_80 x_81)))))
(declare-fun ordered_0 (Bool_0 list_0) Bool)
(assert (forall ((x_11 Bool_0) (y_1 Nat_0) (xs_0 list_0) (y_0 Nat_0))
	(=>	(and (le_0 y_0 y_1)
			(ordered_0 x_11 (cons_0 y_1 xs_0)))
		(ordered_0 x_11 (cons_0 y_0 (cons_0 y_1 xs_0))))))
(assert (forall ((y_1 Nat_0) (xs_0 list_0) (y_0 Nat_0))
	(=> (gt_0 y_0 y_1)
	    (ordered_0 false_0 (cons_0 y_0 (cons_0 y_1 xs_0))))))
(assert (forall ((y_0 Nat_0))
	(ordered_0 true_0 (cons_0 y_0 nil_0))))
(assert (ordered_0 true_0 nil_0))
(declare-fun hmerge_0 (Heap_0 Heap_0 Heap_0) Bool)
(assert (forall ((x_16 Heap_0))
	(hmerge_0 x_16 Nil_1 x_16)))
(assert (forall ((z_1 Heap_0) (x_2 Nat_0) (x_3 Heap_0))
	(hmerge_0 (Node_0 z_1 x_2 x_3) (Node_0 z_1 x_2 x_3) Nil_1)))
(assert (forall ((x_19 Heap_0) (x_4 Heap_0) (x_5 Nat_0) (x_6 Heap_0) (z_1 Heap_0) (x_2 Nat_0) (x_3 Heap_0))
	(=>	(and (le_0 x_2 x_5)
			(hmerge_0 x_19 x_3 (Node_0 x_4 x_5 x_6)))
		(hmerge_0 (Node_0 x_19 x_2 z_1) (Node_0 z_1 x_2 x_3) (Node_0 x_4 x_5 x_6)))))
(assert (forall ((x_21 Heap_0) (x_4 Heap_0) (x_5 Nat_0) (x_6 Heap_0) (z_1 Heap_0) (x_2 Nat_0) (x_3 Heap_0))
	(=>	(and (gt_0 x_2 x_5)
			(hmerge_0 x_21 (Node_0 z_1 x_2 x_3) x_6))
		(hmerge_0 (Node_0 x_21 x_5 x_4) (Node_0 z_1 x_2 x_3) (Node_0 x_4 x_5 x_6)))))
(declare-fun toList_0 (list_0 Heap_0) Bool)
(assert (toList_0 nil_0 Nil_1))
(assert (forall ((x_24 Heap_0) (x_25 list_0) (p_0 Heap_0) (y_3 Nat_0) (q_0 Heap_0))
	(=>	(and (hmerge_0 x_24 p_0 q_0)
			(toList_0 x_25 x_24))
		(toList_0 (cons_0 y_3 x_25) (Node_0 p_0 y_3 q_0)))))
(declare-fun hinsert_0 (Heap_0 Nat_0 Heap_0) Bool)
(assert (forall ((x_26 Heap_0) (x_8 Nat_0) (y_4 Heap_0))
	(=> (hmerge_0 x_26 (Node_0 Nil_1 x_8 Nil_1) y_4)
	    (hinsert_0 x_26 x_8 y_4))))
(declare-fun toHeap_0 (Heap_0 list_0) Bool)
(assert (forall ((x_28 Heap_0) (x_29 Heap_0) (y_5 Nat_0) (xs_1 list_0))
	(=>	(and (toHeap_0 x_29 xs_1)
			(hinsert_0 x_28 y_5 x_29))
		(toHeap_0 x_28 (cons_0 y_5 xs_1)))))
(assert (toHeap_0 Nil_1 nil_0))
(declare-fun hsort_0 (list_0 list_0) Bool)
(assert (forall ((x_32 list_0) (x_33 Heap_0) (x_10 list_0))
	(=>	(and (toHeap_0 x_33 x_10)
			(toList_0 x_32 x_33))
		(hsort_0 x_32 x_10))))
(assert (forall ((x_35 list_0) (x_36 Bool_0) (xs_2 list_0))
	(=>	(and (diseqBool_0 x_36 true_0)
			(hsort_0 x_35 xs_2)
			(ordered_0 x_36 x_35))
		false)))
(check-sat)
