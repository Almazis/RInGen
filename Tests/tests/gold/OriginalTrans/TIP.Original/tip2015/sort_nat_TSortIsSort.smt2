(set-logic HORN)
(declare-datatypes ((Bool_0 0)) (((false_0 ) (true_0 ))))
(declare-fun diseqBool_0 (Bool_0 Bool_0) Bool)
(declare-fun isfalse_1 (Bool_0) Bool)
(declare-fun istrue_1 (Bool_0) Bool)
(assert (isfalse_1 false_0))
(assert (istrue_1 true_0))
(assert (diseqBool_0 false_0 true_0))
(assert (diseqBool_0 true_0 false_0))
(declare-fun and_0 (Bool_0 Bool_0 Bool_0) Bool)
(declare-fun or_0 (Bool_0 Bool_0 Bool_0) Bool)
(declare-fun hence_0 (Bool_0 Bool_0 Bool_0) Bool)
(declare-fun not_0 (Bool_0 Bool_0) Bool)
(assert (and_0 false_0 false_0 false_0))
(assert (and_0 false_0 true_0 false_0))
(assert (and_0 false_0 false_0 true_0))
(assert (and_0 true_0 true_0 true_0))
(assert (or_0 false_0 false_0 false_0))
(assert (or_0 true_0 true_0 false_0))
(assert (or_0 true_0 false_0 true_0))
(assert (or_0 true_0 true_0 true_0))
(assert (hence_0 true_0 false_0 false_0))
(assert (hence_0 false_0 true_0 false_0))
(assert (hence_0 true_0 false_0 true_0))
(assert (hence_0 true_0 true_0 true_0))
(assert (not_0 true_0 false_0))
(assert (not_0 false_0 true_0))
(declare-datatypes ((Nat_0 0)) (((zero_0 ) (succ_0 (p_0 Nat_0)))))
(declare-fun diseqNat_0 (Nat_0 Nat_0) Bool)
(declare-fun p_1 (Nat_0 Nat_0) Bool)
(declare-fun iszero_0 (Nat_0) Bool)
(declare-fun issucc_0 (Nat_0) Bool)
(assert (forall ((x_46 Nat_0))
	(p_1 x_46 (succ_0 x_46))))
(assert (iszero_0 zero_0))
(assert (forall ((x_48 Nat_0))
	(issucc_0 (succ_0 x_48))))
(assert (forall ((x_49 Nat_0))
	(diseqNat_0 zero_0 (succ_0 x_49))))
(assert (forall ((x_50 Nat_0))
	(diseqNat_0 (succ_0 x_50) zero_0)))
(assert (forall ((x_51 Nat_0) (x_52 Nat_0))
	(=> (diseqNat_0 x_51 x_52)
	    (diseqNat_0 (succ_0 x_51) (succ_0 x_52)))))
(declare-datatypes ((Tree_0 0)) (((TNode_0 (projTNode_0 Tree_0) (projTNode_1 Nat_0) (projTNode_2 Tree_0)) (TNil_0 ))))
(declare-fun diseqTree_0 (Tree_0 Tree_0) Bool)
(declare-fun projTNode_3 (Tree_0 Tree_0) Bool)
(declare-fun projTNode_4 (Nat_0 Tree_0) Bool)
(declare-fun projTNode_5 (Tree_0 Tree_0) Bool)
(declare-fun isTNode_0 (Tree_0) Bool)
(declare-fun isTNil_0 (Tree_0) Bool)
(assert (forall ((x_53 Tree_0) (x_54 Nat_0) (x_55 Tree_0))
	(projTNode_3 x_53 (TNode_0 x_53 x_54 x_55))))
(assert (forall ((x_53 Tree_0) (x_54 Nat_0) (x_55 Tree_0))
	(projTNode_4 x_54 (TNode_0 x_53 x_54 x_55))))
(assert (forall ((x_53 Tree_0) (x_54 Nat_0) (x_55 Tree_0))
	(projTNode_5 x_55 (TNode_0 x_53 x_54 x_55))))
(assert (forall ((x_58 Tree_0) (x_59 Nat_0) (x_60 Tree_0))
	(isTNode_0 (TNode_0 x_58 x_59 x_60))))
(assert (isTNil_0 TNil_0))
(assert (forall ((x_61 Tree_0) (x_62 Nat_0) (x_63 Tree_0))
	(diseqTree_0 (TNode_0 x_61 x_62 x_63) TNil_0)))
(assert (forall ((x_64 Tree_0) (x_65 Nat_0) (x_66 Tree_0))
	(diseqTree_0 TNil_0 (TNode_0 x_64 x_65 x_66))))
(assert (forall ((x_67 Tree_0) (x_68 Nat_0) (x_69 Tree_0) (x_70 Tree_0) (x_71 Nat_0) (x_72 Tree_0))
	(=> (diseqTree_0 x_67 x_70)
	    (diseqTree_0 (TNode_0 x_67 x_68 x_69) (TNode_0 x_70 x_71 x_72)))))
(assert (forall ((x_67 Tree_0) (x_68 Nat_0) (x_69 Tree_0) (x_70 Tree_0) (x_71 Nat_0) (x_72 Tree_0))
	(=> (diseqNat_0 x_68 x_71)
	    (diseqTree_0 (TNode_0 x_67 x_68 x_69) (TNode_0 x_70 x_71 x_72)))))
(assert (forall ((x_67 Tree_0) (x_68 Nat_0) (x_69 Tree_0) (x_70 Tree_0) (x_71 Nat_0) (x_72 Tree_0))
	(=> (diseqTree_0 x_69 x_72)
	    (diseqTree_0 (TNode_0 x_67 x_68 x_69) (TNode_0 x_70 x_71 x_72)))))
(declare-datatypes ((list_0 0)) (((nil_0 ) (cons_0 (head_0 Nat_0) (tail_0 list_0)))))
(declare-fun diseqlist_0 (list_0 list_0) Bool)
(declare-fun head_1 (Nat_0 list_0) Bool)
(declare-fun tail_1 (list_0 list_0) Bool)
(declare-fun isnil_0 (list_0) Bool)
(declare-fun iscons_0 (list_0) Bool)
(assert (forall ((x_74 Nat_0) (x_75 list_0))
	(head_1 x_74 (cons_0 x_74 x_75))))
(assert (forall ((x_74 Nat_0) (x_75 list_0))
	(tail_1 x_75 (cons_0 x_74 x_75))))
(assert (isnil_0 nil_0))
(assert (forall ((x_77 Nat_0) (x_78 list_0))
	(iscons_0 (cons_0 x_77 x_78))))
(assert (forall ((x_79 Nat_0) (x_80 list_0))
	(diseqlist_0 nil_0 (cons_0 x_79 x_80))))
(assert (forall ((x_81 Nat_0) (x_82 list_0))
	(diseqlist_0 (cons_0 x_81 x_82) nil_0)))
(assert (forall ((x_83 Nat_0) (x_84 list_0) (x_85 Nat_0) (x_86 list_0))
	(=> (diseqNat_0 x_83 x_85)
	    (diseqlist_0 (cons_0 x_83 x_84) (cons_0 x_85 x_86)))))
(assert (forall ((x_83 Nat_0) (x_84 list_0) (x_85 Nat_0) (x_86 list_0))
	(=> (diseqlist_0 x_84 x_86)
	    (diseqlist_0 (cons_0 x_83 x_84) (cons_0 x_85 x_86)))))
(declare-fun leq_0 (Bool_0 Nat_0 Nat_0) Bool)
(assert (forall ((x_8 Bool_0) (x_1 Nat_0) (z_0 Nat_0))
	(=> (leq_0 x_8 z_0 x_1)
	    (leq_0 x_8 (succ_0 z_0) (succ_0 x_1)))))
(assert (forall ((z_0 Nat_0))
	(leq_0 false_0 (succ_0 z_0) zero_0)))
(assert (forall ((y_0 Nat_0))
	(leq_0 true_0 zero_0 y_0)))
(declare-fun insert_0 (list_0 Nat_0 list_0) Bool)
(assert (forall ((z_1 Nat_0) (xs_0 list_0) (x_2 Nat_0))
	(=> (leq_0 true_0 x_2 z_1)
	    (insert_0 (cons_0 x_2 (cons_0 z_1 xs_0)) x_2 (cons_0 z_1 xs_0)))))
(assert (forall ((x_16 list_0) (x_14 Bool_0) (z_1 Nat_0) (xs_0 list_0) (x_2 Nat_0))
	(=>	(and (diseqBool_0 x_14 true_0)
			(insert_0 x_16 x_2 xs_0)
			(leq_0 x_14 x_2 z_1))
		(insert_0 (cons_0 z_1 x_16) x_2 (cons_0 z_1 xs_0)))))
(assert (forall ((x_2 Nat_0))
	(insert_0 (cons_0 x_2 nil_0) x_2 nil_0)))
(declare-fun isort_0 (list_0 list_0) Bool)
(assert (forall ((x_18 list_0) (x_19 list_0) (y_2 Nat_0) (xs_1 list_0))
	(=>	(and (isort_0 x_19 xs_1)
			(insert_0 x_18 y_2 x_19))
		(isort_0 x_18 (cons_0 y_2 xs_1)))))
(assert (isort_0 nil_0 nil_0))
(declare-fun flatten_0 (list_0 Tree_0 list_0) Bool)
(assert (forall ((x_22 list_0))
	(flatten_0 x_22 TNil_0 x_22)))
(assert (forall ((x_23 list_0) (x_24 list_0) (q_0 Tree_0) (z_2 Nat_0) (r_0 Tree_0) (y_3 list_0))
	(=>	(and (flatten_0 x_24 r_0 y_3)
			(flatten_0 x_23 q_0 (cons_0 z_2 x_24)))
		(flatten_0 x_23 (TNode_0 q_0 z_2 r_0) y_3))))
(declare-fun add_0 (Tree_0 Nat_0 Tree_0) Bool)
(assert (forall ((x_5 Nat_0))
	(add_0 (TNode_0 TNil_0 x_5 TNil_0) x_5 TNil_0)))
(assert (forall ((x_29 Tree_0) (q_1 Tree_0) (z_3 Nat_0) (r_1 Tree_0) (x_5 Nat_0))
	(=>	(and (add_0 x_29 x_5 q_1)
			(leq_0 true_0 x_5 z_3))
		(add_0 (TNode_0 x_29 z_3 r_1) x_5 (TNode_0 q_1 z_3 r_1)))))
(assert (forall ((x_32 Tree_0) (x_30 Bool_0) (q_1 Tree_0) (z_3 Nat_0) (r_1 Tree_0) (x_5 Nat_0))
	(=>	(and (diseqBool_0 x_30 true_0)
			(add_0 x_32 x_5 r_1)
			(leq_0 x_30 x_5 z_3))
		(add_0 (TNode_0 q_1 z_3 x_32) x_5 (TNode_0 q_1 z_3 r_1)))))
(declare-fun toTree_0 (Tree_0 list_0) Bool)
(assert (forall ((x_33 Tree_0) (x_34 Tree_0) (y_5 Nat_0) (xs_2 list_0))
	(=>	(and (toTree_0 x_34 xs_2)
			(add_0 x_33 y_5 x_34))
		(toTree_0 x_33 (cons_0 y_5 xs_2)))))
(assert (toTree_0 TNil_0 nil_0))
(declare-fun tsort_0 (list_0 list_0) Bool)
(assert (forall ((x_37 list_0) (x_38 Tree_0) (x_7 list_0))
	(=>	(and (toTree_0 x_38 x_7)
			(flatten_0 x_37 x_38 nil_0))
		(tsort_0 x_37 x_7))))
(assert (forall ((x_40 list_0) (x_41 list_0) (xs_3 list_0))
	(=>	(and (diseqlist_0 x_40 x_41)
			(tsort_0 x_40 xs_3)
			(isort_0 x_41 xs_3))
		false)))
(check-sat)
