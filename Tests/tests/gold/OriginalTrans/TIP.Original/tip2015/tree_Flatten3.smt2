(set-logic HORN)
(declare-datatypes ((Nat_0 0)) (((Z_2 ) (Z_3 (unS_0 Nat_0)))))
(declare-fun diseqNat_0 (Nat_0 Nat_0) Bool)
(declare-fun unS_1 (Nat_0 Nat_0) Bool)
(declare-fun isZ_2 (Nat_0) Bool)
(declare-fun isZ_3 (Nat_0) Bool)
(assert (forall ((x_57 Nat_0))
	(unS_1 x_57 (Z_3 x_57))))
(assert (isZ_2 Z_2))
(assert (forall ((x_59 Nat_0))
	(isZ_3 (Z_3 x_59))))
(assert (forall ((x_60 Nat_0))
	(diseqNat_0 Z_2 (Z_3 x_60))))
(assert (forall ((x_61 Nat_0))
	(diseqNat_0 (Z_3 x_61) Z_2)))
(assert (forall ((x_62 Nat_0) (x_63 Nat_0))
	(=> (diseqNat_0 x_62 x_63)
	    (diseqNat_0 (Z_3 x_62) (Z_3 x_63)))))
(declare-fun add_0 (Nat_0 Nat_0 Nat_0) Bool)
(declare-fun minus_0 (Nat_0 Nat_0 Nat_0) Bool)
(declare-fun le_0 (Nat_0 Nat_0) Bool)
(declare-fun ge_0 (Nat_0 Nat_0) Bool)
(declare-fun lt_0 (Nat_0 Nat_0) Bool)
(declare-fun gt_0 (Nat_0 Nat_0) Bool)
(declare-fun mult_0 (Nat_0 Nat_0 Nat_0) Bool)
(declare-fun div_0 (Nat_0 Nat_0 Nat_0) Bool)
(declare-fun mod_0 (Nat_0 Nat_0 Nat_0) Bool)
(assert (forall ((y_3 Nat_0))
	(add_0 y_3 Z_2 y_3)))
(assert (forall ((r_1 Nat_0) (x_21 Nat_0) (y_3 Nat_0))
	(=> (add_0 r_1 x_21 y_3)
	    (add_0 (Z_3 r_1) (Z_3 x_21) y_3))))
(assert (forall ((y_3 Nat_0))
	(minus_0 Z_2 Z_2 y_3)))
(assert (forall ((r_1 Nat_0) (x_21 Nat_0) (y_3 Nat_0))
	(=> (minus_0 r_1 x_21 y_3)
	    (minus_0 (Z_3 r_1) (Z_3 x_21) y_3))))
(assert (forall ((y_3 Nat_0))
	(le_0 Z_2 y_3)))
(assert (forall ((x_21 Nat_0) (y_3 Nat_0))
	(=> (le_0 x_21 y_3)
	    (le_0 (Z_3 x_21) (Z_3 y_3)))))
(assert (forall ((y_3 Nat_0))
	(ge_0 y_3 Z_2)))
(assert (forall ((x_21 Nat_0) (y_3 Nat_0))
	(=> (ge_0 x_21 y_3)
	    (ge_0 (Z_3 x_21) (Z_3 y_3)))))
(assert (forall ((y_3 Nat_0))
	(lt_0 Z_2 (Z_3 y_3))))
(assert (forall ((x_21 Nat_0) (y_3 Nat_0))
	(=> (lt_0 x_21 y_3)
	    (lt_0 (Z_3 x_21) (Z_3 y_3)))))
(assert (forall ((y_3 Nat_0))
	(gt_0 (Z_3 y_3) Z_2)))
(assert (forall ((x_21 Nat_0) (y_3 Nat_0))
	(=> (gt_0 x_21 y_3)
	    (gt_0 (Z_3 x_21) (Z_3 y_3)))))
(assert (forall ((y_3 Nat_0))
	(mult_0 Z_2 Z_2 y_3)))
(assert (forall ((r_1 Nat_0) (x_21 Nat_0) (y_3 Nat_0) (z_4 Nat_0))
	(=>	(and (mult_0 r_1 x_21 y_3)
			(add_0 z_4 r_1 y_3))
		(mult_0 z_4 (Z_3 x_21) y_3))))
(assert (forall ((x_21 Nat_0) (y_3 Nat_0))
	(=> (lt_0 x_21 y_3)
	    (div_0 Z_2 x_21 y_3))))
(assert (forall ((r_1 Nat_0) (x_21 Nat_0) (y_3 Nat_0) (z_4 Nat_0))
	(=>	(and (ge_0 x_21 y_3)
			(minus_0 z_4 x_21 y_3)
			(div_0 r_1 z_4 y_3))
		(div_0 (Z_3 r_1) x_21 y_3))))
(assert (forall ((x_21 Nat_0) (y_3 Nat_0))
	(=> (lt_0 x_21 y_3)
	    (mod_0 x_21 x_21 y_3))))
(assert (forall ((r_1 Nat_0) (x_21 Nat_0) (y_3 Nat_0) (z_4 Nat_0))
	(=>	(and (ge_0 x_21 y_3)
			(minus_0 z_4 x_21 y_3)
			(mod_0 r_1 z_4 y_3))
		(mod_0 r_1 x_21 y_3))))
(declare-datatypes ((list_0 0)) (((nil_0 ) (cons_0 (head_0 Nat_0) (tail_0 list_0)))))
(declare-fun diseqlist_0 (list_0 list_0) Bool)
(declare-fun head_1 (Nat_0 list_0) Bool)
(declare-fun tail_1 (list_0 list_0) Bool)
(declare-fun isnil_0 (list_0) Bool)
(declare-fun iscons_0 (list_0) Bool)
(assert (forall ((x_23 Nat_0) (x_24 list_0))
	(head_1 x_23 (cons_0 x_23 x_24))))
(assert (forall ((x_23 Nat_0) (x_24 list_0))
	(tail_1 x_24 (cons_0 x_23 x_24))))
(assert (isnil_0 nil_0))
(assert (forall ((x_26 Nat_0) (x_27 list_0))
	(iscons_0 (cons_0 x_26 x_27))))
(assert (forall ((x_28 Nat_0) (x_29 list_0))
	(diseqlist_0 nil_0 (cons_0 x_28 x_29))))
(assert (forall ((x_30 Nat_0) (x_31 list_0))
	(diseqlist_0 (cons_0 x_30 x_31) nil_0)))
(assert (forall ((x_32 Nat_0) (x_33 list_0) (x_34 Nat_0) (x_35 list_0))
	(=> (diseqNat_0 x_32 x_34)
	    (diseqlist_0 (cons_0 x_32 x_33) (cons_0 x_34 x_35)))))
(assert (forall ((x_32 Nat_0) (x_33 list_0) (x_34 Nat_0) (x_35 list_0))
	(=> (diseqlist_0 x_33 x_35)
	    (diseqlist_0 (cons_0 x_32 x_33) (cons_0 x_34 x_35)))))
(declare-datatypes ((Tree_0 0)) (((Node_0 (projNode_0 Tree_0) (projNode_1 Nat_0) (projNode_2 Tree_0)) (Nil_1 ))))
(declare-fun diseqTree_0 (Tree_0 Tree_0) Bool)
(declare-fun projNode_3 (Tree_0 Tree_0) Bool)
(declare-fun projNode_4 (Nat_0 Tree_0) Bool)
(declare-fun projNode_5 (Tree_0 Tree_0) Bool)
(declare-fun isNode_0 (Tree_0) Bool)
(declare-fun isNil_1 (Tree_0) Bool)
(assert (forall ((x_36 Tree_0) (x_37 Nat_0) (x_38 Tree_0))
	(projNode_3 x_36 (Node_0 x_36 x_37 x_38))))
(assert (forall ((x_36 Tree_0) (x_37 Nat_0) (x_38 Tree_0))
	(projNode_4 x_37 (Node_0 x_36 x_37 x_38))))
(assert (forall ((x_36 Tree_0) (x_37 Nat_0) (x_38 Tree_0))
	(projNode_5 x_38 (Node_0 x_36 x_37 x_38))))
(assert (forall ((x_41 Tree_0) (x_42 Nat_0) (x_43 Tree_0))
	(isNode_0 (Node_0 x_41 x_42 x_43))))
(assert (isNil_1 Nil_1))
(assert (forall ((x_44 Tree_0) (x_45 Nat_0) (x_46 Tree_0))
	(diseqTree_0 (Node_0 x_44 x_45 x_46) Nil_1)))
(assert (forall ((x_47 Tree_0) (x_48 Nat_0) (x_49 Tree_0))
	(diseqTree_0 Nil_1 (Node_0 x_47 x_48 x_49))))
(assert (forall ((x_50 Tree_0) (x_51 Nat_0) (x_52 Tree_0) (x_53 Tree_0) (x_54 Nat_0) (x_55 Tree_0))
	(=> (diseqTree_0 x_50 x_53)
	    (diseqTree_0 (Node_0 x_50 x_51 x_52) (Node_0 x_53 x_54 x_55)))))
(assert (forall ((x_50 Tree_0) (x_51 Nat_0) (x_52 Tree_0) (x_53 Tree_0) (x_54 Nat_0) (x_55 Tree_0))
	(=> (diseqNat_0 x_51 x_54)
	    (diseqTree_0 (Node_0 x_50 x_51 x_52) (Node_0 x_53 x_54 x_55)))))
(assert (forall ((x_50 Tree_0) (x_51 Nat_0) (x_52 Tree_0) (x_53 Tree_0) (x_54 Nat_0) (x_55 Tree_0))
	(=> (diseqTree_0 x_52 x_55)
	    (diseqTree_0 (Node_0 x_50 x_51 x_52) (Node_0 x_53 x_54 x_55)))))
(declare-fun flatten_0 (list_0 Tree_0) Bool)
(assert (flatten_0 nil_0 Nil_1))
(assert (forall ((x_7 list_0) (z_0 Nat_0) (r_0 Tree_0))
	(=> (flatten_0 x_7 r_0)
	    (flatten_0 (cons_0 z_0 x_7) (Node_0 Nil_1 z_0 r_0)))))
(assert (forall ((x_8 list_0) (p_0 Tree_0) (x_1 Nat_0) (q_0 Tree_0) (z_0 Nat_0) (r_0 Tree_0))
	(=> (flatten_0 x_8 (Node_0 p_0 x_1 (Node_0 q_0 z_0 r_0)))
	    (flatten_0 x_8 (Node_0 (Node_0 p_0 x_1 q_0) z_0 r_0)))))
(declare-fun x_2 (list_0 list_0 list_0) Bool)
(assert (forall ((x_11 list_0) (z_1 Nat_0) (xs_0 list_0) (y_1 list_0))
	(=> (x_2 x_11 xs_0 y_1)
	    (x_2 (cons_0 z_1 x_11) (cons_0 z_1 xs_0) y_1))))
(assert (forall ((x_12 list_0))
	(x_2 x_12 nil_0 x_12)))
(declare-fun flatten_1 (list_0 Tree_0) Bool)
(assert (flatten_1 nil_0 Nil_1))
(assert (forall ((x_14 list_0) (x_15 list_0) (x_16 list_0) (x_17 list_0) (p_1 Tree_0) (y_2 Nat_0) (q_1 Tree_0))
	(=>	(and (flatten_1 x_15 p_1)
			(flatten_1 x_16 q_1)
			(x_2 x_17 (cons_0 y_2 nil_0) x_16)
			(x_2 x_14 x_15 x_17))
		(flatten_1 x_14 (Node_0 p_1 y_2 q_1)))))
(assert (forall ((x_19 list_0) (x_20 list_0) (p_2 Tree_0))
	(=>	(and (diseqlist_0 x_19 x_20)
			(flatten_0 x_19 p_2)
			(flatten_1 x_20 p_2))
		false)))
(check-sat)
