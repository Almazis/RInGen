(set-logic HORN)
(declare-datatypes ((Bool_0 0)) (((false_0 ) (true_0 ))))
(declare-fun diseqBool_0 (Bool_0 Bool_0) Bool)
(declare-fun isfalse_1 (Bool_0) Bool)
(declare-fun istrue_1 (Bool_0) Bool)
(assert (isfalse_1 false_0))
(assert (istrue_1 true_0))
(assert (diseqBool_0 false_0 true_0))
(assert (diseqBool_0 true_0 false_0))
(declare-fun and_0 (Bool_0 Bool_0 Bool_0) Bool)
(declare-fun or_0 (Bool_0 Bool_0 Bool_0) Bool)
(declare-fun hence_0 (Bool_0 Bool_0 Bool_0) Bool)
(declare-fun not_0 (Bool_0 Bool_0) Bool)
(assert (and_0 false_0 false_0 false_0))
(assert (and_0 false_0 true_0 false_0))
(assert (and_0 false_0 false_0 true_0))
(assert (and_0 true_0 true_0 true_0))
(assert (or_0 false_0 false_0 false_0))
(assert (or_0 true_0 true_0 false_0))
(assert (or_0 true_0 false_0 true_0))
(assert (or_0 true_0 true_0 true_0))
(assert (hence_0 true_0 false_0 false_0))
(assert (hence_0 false_0 true_0 false_0))
(assert (hence_0 true_0 false_0 true_0))
(assert (hence_0 true_0 true_0 true_0))
(assert (not_0 true_0 false_0))
(assert (not_0 false_0 true_0))
(declare-datatypes ((Nat_0 0)) (((zero_0 ) (succ_0 (p_0 Nat_0)))))
(declare-fun diseqNat_0 (Nat_0 Nat_0) Bool)
(declare-fun p_1 (Nat_0 Nat_0) Bool)
(declare-fun iszero_0 (Nat_0) Bool)
(declare-fun issucc_0 (Nat_0) Bool)
(assert (forall ((x_31 Nat_0))
	(p_1 x_31 (succ_0 x_31))))
(assert (iszero_0 zero_0))
(assert (forall ((x_33 Nat_0))
	(issucc_0 (succ_0 x_33))))
(assert (forall ((x_34 Nat_0))
	(diseqNat_0 zero_0 (succ_0 x_34))))
(assert (forall ((x_35 Nat_0))
	(diseqNat_0 (succ_0 x_35) zero_0)))
(assert (forall ((x_36 Nat_0) (x_37 Nat_0))
	(=> (diseqNat_0 x_36 x_37)
	    (diseqNat_0 (succ_0 x_36) (succ_0 x_37)))))
(declare-datatypes ((list_0 0)) (((nil_0 ) (cons_0 (head_0 Nat_0) (tail_0 list_0)))))
(declare-fun diseqlist_0 (list_0 list_0) Bool)
(declare-fun head_1 (Nat_0 list_0) Bool)
(declare-fun tail_1 (list_0 list_0) Bool)
(declare-fun isnil_0 (list_0) Bool)
(declare-fun iscons_0 (list_0) Bool)
(assert (forall ((x_39 Nat_0) (x_40 list_0))
	(head_1 x_39 (cons_0 x_39 x_40))))
(assert (forall ((x_39 Nat_0) (x_40 list_0))
	(tail_1 x_40 (cons_0 x_39 x_40))))
(assert (isnil_0 nil_0))
(assert (forall ((x_42 Nat_0) (x_43 list_0))
	(iscons_0 (cons_0 x_42 x_43))))
(assert (forall ((x_44 Nat_0) (x_45 list_0))
	(diseqlist_0 nil_0 (cons_0 x_44 x_45))))
(assert (forall ((x_46 Nat_0) (x_47 list_0))
	(diseqlist_0 (cons_0 x_46 x_47) nil_0)))
(assert (forall ((x_48 Nat_0) (x_49 list_0) (x_50 Nat_0) (x_51 list_0))
	(=> (diseqNat_0 x_48 x_50)
	    (diseqlist_0 (cons_0 x_48 x_49) (cons_0 x_50 x_51)))))
(assert (forall ((x_48 Nat_0) (x_49 list_0) (x_50 Nat_0) (x_51 list_0))
	(=> (diseqlist_0 x_49 x_51)
	    (diseqlist_0 (cons_0 x_48 x_49) (cons_0 x_50 x_51)))))
(declare-fun leq_0 (Bool_0 Nat_0 Nat_0) Bool)
(assert (forall ((x_5 Bool_0) (x_1 Nat_0) (z_0 Nat_0))
	(=> (leq_0 x_5 z_0 x_1)
	    (leq_0 x_5 (succ_0 z_0) (succ_0 x_1)))))
(assert (forall ((z_0 Nat_0))
	(leq_0 false_0 (succ_0 z_0) zero_0)))
(assert (forall ((y_0 Nat_0))
	(leq_0 true_0 zero_0 y_0)))
(declare-fun ordered_0 (Bool_0 list_0) Bool)
(assert (forall ((x_26 Bool_0) (x_10 Bool_0) (x_11 Bool_0) (y_2 Nat_0) (xs_0 list_0) (y_1 Nat_0))
	(=>	(and (leq_0 x_10 y_1 y_2)
			(ordered_0 x_11 (cons_0 y_2 xs_0))
			(and_0 x_26 x_10 x_11))
		(ordered_0 x_26 (cons_0 y_1 (cons_0 y_2 xs_0))))))
(assert (forall ((y_1 Nat_0))
	(ordered_0 true_0 (cons_0 y_1 nil_0))))
(assert (ordered_0 true_0 nil_0))
(declare-fun insert_0 (list_0 Nat_0 list_0) Bool)
(assert (forall ((z_2 Nat_0) (xs_1 list_0) (x_3 Nat_0))
	(=> (leq_0 true_0 x_3 z_2)
	    (insert_0 (cons_0 x_3 (cons_0 z_2 xs_1)) x_3 (cons_0 z_2 xs_1)))))
(assert (forall ((x_18 list_0) (x_16 Bool_0) (z_2 Nat_0) (xs_1 list_0) (x_3 Nat_0))
	(=>	(and (diseqBool_0 x_16 true_0)
			(insert_0 x_18 x_3 xs_1)
			(leq_0 x_16 x_3 z_2))
		(insert_0 (cons_0 z_2 x_18) x_3 (cons_0 z_2 xs_1)))))
(assert (forall ((x_3 Nat_0))
	(insert_0 (cons_0 x_3 nil_0) x_3 nil_0)))
(declare-fun isort_0 (list_0 list_0) Bool)
(assert (forall ((x_20 list_0) (x_21 list_0) (y_4 Nat_0) (xs_2 list_0))
	(=>	(and (isort_0 x_21 xs_2)
			(insert_0 x_20 y_4 x_21))
		(isort_0 x_20 (cons_0 y_4 xs_2)))))
(assert (isort_0 nil_0 nil_0))
(assert (forall ((x_24 list_0) (x_25 Bool_0) (xs_3 list_0))
	(=>	(and (diseqBool_0 x_25 true_0)
			(isort_0 x_24 xs_3)
			(ordered_0 x_25 x_24))
		false)))
(check-sat)
