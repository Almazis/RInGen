(set-logic HORN)
(declare-datatypes ((Bool_0 0)) (((false_0 ) (true_0 ))))
(declare-fun diseqBool_0 (Bool_0 Bool_0) Bool)
(declare-fun isfalse_1 (Bool_0) Bool)
(declare-fun istrue_1 (Bool_0) Bool)
(assert (isfalse_1 false_0))
(assert (istrue_1 true_0))
(assert (diseqBool_0 false_0 true_0))
(assert (diseqBool_0 true_0 false_0))
(declare-fun and_0 (Bool_0 Bool_0 Bool_0) Bool)
(declare-fun or_0 (Bool_0 Bool_0 Bool_0) Bool)
(declare-fun hence_0 (Bool_0 Bool_0 Bool_0) Bool)
(declare-fun not_0 (Bool_0 Bool_0) Bool)
(assert (and_0 false_0 false_0 false_0))
(assert (and_0 false_0 true_0 false_0))
(assert (and_0 false_0 false_0 true_0))
(assert (and_0 true_0 true_0 true_0))
(assert (or_0 false_0 false_0 false_0))
(assert (or_0 true_0 true_0 false_0))
(assert (or_0 true_0 false_0 true_0))
(assert (or_0 true_0 true_0 true_0))
(assert (hence_0 true_0 false_0 false_0))
(assert (hence_0 false_0 true_0 false_0))
(assert (hence_0 true_0 false_0 true_0))
(assert (hence_0 true_0 true_0 true_0))
(assert (not_0 true_0 false_0))
(assert (not_0 false_0 true_0))
(declare-datatypes ((Nat_0 0)) (((zero_0 ) (succ_0 (p_0 Nat_0)))))
(declare-fun diseqNat_0 (Nat_0 Nat_0) Bool)
(declare-fun p_1 (Nat_0 Nat_0) Bool)
(declare-fun iszero_0 (Nat_0) Bool)
(declare-fun issucc_0 (Nat_0) Bool)
(assert (forall ((x_68 Nat_0))
	(p_1 x_68 (succ_0 x_68))))
(assert (iszero_0 zero_0))
(assert (forall ((x_70 Nat_0))
	(issucc_0 (succ_0 x_70))))
(assert (forall ((x_71 Nat_0))
	(diseqNat_0 zero_0 (succ_0 x_71))))
(assert (forall ((x_72 Nat_0))
	(diseqNat_0 (succ_0 x_72) zero_0)))
(assert (forall ((x_73 Nat_0) (x_74 Nat_0))
	(=> (diseqNat_0 x_73 x_74)
	    (diseqNat_0 (succ_0 x_73) (succ_0 x_74)))))
(declare-datatypes ((list_0 0)) (((nil_0 ) (cons_0 (head_0 Nat_0) (tail_0 list_0)))))
(declare-fun diseqlist_0 (list_0 list_0) Bool)
(declare-fun head_2 (Nat_0 list_0) Bool)
(declare-fun tail_2 (list_0 list_0) Bool)
(declare-fun isnil_0 (list_0) Bool)
(declare-fun iscons_0 (list_0) Bool)
(assert (forall ((x_76 Nat_0) (x_77 list_0))
	(head_2 x_76 (cons_0 x_76 x_77))))
(assert (forall ((x_76 Nat_0) (x_77 list_0))
	(tail_2 x_77 (cons_0 x_76 x_77))))
(assert (isnil_0 nil_0))
(assert (forall ((x_79 Nat_0) (x_80 list_0))
	(iscons_0 (cons_0 x_79 x_80))))
(assert (forall ((x_81 Nat_0) (x_82 list_0))
	(diseqlist_0 nil_0 (cons_0 x_81 x_82))))
(assert (forall ((x_83 Nat_0) (x_84 list_0))
	(diseqlist_0 (cons_0 x_83 x_84) nil_0)))
(assert (forall ((x_85 Nat_0) (x_86 list_0) (x_87 Nat_0) (x_88 list_0))
	(=> (diseqNat_0 x_85 x_87)
	    (diseqlist_0 (cons_0 x_85 x_86) (cons_0 x_87 x_88)))))
(assert (forall ((x_85 Nat_0) (x_86 list_0) (x_87 Nat_0) (x_88 list_0))
	(=> (diseqlist_0 x_86 x_88)
	    (diseqlist_0 (cons_0 x_85 x_86) (cons_0 x_87 x_88)))))
(declare-datatypes ((Heap_0 0)) (((Node_0 (projNode_0 Heap_0) (projNode_1 Nat_0) (projNode_2 Heap_0)) (Nil_1 ))))
(declare-fun diseqHeap_0 (Heap_0 Heap_0) Bool)
(declare-fun projNode_3 (Heap_0 Heap_0) Bool)
(declare-fun projNode_4 (Nat_0 Heap_0) Bool)
(declare-fun projNode_5 (Heap_0 Heap_0) Bool)
(declare-fun isNode_0 (Heap_0) Bool)
(declare-fun isNil_1 (Heap_0) Bool)
(assert (forall ((x_89 Heap_0) (x_90 Nat_0) (x_91 Heap_0))
	(projNode_3 x_89 (Node_0 x_89 x_90 x_91))))
(assert (forall ((x_89 Heap_0) (x_90 Nat_0) (x_91 Heap_0))
	(projNode_4 x_90 (Node_0 x_89 x_90 x_91))))
(assert (forall ((x_89 Heap_0) (x_90 Nat_0) (x_91 Heap_0))
	(projNode_5 x_91 (Node_0 x_89 x_90 x_91))))
(assert (forall ((x_94 Heap_0) (x_95 Nat_0) (x_96 Heap_0))
	(isNode_0 (Node_0 x_94 x_95 x_96))))
(assert (isNil_1 Nil_1))
(assert (forall ((x_97 Heap_0) (x_98 Nat_0) (x_99 Heap_0))
	(diseqHeap_0 (Node_0 x_97 x_98 x_99) Nil_1)))
(assert (forall ((x_100 Heap_0) (x_101 Nat_0) (x_102 Heap_0))
	(diseqHeap_0 Nil_1 (Node_0 x_100 x_101 x_102))))
(assert (forall ((x_103 Heap_0) (x_104 Nat_0) (x_105 Heap_0) (x_106 Heap_0) (x_107 Nat_0) (x_108 Heap_0))
	(=> (diseqHeap_0 x_103 x_106)
	    (diseqHeap_0 (Node_0 x_103 x_104 x_105) (Node_0 x_106 x_107 x_108)))))
(assert (forall ((x_103 Heap_0) (x_104 Nat_0) (x_105 Heap_0) (x_106 Heap_0) (x_107 Nat_0) (x_108 Heap_0))
	(=> (diseqNat_0 x_104 x_107)
	    (diseqHeap_0 (Node_0 x_103 x_104 x_105) (Node_0 x_106 x_107 x_108)))))
(assert (forall ((x_103 Heap_0) (x_104 Nat_0) (x_105 Heap_0) (x_106 Heap_0) (x_107 Nat_0) (x_108 Heap_0))
	(=> (diseqHeap_0 x_105 x_108)
	    (diseqHeap_0 (Node_0 x_103 x_104 x_105) (Node_0 x_106 x_107 x_108)))))
(declare-datatypes ((list_1 0)) (((nil_2 ) (cons_1 (head_1 Heap_0) (tail_1 list_1)))))
(declare-fun diseqlist_1 (list_1 list_1) Bool)
(declare-fun head_3 (Heap_0 list_1) Bool)
(declare-fun tail_3 (list_1 list_1) Bool)
(declare-fun isnil_2 (list_1) Bool)
(declare-fun iscons_1 (list_1) Bool)
(assert (forall ((x_110 Heap_0) (x_111 list_1))
	(head_3 x_110 (cons_1 x_110 x_111))))
(assert (forall ((x_110 Heap_0) (x_111 list_1))
	(tail_3 x_111 (cons_1 x_110 x_111))))
(assert (isnil_2 nil_2))
(assert (forall ((x_113 Heap_0) (x_114 list_1))
	(iscons_1 (cons_1 x_113 x_114))))
(assert (forall ((x_115 Heap_0) (x_116 list_1))
	(diseqlist_1 nil_2 (cons_1 x_115 x_116))))
(assert (forall ((x_117 Heap_0) (x_118 list_1))
	(diseqlist_1 (cons_1 x_117 x_118) nil_2)))
(assert (forall ((x_119 Heap_0) (x_120 list_1) (x_121 Heap_0) (x_122 list_1))
	(=> (diseqHeap_0 x_119 x_121)
	    (diseqlist_1 (cons_1 x_119 x_120) (cons_1 x_121 x_122)))))
(assert (forall ((x_119 Heap_0) (x_120 list_1) (x_121 Heap_0) (x_122 list_1))
	(=> (diseqlist_1 x_120 x_122)
	    (diseqlist_1 (cons_1 x_119 x_120) (cons_1 x_121 x_122)))))
(declare-fun toHeap_0 (list_1 list_0) Bool)
(assert (forall ((x_18 list_1) (y_0 Nat_0) (z_0 list_0))
	(=> (toHeap_0 x_18 z_0)
	    (toHeap_0 (cons_1 (Node_0 Nil_1 y_0 Nil_1) x_18) (cons_0 y_0 z_0)))))
(assert (toHeap_0 nil_2 nil_0))
(declare-fun leq_0 (Bool_0 Nat_0 Nat_0) Bool)
(assert (forall ((x_20 Bool_0) (x_2 Nat_0) (z_1 Nat_0))
	(=> (leq_0 x_20 z_1 x_2)
	    (leq_0 x_20 (succ_0 z_1) (succ_0 x_2)))))
(assert (forall ((z_1 Nat_0))
	(leq_0 false_0 (succ_0 z_1) zero_0)))
(assert (forall ((y_1 Nat_0))
	(leq_0 true_0 zero_0 y_1)))
(declare-fun insert_0 (list_0 Nat_0 list_0) Bool)
(assert (forall ((z_2 Nat_0) (xs_0 list_0) (x_3 Nat_0))
	(=> (leq_0 true_0 x_3 z_2)
	    (insert_0 (cons_0 x_3 (cons_0 z_2 xs_0)) x_3 (cons_0 z_2 xs_0)))))
(assert (forall ((x_28 list_0) (x_26 Bool_0) (z_2 Nat_0) (xs_0 list_0) (x_3 Nat_0))
	(=>	(and (diseqBool_0 x_26 true_0)
			(insert_0 x_28 x_3 xs_0)
			(leq_0 x_26 x_3 z_2))
		(insert_0 (cons_0 z_2 x_28) x_3 (cons_0 z_2 xs_0)))))
(assert (forall ((x_3 Nat_0))
	(insert_0 (cons_0 x_3 nil_0) x_3 nil_0)))
(declare-fun isort_0 (list_0 list_0) Bool)
(assert (forall ((x_30 list_0) (x_31 list_0) (y_3 Nat_0) (xs_1 list_0))
	(=>	(and (isort_0 x_31 xs_1)
			(insert_0 x_30 y_3 x_31))
		(isort_0 x_30 (cons_0 y_3 xs_1)))))
(assert (isort_0 nil_0 nil_0))
(declare-fun hmerge_0 (Heap_0 Heap_0 Heap_0) Bool)
(assert (forall ((x_34 Heap_0))
	(hmerge_0 x_34 Nil_1 x_34)))
(assert (forall ((z_3 Heap_0) (x_6 Nat_0) (x_7 Heap_0))
	(hmerge_0 (Node_0 z_3 x_6 x_7) (Node_0 z_3 x_6 x_7) Nil_1)))
(assert (forall ((x_38 Heap_0) (x_8 Heap_0) (x_9 Nat_0) (x_10 Heap_0) (z_3 Heap_0) (x_6 Nat_0) (x_7 Heap_0))
	(=>	(and (hmerge_0 x_38 x_7 (Node_0 x_8 x_9 x_10))
			(leq_0 true_0 x_6 x_9))
		(hmerge_0 (Node_0 x_38 x_6 z_3) (Node_0 z_3 x_6 x_7) (Node_0 x_8 x_9 x_10)))))
(assert (forall ((x_41 Heap_0) (x_39 Bool_0) (x_8 Heap_0) (x_9 Nat_0) (x_10 Heap_0) (z_3 Heap_0) (x_6 Nat_0) (x_7 Heap_0))
	(=>	(and (diseqBool_0 x_39 true_0)
			(hmerge_0 x_41 (Node_0 z_3 x_6 x_7) x_10)
			(leq_0 x_39 x_6 x_9))
		(hmerge_0 (Node_0 x_41 x_9 x_8) (Node_0 z_3 x_6 x_7) (Node_0 x_8 x_9 x_10)))))
(declare-fun hpairwise_0 (list_1 list_1) Bool)
(assert (forall ((x_43 Heap_0) (x_44 list_1) (r_0 Heap_0) (qs_0 list_1) (q_0 Heap_0))
	(=>	(and (hmerge_0 x_43 q_0 r_0)
			(hpairwise_0 x_44 qs_0))
		(hpairwise_0 (cons_1 x_43 x_44) (cons_1 q_0 (cons_1 r_0 qs_0))))))
(assert (forall ((q_0 Heap_0))
	(hpairwise_0 (cons_1 q_0 nil_2) (cons_1 q_0 nil_2))))
(assert (hpairwise_0 nil_2 nil_2))
(declare-fun hmerging_0 (Heap_0 list_1) Bool)
(assert (forall ((x_47 Heap_0) (x_48 list_1) (z_4 Heap_0) (x_13 list_1) (q_1 Heap_0))
	(=>	(and (hpairwise_0 x_48 (cons_1 q_1 (cons_1 z_4 x_13)))
			(hmerging_0 x_47 x_48))
		(hmerging_0 x_47 (cons_1 q_1 (cons_1 z_4 x_13))))))
(assert (forall ((q_1 Heap_0))
	(hmerging_0 q_1 (cons_1 q_1 nil_2))))
(assert (hmerging_0 Nil_1 nil_2))
(declare-fun toHeap_1 (Heap_0 list_0) Bool)
(assert (forall ((x_52 Heap_0) (x_53 list_1) (x_14 list_0))
	(=>	(and (toHeap_0 x_53 x_14)
			(hmerging_0 x_52 x_53))
		(toHeap_1 x_52 x_14))))
(declare-fun toList_0 (list_0 Heap_0) Bool)
(assert (toList_0 nil_0 Nil_1))
(assert (forall ((x_57 Heap_0) (x_58 list_0) (q_2 Heap_0) (y_7 Nat_0) (r_1 Heap_0))
	(=>	(and (hmerge_0 x_57 q_2 r_1)
			(toList_0 x_58 x_57))
		(toList_0 (cons_0 y_7 x_58) (Node_0 q_2 y_7 r_1)))))
(declare-fun hsort_0 (list_0 list_0) Bool)
(assert (forall ((x_59 list_0) (x_60 Heap_0) (x_16 list_0))
	(=>	(and (toHeap_1 x_60 x_16)
			(toList_0 x_59 x_60))
		(hsort_0 x_59 x_16))))
(assert (forall ((x_62 list_0) (x_63 list_0) (xs_2 list_0))
	(=>	(and (diseqlist_0 x_62 x_63)
			(hsort_0 x_62 xs_2)
			(isort_0 x_63 xs_2))
		false)))
(check-sat)
