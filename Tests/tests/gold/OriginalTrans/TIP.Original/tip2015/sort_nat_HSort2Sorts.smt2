(set-logic HORN)
(declare-datatypes ((Bool_0 0)) (((false_0 ) (true_0 ))))
(declare-fun diseqBool_0 (Bool_0 Bool_0) Bool)
(declare-fun isfalse_1 (Bool_0) Bool)
(declare-fun istrue_1 (Bool_0) Bool)
(assert (isfalse_1 false_0))
(assert (istrue_1 true_0))
(assert (diseqBool_0 false_0 true_0))
(assert (diseqBool_0 true_0 false_0))
(declare-fun and_0 (Bool_0 Bool_0 Bool_0) Bool)
(declare-fun or_0 (Bool_0 Bool_0 Bool_0) Bool)
(declare-fun hence_0 (Bool_0 Bool_0 Bool_0) Bool)
(declare-fun not_0 (Bool_0 Bool_0) Bool)
(assert (and_0 false_0 false_0 false_0))
(assert (and_0 false_0 true_0 false_0))
(assert (and_0 false_0 false_0 true_0))
(assert (and_0 true_0 true_0 true_0))
(assert (or_0 false_0 false_0 false_0))
(assert (or_0 true_0 true_0 false_0))
(assert (or_0 true_0 false_0 true_0))
(assert (or_0 true_0 true_0 true_0))
(assert (hence_0 true_0 false_0 false_0))
(assert (hence_0 false_0 true_0 false_0))
(assert (hence_0 true_0 false_0 true_0))
(assert (hence_0 true_0 true_0 true_0))
(assert (not_0 true_0 false_0))
(assert (not_0 false_0 true_0))
(declare-datatypes ((Nat_0 0)) (((zero_0 ) (succ_0 (p_0 Nat_0)))))
(declare-fun diseqNat_0 (Nat_0 Nat_0) Bool)
(declare-fun p_1 (Nat_0 Nat_0) Bool)
(declare-fun iszero_0 (Nat_0) Bool)
(declare-fun issucc_0 (Nat_0) Bool)
(assert (forall ((x_50 Nat_0))
	(p_1 x_50 (succ_0 x_50))))
(assert (iszero_0 zero_0))
(assert (forall ((x_52 Nat_0))
	(issucc_0 (succ_0 x_52))))
(assert (forall ((x_53 Nat_0))
	(diseqNat_0 zero_0 (succ_0 x_53))))
(assert (forall ((x_54 Nat_0))
	(diseqNat_0 (succ_0 x_54) zero_0)))
(assert (forall ((x_55 Nat_0) (x_56 Nat_0))
	(=> (diseqNat_0 x_55 x_56)
	    (diseqNat_0 (succ_0 x_55) (succ_0 x_56)))))
(declare-datatypes ((list_0 0)) (((nil_0 ) (cons_0 (head_0 Nat_0) (tail_0 list_0)))))
(declare-fun diseqlist_0 (list_0 list_0) Bool)
(declare-fun head_1 (Nat_0 list_0) Bool)
(declare-fun tail_1 (list_0 list_0) Bool)
(declare-fun isnil_0 (list_0) Bool)
(declare-fun iscons_0 (list_0) Bool)
(assert (forall ((x_58 Nat_0) (x_59 list_0))
	(head_1 x_58 (cons_0 x_58 x_59))))
(assert (forall ((x_58 Nat_0) (x_59 list_0))
	(tail_1 x_59 (cons_0 x_58 x_59))))
(assert (isnil_0 nil_0))
(assert (forall ((x_61 Nat_0) (x_62 list_0))
	(iscons_0 (cons_0 x_61 x_62))))
(assert (forall ((x_63 Nat_0) (x_64 list_0))
	(diseqlist_0 nil_0 (cons_0 x_63 x_64))))
(assert (forall ((x_65 Nat_0) (x_66 list_0))
	(diseqlist_0 (cons_0 x_65 x_66) nil_0)))
(assert (forall ((x_67 Nat_0) (x_68 list_0) (x_69 Nat_0) (x_70 list_0))
	(=> (diseqNat_0 x_67 x_69)
	    (diseqlist_0 (cons_0 x_67 x_68) (cons_0 x_69 x_70)))))
(assert (forall ((x_67 Nat_0) (x_68 list_0) (x_69 Nat_0) (x_70 list_0))
	(=> (diseqlist_0 x_68 x_70)
	    (diseqlist_0 (cons_0 x_67 x_68) (cons_0 x_69 x_70)))))
(declare-datatypes ((Heap_0 0)) (((Node_0 (projNode_0 Heap_0) (projNode_1 Nat_0) (projNode_2 Heap_0)) (Nil_1 ))))
(declare-fun diseqHeap_0 (Heap_0 Heap_0) Bool)
(declare-fun projNode_3 (Heap_0 Heap_0) Bool)
(declare-fun projNode_4 (Nat_0 Heap_0) Bool)
(declare-fun projNode_5 (Heap_0 Heap_0) Bool)
(declare-fun isNode_0 (Heap_0) Bool)
(declare-fun isNil_1 (Heap_0) Bool)
(assert (forall ((x_71 Heap_0) (x_72 Nat_0) (x_73 Heap_0))
	(projNode_3 x_71 (Node_0 x_71 x_72 x_73))))
(assert (forall ((x_71 Heap_0) (x_72 Nat_0) (x_73 Heap_0))
	(projNode_4 x_72 (Node_0 x_71 x_72 x_73))))
(assert (forall ((x_71 Heap_0) (x_72 Nat_0) (x_73 Heap_0))
	(projNode_5 x_73 (Node_0 x_71 x_72 x_73))))
(assert (forall ((x_76 Heap_0) (x_77 Nat_0) (x_78 Heap_0))
	(isNode_0 (Node_0 x_76 x_77 x_78))))
(assert (isNil_1 Nil_1))
(assert (forall ((x_79 Heap_0) (x_80 Nat_0) (x_81 Heap_0))
	(diseqHeap_0 (Node_0 x_79 x_80 x_81) Nil_1)))
(assert (forall ((x_82 Heap_0) (x_83 Nat_0) (x_84 Heap_0))
	(diseqHeap_0 Nil_1 (Node_0 x_82 x_83 x_84))))
(assert (forall ((x_85 Heap_0) (x_86 Nat_0) (x_87 Heap_0) (x_88 Heap_0) (x_89 Nat_0) (x_90 Heap_0))
	(=> (diseqHeap_0 x_85 x_88)
	    (diseqHeap_0 (Node_0 x_85 x_86 x_87) (Node_0 x_88 x_89 x_90)))))
(assert (forall ((x_85 Heap_0) (x_86 Nat_0) (x_87 Heap_0) (x_88 Heap_0) (x_89 Nat_0) (x_90 Heap_0))
	(=> (diseqNat_0 x_86 x_89)
	    (diseqHeap_0 (Node_0 x_85 x_86 x_87) (Node_0 x_88 x_89 x_90)))))
(assert (forall ((x_85 Heap_0) (x_86 Nat_0) (x_87 Heap_0) (x_88 Heap_0) (x_89 Nat_0) (x_90 Heap_0))
	(=> (diseqHeap_0 x_87 x_90)
	    (diseqHeap_0 (Node_0 x_85 x_86 x_87) (Node_0 x_88 x_89 x_90)))))
(declare-fun leq_0 (Bool_0 Nat_0 Nat_0) Bool)
(assert (forall ((x_13 Bool_0) (x_1 Nat_0) (z_0 Nat_0))
	(=> (leq_0 x_13 z_0 x_1)
	    (leq_0 x_13 (succ_0 z_0) (succ_0 x_1)))))
(assert (forall ((z_0 Nat_0))
	(leq_0 false_0 (succ_0 z_0) zero_0)))
(assert (forall ((y_0 Nat_0))
	(leq_0 true_0 zero_0 y_0)))
(declare-fun ordered_0 (Bool_0 list_0) Bool)
(assert (forall ((x_17 Bool_0) (x_18 Bool_0) (x_19 Bool_0) (y_2 Nat_0) (xs_0 list_0) (y_1 Nat_0))
	(=>	(and (leq_0 x_18 y_1 y_2)
			(ordered_0 x_19 (cons_0 y_2 xs_0))
			(and_0 x_17 x_18 x_19))
		(ordered_0 x_17 (cons_0 y_1 (cons_0 y_2 xs_0))))))
(assert (forall ((y_1 Nat_0))
	(ordered_0 true_0 (cons_0 y_1 nil_0))))
(assert (ordered_0 true_0 nil_0))
(declare-fun hmerge_0 (Heap_0 Heap_0 Heap_0) Bool)
(assert (forall ((x_22 Heap_0))
	(hmerge_0 x_22 Nil_1 x_22)))
(assert (forall ((z_2 Heap_0) (x_4 Nat_0) (x_5 Heap_0))
	(hmerge_0 (Node_0 z_2 x_4 x_5) (Node_0 z_2 x_4 x_5) Nil_1)))
(assert (forall ((x_26 Heap_0) (x_6 Heap_0) (x_7 Nat_0) (x_8 Heap_0) (z_2 Heap_0) (x_4 Nat_0) (x_5 Heap_0))
	(=>	(and (hmerge_0 x_26 x_5 (Node_0 x_6 x_7 x_8))
			(leq_0 true_0 x_4 x_7))
		(hmerge_0 (Node_0 x_26 x_4 z_2) (Node_0 z_2 x_4 x_5) (Node_0 x_6 x_7 x_8)))))
(assert (forall ((x_29 Heap_0) (x_27 Bool_0) (x_6 Heap_0) (x_7 Nat_0) (x_8 Heap_0) (z_2 Heap_0) (x_4 Nat_0) (x_5 Heap_0))
	(=>	(and (diseqBool_0 x_27 true_0)
			(hmerge_0 x_29 (Node_0 z_2 x_4 x_5) x_8)
			(leq_0 x_27 x_4 x_7))
		(hmerge_0 (Node_0 x_29 x_7 x_6) (Node_0 z_2 x_4 x_5) (Node_0 x_6 x_7 x_8)))))
(declare-fun toList_0 (list_0 Heap_0) Bool)
(assert (toList_0 nil_0 Nil_1))
(assert (forall ((x_32 Heap_0) (x_33 list_0) (q_0 Heap_0) (y_4 Nat_0) (r_0 Heap_0))
	(=>	(and (hmerge_0 x_32 q_0 r_0)
			(toList_0 x_33 x_32))
		(toList_0 (cons_0 y_4 x_33) (Node_0 q_0 y_4 r_0)))))
(declare-fun hinsert_0 (Heap_0 Nat_0 Heap_0) Bool)
(assert (forall ((x_34 Heap_0) (x_10 Nat_0) (y_5 Heap_0))
	(=> (hmerge_0 x_34 (Node_0 Nil_1 x_10 Nil_1) y_5)
	    (hinsert_0 x_34 x_10 y_5))))
(declare-fun toHeap_0 (Heap_0 list_0) Bool)
(assert (forall ((x_36 Heap_0) (x_37 Heap_0) (y_6 Nat_0) (xs_1 list_0))
	(=>	(and (toHeap_0 x_37 xs_1)
			(hinsert_0 x_36 y_6 x_37))
		(toHeap_0 x_36 (cons_0 y_6 xs_1)))))
(assert (toHeap_0 Nil_1 nil_0))
(declare-fun hsort_0 (list_0 list_0) Bool)
(assert (forall ((x_40 list_0) (x_41 Heap_0) (x_12 list_0))
	(=>	(and (toHeap_0 x_41 x_12)
			(toList_0 x_40 x_41))
		(hsort_0 x_40 x_12))))
(assert (forall ((x_43 list_0) (x_44 Bool_0) (xs_2 list_0))
	(=>	(and (diseqBool_0 x_44 true_0)
			(hsort_0 x_43 xs_2)
			(ordered_0 x_44 x_43))
		false)))
(check-sat)
