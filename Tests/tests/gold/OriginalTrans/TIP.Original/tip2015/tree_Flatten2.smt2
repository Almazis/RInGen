(set-logic HORN)
(declare-datatypes ((Nat_0 0)) (((Z_2 ) (Z_3 (unS_0 Nat_0)))))
(declare-fun diseqNat_0 (Nat_0 Nat_0) Bool)
(declare-fun unS_1 (Nat_0 Nat_0) Bool)
(declare-fun isZ_2 (Nat_0) Bool)
(declare-fun isZ_3 (Nat_0) Bool)
(assert (forall ((x_55 Nat_0))
	(unS_1 x_55 (Z_3 x_55))))
(assert (isZ_2 Z_2))
(assert (forall ((x_57 Nat_0))
	(isZ_3 (Z_3 x_57))))
(assert (forall ((x_58 Nat_0))
	(diseqNat_0 Z_2 (Z_3 x_58))))
(assert (forall ((x_59 Nat_0))
	(diseqNat_0 (Z_3 x_59) Z_2)))
(assert (forall ((x_60 Nat_0) (x_61 Nat_0))
	(=> (diseqNat_0 x_60 x_61)
	    (diseqNat_0 (Z_3 x_60) (Z_3 x_61)))))
(declare-fun add_0 (Nat_0 Nat_0 Nat_0) Bool)
(declare-fun minus_0 (Nat_0 Nat_0 Nat_0) Bool)
(declare-fun le_0 (Nat_0 Nat_0) Bool)
(declare-fun ge_0 (Nat_0 Nat_0) Bool)
(declare-fun lt_0 (Nat_0 Nat_0) Bool)
(declare-fun gt_0 (Nat_0 Nat_0) Bool)
(declare-fun mult_0 (Nat_0 Nat_0 Nat_0) Bool)
(declare-fun div_0 (Nat_0 Nat_0 Nat_0) Bool)
(declare-fun mod_0 (Nat_0 Nat_0 Nat_0) Bool)
(assert (forall ((y_3 Nat_0))
	(add_0 y_3 Z_2 y_3)))
(assert (forall ((r_0 Nat_0) (x_19 Nat_0) (y_3 Nat_0))
	(=> (add_0 r_0 x_19 y_3)
	    (add_0 (Z_3 r_0) (Z_3 x_19) y_3))))
(assert (forall ((y_3 Nat_0))
	(minus_0 Z_2 Z_2 y_3)))
(assert (forall ((r_0 Nat_0) (x_19 Nat_0) (y_3 Nat_0))
	(=> (minus_0 r_0 x_19 y_3)
	    (minus_0 (Z_3 r_0) (Z_3 x_19) y_3))))
(assert (forall ((y_3 Nat_0))
	(le_0 Z_2 y_3)))
(assert (forall ((x_19 Nat_0) (y_3 Nat_0))
	(=> (le_0 x_19 y_3)
	    (le_0 (Z_3 x_19) (Z_3 y_3)))))
(assert (forall ((y_3 Nat_0))
	(ge_0 y_3 Z_2)))
(assert (forall ((x_19 Nat_0) (y_3 Nat_0))
	(=> (ge_0 x_19 y_3)
	    (ge_0 (Z_3 x_19) (Z_3 y_3)))))
(assert (forall ((y_3 Nat_0))
	(lt_0 Z_2 (Z_3 y_3))))
(assert (forall ((x_19 Nat_0) (y_3 Nat_0))
	(=> (lt_0 x_19 y_3)
	    (lt_0 (Z_3 x_19) (Z_3 y_3)))))
(assert (forall ((y_3 Nat_0))
	(gt_0 (Z_3 y_3) Z_2)))
(assert (forall ((x_19 Nat_0) (y_3 Nat_0))
	(=> (gt_0 x_19 y_3)
	    (gt_0 (Z_3 x_19) (Z_3 y_3)))))
(assert (forall ((y_3 Nat_0))
	(mult_0 Z_2 Z_2 y_3)))
(assert (forall ((r_0 Nat_0) (x_19 Nat_0) (y_3 Nat_0) (z_4 Nat_0))
	(=>	(and (mult_0 r_0 x_19 y_3)
			(add_0 z_4 r_0 y_3))
		(mult_0 z_4 (Z_3 x_19) y_3))))
(assert (forall ((x_19 Nat_0) (y_3 Nat_0))
	(=> (lt_0 x_19 y_3)
	    (div_0 Z_2 x_19 y_3))))
(assert (forall ((r_0 Nat_0) (x_19 Nat_0) (y_3 Nat_0) (z_4 Nat_0))
	(=>	(and (ge_0 x_19 y_3)
			(minus_0 z_4 x_19 y_3)
			(div_0 r_0 z_4 y_3))
		(div_0 (Z_3 r_0) x_19 y_3))))
(assert (forall ((x_19 Nat_0) (y_3 Nat_0))
	(=> (lt_0 x_19 y_3)
	    (mod_0 x_19 x_19 y_3))))
(assert (forall ((r_0 Nat_0) (x_19 Nat_0) (y_3 Nat_0) (z_4 Nat_0))
	(=>	(and (ge_0 x_19 y_3)
			(minus_0 z_4 x_19 y_3)
			(mod_0 r_0 z_4 y_3))
		(mod_0 r_0 x_19 y_3))))
(declare-datatypes ((list_0 0)) (((nil_0 ) (cons_0 (head_0 Nat_0) (tail_0 list_0)))))
(declare-fun diseqlist_0 (list_0 list_0) Bool)
(declare-fun head_1 (Nat_0 list_0) Bool)
(declare-fun tail_1 (list_0 list_0) Bool)
(declare-fun isnil_0 (list_0) Bool)
(declare-fun iscons_0 (list_0) Bool)
(assert (forall ((x_21 Nat_0) (x_22 list_0))
	(head_1 x_21 (cons_0 x_21 x_22))))
(assert (forall ((x_21 Nat_0) (x_22 list_0))
	(tail_1 x_22 (cons_0 x_21 x_22))))
(assert (isnil_0 nil_0))
(assert (forall ((x_24 Nat_0) (x_25 list_0))
	(iscons_0 (cons_0 x_24 x_25))))
(assert (forall ((x_26 Nat_0) (x_27 list_0))
	(diseqlist_0 nil_0 (cons_0 x_26 x_27))))
(assert (forall ((x_28 Nat_0) (x_29 list_0))
	(diseqlist_0 (cons_0 x_28 x_29) nil_0)))
(assert (forall ((x_30 Nat_0) (x_31 list_0) (x_32 Nat_0) (x_33 list_0))
	(=> (diseqNat_0 x_30 x_32)
	    (diseqlist_0 (cons_0 x_30 x_31) (cons_0 x_32 x_33)))))
(assert (forall ((x_30 Nat_0) (x_31 list_0) (x_32 Nat_0) (x_33 list_0))
	(=> (diseqlist_0 x_31 x_33)
	    (diseqlist_0 (cons_0 x_30 x_31) (cons_0 x_32 x_33)))))
(declare-datatypes ((Tree_0 0)) (((Node_0 (projNode_0 Tree_0) (projNode_1 Nat_0) (projNode_2 Tree_0)) (Nil_1 ))))
(declare-fun diseqTree_0 (Tree_0 Tree_0) Bool)
(declare-fun projNode_3 (Tree_0 Tree_0) Bool)
(declare-fun projNode_4 (Nat_0 Tree_0) Bool)
(declare-fun projNode_5 (Tree_0 Tree_0) Bool)
(declare-fun isNode_0 (Tree_0) Bool)
(declare-fun isNil_1 (Tree_0) Bool)
(assert (forall ((x_34 Tree_0) (x_35 Nat_0) (x_36 Tree_0))
	(projNode_3 x_34 (Node_0 x_34 x_35 x_36))))
(assert (forall ((x_34 Tree_0) (x_35 Nat_0) (x_36 Tree_0))
	(projNode_4 x_35 (Node_0 x_34 x_35 x_36))))
(assert (forall ((x_34 Tree_0) (x_35 Nat_0) (x_36 Tree_0))
	(projNode_5 x_36 (Node_0 x_34 x_35 x_36))))
(assert (forall ((x_39 Tree_0) (x_40 Nat_0) (x_41 Tree_0))
	(isNode_0 (Node_0 x_39 x_40 x_41))))
(assert (isNil_1 Nil_1))
(assert (forall ((x_42 Tree_0) (x_43 Nat_0) (x_44 Tree_0))
	(diseqTree_0 (Node_0 x_42 x_43 x_44) Nil_1)))
(assert (forall ((x_45 Tree_0) (x_46 Nat_0) (x_47 Tree_0))
	(diseqTree_0 Nil_1 (Node_0 x_45 x_46 x_47))))
(assert (forall ((x_48 Tree_0) (x_49 Nat_0) (x_50 Tree_0) (x_51 Tree_0) (x_52 Nat_0) (x_53 Tree_0))
	(=> (diseqTree_0 x_48 x_51)
	    (diseqTree_0 (Node_0 x_48 x_49 x_50) (Node_0 x_51 x_52 x_53)))))
(assert (forall ((x_48 Tree_0) (x_49 Nat_0) (x_50 Tree_0) (x_51 Tree_0) (x_52 Nat_0) (x_53 Tree_0))
	(=> (diseqNat_0 x_49 x_52)
	    (diseqTree_0 (Node_0 x_48 x_49 x_50) (Node_0 x_51 x_52 x_53)))))
(assert (forall ((x_48 Tree_0) (x_49 Nat_0) (x_50 Tree_0) (x_51 Tree_0) (x_52 Nat_0) (x_53 Tree_0))
	(=> (diseqTree_0 x_50 x_53)
	    (diseqTree_0 (Node_0 x_48 x_49 x_50) (Node_0 x_51 x_52 x_53)))))
(declare-fun flatten_0 (list_0 Tree_0 list_0) Bool)
(assert (forall ((x_4 list_0))
	(flatten_0 x_4 Nil_1 x_4)))
(assert (forall ((x_5 list_0) (x_6 list_0) (p_0 Tree_0) (z_0 Nat_0) (q_0 Tree_0) (y_0 list_0))
	(=>	(and (flatten_0 x_6 q_0 y_0)
			(flatten_0 x_5 p_0 (cons_0 z_0 x_6)))
		(flatten_0 x_5 (Node_0 p_0 z_0 q_0) y_0))))
(declare-fun x_1 (list_0 list_0 list_0) Bool)
(assert (forall ((x_9 list_0) (z_1 Nat_0) (xs_0 list_0) (y_1 list_0))
	(=> (x_1 x_9 xs_0 y_1)
	    (x_1 (cons_0 z_1 x_9) (cons_0 z_1 xs_0) y_1))))
(assert (forall ((x_10 list_0))
	(x_1 x_10 nil_0 x_10)))
(declare-fun flatten_1 (list_0 Tree_0) Bool)
(assert (flatten_1 nil_0 Nil_1))
(assert (forall ((x_12 list_0) (x_13 list_0) (x_14 list_0) (x_15 list_0) (p_1 Tree_0) (y_2 Nat_0) (q_1 Tree_0))
	(=>	(and (flatten_1 x_13 p_1)
			(flatten_1 x_14 q_1)
			(x_1 x_15 (cons_0 y_2 nil_0) x_14)
			(x_1 x_12 x_13 x_15))
		(flatten_1 x_12 (Node_0 p_1 y_2 q_1)))))
(assert (forall ((x_17 list_0) (x_18 list_0) (p_2 Tree_0))
	(=>	(and (diseqlist_0 x_17 x_18)
			(flatten_0 x_17 p_2 nil_0)
			(flatten_1 x_18 p_2))
		false)))
(check-sat)
