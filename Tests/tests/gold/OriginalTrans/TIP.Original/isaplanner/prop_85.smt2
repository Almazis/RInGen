(set-logic HORN)
(declare-datatypes ((Nat_1 0)) (((Z_4 ) (Z_5 (unS_0 Nat_1)))))
(declare-fun diseqNat_1 (Nat_1 Nat_1) Bool)
(declare-fun unS_1 (Nat_1 Nat_1) Bool)
(declare-fun isZ_3 (Nat_1) Bool)
(declare-fun isZ_4 (Nat_1) Bool)
(assert (forall ((x_86 Nat_1))
	(unS_1 x_86 (Z_5 x_86))))
(assert (isZ_3 Z_4))
(assert (forall ((x_88 Nat_1))
	(isZ_4 (Z_5 x_88))))
(assert (forall ((x_89 Nat_1))
	(diseqNat_1 Z_4 (Z_5 x_89))))
(assert (forall ((x_90 Nat_1))
	(diseqNat_1 (Z_5 x_90) Z_4)))
(assert (forall ((x_91 Nat_1) (x_92 Nat_1))
	(=> (diseqNat_1 x_91 x_92)
	    (diseqNat_1 (Z_5 x_91) (Z_5 x_92)))))
(declare-fun add_0 (Nat_1 Nat_1 Nat_1) Bool)
(declare-fun minus_0 (Nat_1 Nat_1 Nat_1) Bool)
(declare-fun le_0 (Nat_1 Nat_1) Bool)
(declare-fun ge_0 (Nat_1 Nat_1) Bool)
(declare-fun lt_0 (Nat_1 Nat_1) Bool)
(declare-fun gt_0 (Nat_1 Nat_1) Bool)
(declare-fun mult_0 (Nat_1 Nat_1 Nat_1) Bool)
(declare-fun div_0 (Nat_1 Nat_1 Nat_1) Bool)
(declare-fun mod_0 (Nat_1 Nat_1 Nat_1) Bool)
(assert (forall ((y_6 Nat_1))
	(add_0 y_6 Z_4 y_6)))
(assert (forall ((r_0 Nat_1) (x_39 Nat_1) (y_6 Nat_1))
	(=> (add_0 r_0 x_39 y_6)
	    (add_0 (Z_5 r_0) (Z_5 x_39) y_6))))
(assert (forall ((y_6 Nat_1))
	(minus_0 Z_4 Z_4 y_6)))
(assert (forall ((r_0 Nat_1) (x_39 Nat_1) (y_6 Nat_1))
	(=> (minus_0 r_0 x_39 y_6)
	    (minus_0 (Z_5 r_0) (Z_5 x_39) y_6))))
(assert (forall ((y_6 Nat_1))
	(le_0 Z_4 y_6)))
(assert (forall ((x_39 Nat_1) (y_6 Nat_1))
	(=> (le_0 x_39 y_6)
	    (le_0 (Z_5 x_39) (Z_5 y_6)))))
(assert (forall ((y_6 Nat_1))
	(ge_0 y_6 Z_4)))
(assert (forall ((x_39 Nat_1) (y_6 Nat_1))
	(=> (ge_0 x_39 y_6)
	    (ge_0 (Z_5 x_39) (Z_5 y_6)))))
(assert (forall ((y_6 Nat_1))
	(lt_0 Z_4 (Z_5 y_6))))
(assert (forall ((x_39 Nat_1) (y_6 Nat_1))
	(=> (lt_0 x_39 y_6)
	    (lt_0 (Z_5 x_39) (Z_5 y_6)))))
(assert (forall ((y_6 Nat_1))
	(gt_0 (Z_5 y_6) Z_4)))
(assert (forall ((x_39 Nat_1) (y_6 Nat_1))
	(=> (gt_0 x_39 y_6)
	    (gt_0 (Z_5 x_39) (Z_5 y_6)))))
(assert (forall ((y_6 Nat_1))
	(mult_0 Z_4 Z_4 y_6)))
(assert (forall ((r_0 Nat_1) (x_39 Nat_1) (y_6 Nat_1) (z_6 Nat_1))
	(=>	(and (mult_0 r_0 x_39 y_6)
			(add_0 z_6 r_0 y_6))
		(mult_0 z_6 (Z_5 x_39) y_6))))
(assert (forall ((x_39 Nat_1) (y_6 Nat_1))
	(=> (lt_0 x_39 y_6)
	    (div_0 Z_4 x_39 y_6))))
(assert (forall ((r_0 Nat_1) (x_39 Nat_1) (y_6 Nat_1) (z_6 Nat_1))
	(=>	(and (ge_0 x_39 y_6)
			(minus_0 z_6 x_39 y_6)
			(div_0 r_0 z_6 y_6))
		(div_0 (Z_5 r_0) x_39 y_6))))
(assert (forall ((x_39 Nat_1) (y_6 Nat_1))
	(=> (lt_0 x_39 y_6)
	    (mod_0 x_39 x_39 y_6))))
(assert (forall ((r_0 Nat_1) (x_39 Nat_1) (y_6 Nat_1) (z_6 Nat_1))
	(=>	(and (ge_0 x_39 y_6)
			(minus_0 z_6 x_39 y_6)
			(mod_0 r_0 z_6 y_6))
		(mod_0 r_0 x_39 y_6))))
(declare-datatypes ((pair_0 0)) (((pair_1 (projpair_0 Nat_1) (projpair_1 Nat_1)))))
(declare-fun diseqpair_0 (pair_0 pair_0) Bool)
(declare-fun projpair_2 (Nat_1 pair_0) Bool)
(declare-fun projpair_3 (Nat_1 pair_0) Bool)
(declare-fun ispair_0 (pair_0) Bool)
(assert (forall ((x_40 Nat_1) (x_41 Nat_1))
	(projpair_2 x_40 (pair_1 x_40 x_41))))
(assert (forall ((x_40 Nat_1) (x_41 Nat_1))
	(projpair_3 x_41 (pair_1 x_40 x_41))))
(assert (forall ((x_43 Nat_1) (x_44 Nat_1))
	(ispair_0 (pair_1 x_43 x_44))))
(assert (forall ((x_45 Nat_1) (x_46 Nat_1) (x_47 Nat_1) (x_48 Nat_1))
	(=> (diseqNat_1 x_45 x_47)
	    (diseqpair_0 (pair_1 x_45 x_46) (pair_1 x_47 x_48)))))
(assert (forall ((x_45 Nat_1) (x_46 Nat_1) (x_47 Nat_1) (x_48 Nat_1))
	(=> (diseqNat_1 x_46 x_48)
	    (diseqpair_0 (pair_1 x_45 x_46) (pair_1 x_47 x_48)))))
(declare-datatypes ((list_0 0)) (((nil_0 ) (cons_0 (head_0 Nat_1) (tail_0 list_0)))))
(declare-fun diseqlist_0 (list_0 list_0) Bool)
(declare-fun head_2 (Nat_1 list_0) Bool)
(declare-fun tail_2 (list_0 list_0) Bool)
(declare-fun isnil_0 (list_0) Bool)
(declare-fun iscons_0 (list_0) Bool)
(assert (forall ((x_50 Nat_1) (x_51 list_0))
	(head_2 x_50 (cons_0 x_50 x_51))))
(assert (forall ((x_50 Nat_1) (x_51 list_0))
	(tail_2 x_51 (cons_0 x_50 x_51))))
(assert (isnil_0 nil_0))
(assert (forall ((x_53 Nat_1) (x_54 list_0))
	(iscons_0 (cons_0 x_53 x_54))))
(assert (forall ((x_55 Nat_1) (x_56 list_0))
	(diseqlist_0 nil_0 (cons_0 x_55 x_56))))
(assert (forall ((x_57 Nat_1) (x_58 list_0))
	(diseqlist_0 (cons_0 x_57 x_58) nil_0)))
(assert (forall ((x_59 Nat_1) (x_60 list_0) (x_61 Nat_1) (x_62 list_0))
	(=> (diseqNat_1 x_59 x_61)
	    (diseqlist_0 (cons_0 x_59 x_60) (cons_0 x_61 x_62)))))
(assert (forall ((x_59 Nat_1) (x_60 list_0) (x_61 Nat_1) (x_62 list_0))
	(=> (diseqlist_0 x_60 x_62)
	    (diseqlist_0 (cons_0 x_59 x_60) (cons_0 x_61 x_62)))))
(declare-datatypes ((list_1 0)) (((nil_1 ) (cons_1 (head_1 pair_0) (tail_1 list_1)))))
(declare-fun diseqlist_1 (list_1 list_1) Bool)
(declare-fun head_3 (pair_0 list_1) Bool)
(declare-fun tail_3 (list_1 list_1) Bool)
(declare-fun isnil_1 (list_1) Bool)
(declare-fun iscons_1 (list_1) Bool)
(assert (forall ((x_64 pair_0) (x_65 list_1))
	(head_3 x_64 (cons_1 x_64 x_65))))
(assert (forall ((x_64 pair_0) (x_65 list_1))
	(tail_3 x_65 (cons_1 x_64 x_65))))
(assert (isnil_1 nil_1))
(assert (forall ((x_67 pair_0) (x_68 list_1))
	(iscons_1 (cons_1 x_67 x_68))))
(assert (forall ((x_69 pair_0) (x_70 list_1))
	(diseqlist_1 nil_1 (cons_1 x_69 x_70))))
(assert (forall ((x_71 pair_0) (x_72 list_1))
	(diseqlist_1 (cons_1 x_71 x_72) nil_1)))
(assert (forall ((x_73 pair_0) (x_74 list_1) (x_75 pair_0) (x_76 list_1))
	(=> (diseqpair_0 x_73 x_75)
	    (diseqlist_1 (cons_1 x_73 x_74) (cons_1 x_75 x_76)))))
(assert (forall ((x_73 pair_0) (x_74 list_1) (x_75 pair_0) (x_76 list_1))
	(=> (diseqlist_1 x_74 x_76)
	    (diseqlist_1 (cons_1 x_73 x_74) (cons_1 x_75 x_76)))))
(declare-datatypes ((Nat_0 0)) (((Z_0 ) (S_0 (projS_0 Nat_0)))))
(declare-fun diseqNat_0 (Nat_0 Nat_0) Bool)
(declare-fun projS_1 (Nat_0 Nat_0) Bool)
(declare-fun isZ_2 (Nat_0) Bool)
(declare-fun isS_0 (Nat_0) Bool)
(assert (forall ((x_78 Nat_0))
	(projS_1 x_78 (S_0 x_78))))
(assert (isZ_2 Z_0))
(assert (forall ((x_80 Nat_0))
	(isS_0 (S_0 x_80))))
(assert (forall ((x_81 Nat_0))
	(diseqNat_0 Z_0 (S_0 x_81))))
(assert (forall ((x_82 Nat_0))
	(diseqNat_0 (S_0 x_82) Z_0)))
(assert (forall ((x_83 Nat_0) (x_84 Nat_0))
	(=> (diseqNat_0 x_83 x_84)
	    (diseqNat_0 (S_0 x_83) (S_0 x_84)))))
(declare-fun zip_0 (list_1 list_0 list_0) Bool)
(assert (forall ((x_12 list_1) (x_2 Nat_1) (x_3 list_0) (z_1 Nat_1) (x_1 list_0))
	(=> (zip_0 x_12 x_1 x_3)
	    (zip_0 (cons_1 (pair_1 z_1 x_2) x_12) (cons_0 z_1 x_1) (cons_0 x_2 x_3)))))
(assert (forall ((z_1 Nat_1) (x_1 list_0))
	(zip_0 nil_1 (cons_0 z_1 x_1) nil_0)))
(assert (forall ((y_0 list_0))
	(zip_0 nil_1 nil_0 y_0)))
(declare-fun len_0 (Nat_0 list_0) Bool)
(assert (forall ((x_16 Nat_0) (y_1 Nat_1) (xs_0 list_0))
	(=> (len_0 x_16 xs_0)
	    (len_0 (S_0 x_16) (cons_0 y_1 xs_0)))))
(assert (len_0 Z_0 nil_0))
(declare-fun x_5 (list_0 list_0 list_0) Bool)
(assert (forall ((x_19 list_0) (z_2 Nat_1) (xs_1 list_0) (y_2 list_0))
	(=> (x_5 x_19 xs_1 y_2)
	    (x_5 (cons_0 z_2 x_19) (cons_0 z_2 xs_1) y_2))))
(assert (forall ((x_20 list_0))
	(x_5 x_20 nil_0 x_20)))
(declare-fun rev_0 (list_0 list_0) Bool)
(assert (forall ((x_21 list_0) (x_22 list_0) (y_3 Nat_1) (xs_2 list_0))
	(=>	(and (rev_0 x_22 xs_2)
			(x_5 x_21 x_22 (cons_0 y_3 nil_0)))
		(rev_0 x_21 (cons_0 y_3 xs_2)))))
(assert (rev_0 nil_0 nil_0))
(declare-fun x_8 (list_1 list_1 list_1) Bool)
(assert (forall ((x_26 list_1) (z_3 pair_0) (xs_3 list_1) (y_4 list_1))
	(=> (x_8 x_26 xs_3 y_4)
	    (x_8 (cons_1 z_3 x_26) (cons_1 z_3 xs_3) y_4))))
(assert (forall ((x_27 list_1))
	(x_8 x_27 nil_1 x_27)))
(declare-fun rev_1 (list_1 list_1) Bool)
(assert (forall ((x_28 list_1) (x_29 list_1) (y_5 pair_0) (xs_4 list_1))
	(=>	(and (rev_1 x_29 xs_4)
			(x_8 x_28 x_29 (cons_1 y_5 nil_1)))
		(rev_1 x_28 (cons_1 y_5 xs_4)))))
(assert (rev_1 nil_1 nil_1))
(assert (forall ((x_37 Nat_0) (x_32 list_0) (x_33 list_0) (x_34 list_1) (x_35 list_1) (x_36 list_1) (xs_5 list_0) (ys_0 list_0))
	(=>	(and (diseqlist_1 x_34 x_36)
			(len_0 x_37 xs_5)
			(len_0 x_37 ys_0)
			(rev_0 x_32 xs_5)
			(rev_0 x_33 ys_0)
			(zip_0 x_34 x_32 x_33)
			(zip_0 x_35 xs_5 ys_0)
			(rev_1 x_36 x_35))
		false)))
(check-sat)
