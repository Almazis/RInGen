(set-logic HORN)
(declare-datatypes ((Bool_0 0)) (((false_0 ) (true_0 ))))
(declare-fun diseqBool_0 (Bool_0 Bool_0) Bool)
(declare-fun isfalse_1 (Bool_0) Bool)
(declare-fun istrue_1 (Bool_0) Bool)
(assert (isfalse_1 false_0))
(assert (istrue_1 true_0))
(assert (diseqBool_0 false_0 true_0))
(assert (diseqBool_0 true_0 false_0))
(declare-fun and_0 (Bool_0 Bool_0 Bool_0) Bool)
(declare-fun or_0 (Bool_0 Bool_0 Bool_0) Bool)
(declare-fun hence_0 (Bool_0 Bool_0 Bool_0) Bool)
(declare-fun not_0 (Bool_0 Bool_0) Bool)
(assert (and_0 false_0 false_0 false_0))
(assert (and_0 false_0 true_0 false_0))
(assert (and_0 false_0 false_0 true_0))
(assert (and_0 true_0 true_0 true_0))
(assert (or_0 false_0 false_0 false_0))
(assert (or_0 true_0 true_0 false_0))
(assert (or_0 true_0 false_0 true_0))
(assert (or_0 true_0 true_0 true_0))
(assert (hence_0 true_0 false_0 false_0))
(assert (hence_0 false_0 true_0 false_0))
(assert (hence_0 true_0 false_0 true_0))
(assert (hence_0 true_0 true_0 true_0))
(assert (not_0 true_0 false_0))
(assert (not_0 false_0 true_0))
(declare-datatypes ((Nat_0 0)) (((Z_0 ) (S_0 (projS_0 Nat_0)))))
(declare-fun diseqNat_0 (Nat_0 Nat_0) Bool)
(declare-fun projS_1 (Nat_0 Nat_0) Bool)
(declare-fun isZ_2 (Nat_0) Bool)
(declare-fun isS_0 (Nat_0) Bool)
(assert (forall ((x_34 Nat_0))
	(projS_1 x_34 (S_0 x_34))))
(assert (isZ_2 Z_0))
(assert (forall ((x_36 Nat_0))
	(isS_0 (S_0 x_36))))
(assert (forall ((x_37 Nat_0))
	(diseqNat_0 Z_0 (S_0 x_37))))
(assert (forall ((x_38 Nat_0))
	(diseqNat_0 (S_0 x_38) Z_0)))
(assert (forall ((x_39 Nat_0) (x_40 Nat_0))
	(=> (diseqNat_0 x_39 x_40)
	    (diseqNat_0 (S_0 x_39) (S_0 x_40)))))
(declare-datatypes ((list_0 0)) (((nil_0 ) (cons_0 (head_0 Nat_0) (tail_0 list_0)))))
(declare-fun diseqlist_0 (list_0 list_0) Bool)
(declare-fun head_1 (Nat_0 list_0) Bool)
(declare-fun tail_1 (list_0 list_0) Bool)
(declare-fun isnil_0 (list_0) Bool)
(declare-fun iscons_0 (list_0) Bool)
(assert (forall ((x_42 Nat_0) (x_43 list_0))
	(head_1 x_42 (cons_0 x_42 x_43))))
(assert (forall ((x_42 Nat_0) (x_43 list_0))
	(tail_1 x_43 (cons_0 x_42 x_43))))
(assert (isnil_0 nil_0))
(assert (forall ((x_45 Nat_0) (x_46 list_0))
	(iscons_0 (cons_0 x_45 x_46))))
(assert (forall ((x_47 Nat_0) (x_48 list_0))
	(diseqlist_0 nil_0 (cons_0 x_47 x_48))))
(assert (forall ((x_49 Nat_0) (x_50 list_0))
	(diseqlist_0 (cons_0 x_49 x_50) nil_0)))
(assert (forall ((x_51 Nat_0) (x_52 list_0) (x_53 Nat_0) (x_54 list_0))
	(=> (diseqNat_0 x_51 x_53)
	    (diseqlist_0 (cons_0 x_51 x_52) (cons_0 x_53 x_54)))))
(assert (forall ((x_51 Nat_0) (x_52 list_0) (x_53 Nat_0) (x_54 list_0))
	(=> (diseqlist_0 x_52 x_54)
	    (diseqlist_0 (cons_0 x_51 x_52) (cons_0 x_53 x_54)))))
(declare-fun len_0 (Nat_0 list_0) Bool)
(assert (forall ((x_11 Nat_0) (y_0 Nat_0) (xs_0 list_0))
	(=> (len_0 x_11 xs_0)
	    (len_0 (S_0 x_11) (cons_0 y_0 xs_0)))))
(assert (len_0 Z_0 nil_0))
(declare-fun last_0 (Nat_0 list_0) Bool)
(assert (forall ((x_13 Nat_0) (x_2 Nat_0) (x_3 list_0) (y_1 Nat_0))
	(=> (last_0 x_13 (cons_0 x_2 x_3))
	    (last_0 x_13 (cons_0 y_1 (cons_0 x_2 x_3))))))
(assert (forall ((x_15 Nat_0))
	(last_0 x_15 (cons_0 x_15 nil_0))))
(assert (last_0 Z_0 nil_0))
(declare-fun drop_0 (list_0 Nat_0 list_0) Bool)
(assert (forall ((x_17 list_0) (x_5 Nat_0) (x_6 list_0) (z_2 Nat_0))
	(=> (drop_0 x_17 z_2 x_6)
	    (drop_0 x_17 (S_0 z_2) (cons_0 x_5 x_6)))))
(assert (forall ((z_2 Nat_0))
	(drop_0 nil_0 (S_0 z_2) nil_0)))
(assert (forall ((x_20 list_0))
	(drop_0 x_20 Z_0 x_20)))
(declare-fun x_7 (Bool_0 Nat_0 Nat_0) Bool)
(assert (forall ((x_21 Bool_0) (x_9 Nat_0) (z_3 Nat_0))
	(=> (x_7 x_21 x_9 z_3)
	    (x_7 x_21 (S_0 x_9) (S_0 z_3)))))
(assert (forall ((z_3 Nat_0))
	(x_7 true_0 Z_0 (S_0 z_3))))
(assert (forall ((x_8 Nat_0))
	(x_7 false_0 x_8 Z_0)))
(assert (forall ((x_28 Nat_0) (x_25 list_0) (x_26 Nat_0) (x_27 Nat_0) (n_0 Nat_0) (xs_1 list_0))
	(=>	(and (diseqNat_0 x_26 x_27)
			(len_0 x_28 xs_1)
			(x_7 true_0 n_0 x_28)
			(drop_0 x_25 n_0 xs_1)
			(last_0 x_26 x_25)
			(last_0 x_27 xs_1))
		false)))
(check-sat)
