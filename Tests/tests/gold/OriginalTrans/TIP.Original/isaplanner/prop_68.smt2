(set-logic HORN)
(declare-datatypes ((Bool_0 0)) (((false_0 ) (true_0 ))))
(declare-fun diseqBool_0 (Bool_0 Bool_0) Bool)
(declare-fun isfalse_1 (Bool_0) Bool)
(declare-fun istrue_1 (Bool_0) Bool)
(assert (isfalse_1 false_0))
(assert (istrue_1 true_0))
(assert (diseqBool_0 false_0 true_0))
(assert (diseqBool_0 true_0 false_0))
(declare-fun and_0 (Bool_0 Bool_0 Bool_0) Bool)
(declare-fun or_0 (Bool_0 Bool_0 Bool_0) Bool)
(declare-fun hence_0 (Bool_0 Bool_0 Bool_0) Bool)
(declare-fun not_0 (Bool_0 Bool_0) Bool)
(assert (and_0 false_0 false_0 false_0))
(assert (and_0 false_0 true_0 false_0))
(assert (and_0 false_0 false_0 true_0))
(assert (and_0 true_0 true_0 true_0))
(assert (or_0 false_0 false_0 false_0))
(assert (or_0 true_0 true_0 false_0))
(assert (or_0 true_0 false_0 true_0))
(assert (or_0 true_0 true_0 true_0))
(assert (hence_0 true_0 false_0 false_0))
(assert (hence_0 false_0 true_0 false_0))
(assert (hence_0 true_0 false_0 true_0))
(assert (hence_0 true_0 true_0 true_0))
(assert (not_0 true_0 false_0))
(assert (not_0 false_0 true_0))
(declare-datatypes ((Nat_0 0)) (((Z_0 ) (S_0 (projS_0 Nat_0)))))
(declare-fun diseqNat_0 (Nat_0 Nat_0) Bool)
(declare-fun projS_1 (Nat_0 Nat_0) Bool)
(declare-fun isZ_2 (Nat_0) Bool)
(declare-fun isS_0 (Nat_0) Bool)
(assert (forall ((x_35 Nat_0))
	(projS_1 x_35 (S_0 x_35))))
(assert (isZ_2 Z_0))
(assert (forall ((x_37 Nat_0))
	(isS_0 (S_0 x_37))))
(assert (forall ((x_38 Nat_0))
	(diseqNat_0 Z_0 (S_0 x_38))))
(assert (forall ((x_39 Nat_0))
	(diseqNat_0 (S_0 x_39) Z_0)))
(assert (forall ((x_40 Nat_0) (x_41 Nat_0))
	(=> (diseqNat_0 x_40 x_41)
	    (diseqNat_0 (S_0 x_40) (S_0 x_41)))))
(declare-datatypes ((list_0 0)) (((nil_0 ) (cons_0 (head_0 Nat_0) (tail_0 list_0)))))
(declare-fun diseqlist_0 (list_0 list_0) Bool)
(declare-fun head_1 (Nat_0 list_0) Bool)
(declare-fun tail_1 (list_0 list_0) Bool)
(declare-fun isnil_0 (list_0) Bool)
(declare-fun iscons_0 (list_0) Bool)
(assert (forall ((x_43 Nat_0) (x_44 list_0))
	(head_1 x_43 (cons_0 x_43 x_44))))
(assert (forall ((x_43 Nat_0) (x_44 list_0))
	(tail_1 x_44 (cons_0 x_43 x_44))))
(assert (isnil_0 nil_0))
(assert (forall ((x_46 Nat_0) (x_47 list_0))
	(iscons_0 (cons_0 x_46 x_47))))
(assert (forall ((x_48 Nat_0) (x_49 list_0))
	(diseqlist_0 nil_0 (cons_0 x_48 x_49))))
(assert (forall ((x_50 Nat_0) (x_51 list_0))
	(diseqlist_0 (cons_0 x_50 x_51) nil_0)))
(assert (forall ((x_52 Nat_0) (x_53 list_0) (x_54 Nat_0) (x_55 list_0))
	(=> (diseqNat_0 x_52 x_54)
	    (diseqlist_0 (cons_0 x_52 x_53) (cons_0 x_54 x_55)))))
(assert (forall ((x_52 Nat_0) (x_53 list_0) (x_54 Nat_0) (x_55 list_0))
	(=> (diseqlist_0 x_53 x_55)
	    (diseqlist_0 (cons_0 x_52 x_53) (cons_0 x_54 x_55)))))
(declare-fun len_0 (Nat_0 list_0) Bool)
(assert (forall ((x_9 Nat_0) (y_0 Nat_0) (xs_0 list_0))
	(=> (len_0 x_9 xs_0)
	    (len_0 (S_0 x_9) (cons_0 y_0 xs_0)))))
(assert (len_0 Z_0 nil_0))
(declare-fun x_1 (Bool_0 Nat_0 Nat_0) Bool)
(assert (forall ((x_11 Bool_0) (y_2 Nat_0) (x_3 Nat_0))
	(=> (x_1 x_11 x_3 y_2)
	    (x_1 x_11 (S_0 x_3) (S_0 y_2)))))
(assert (forall ((x_3 Nat_0))
	(x_1 false_0 (S_0 x_3) Z_0)))
(assert (forall ((z_1 Nat_0))
	(x_1 false_0 Z_0 (S_0 z_1))))
(assert (x_1 true_0 Z_0 Z_0))
(declare-fun delete_0 (list_0 Nat_0 list_0) Bool)
(assert (forall ((x_17 list_0) (z_2 Nat_0) (xs_1 list_0) (x_4 Nat_0))
	(=>	(and (delete_0 x_17 x_4 xs_1)
			(x_1 true_0 x_4 z_2))
		(delete_0 x_17 x_4 (cons_0 z_2 xs_1)))))
(assert (forall ((x_21 list_0) (x_19 Bool_0) (z_2 Nat_0) (xs_1 list_0) (x_4 Nat_0))
	(=>	(and (diseqBool_0 x_19 true_0)
			(delete_0 x_21 x_4 xs_1)
			(x_1 x_19 x_4 z_2))
		(delete_0 (cons_0 z_2 x_21) x_4 (cons_0 z_2 xs_1)))))
(assert (forall ((x_4 Nat_0))
	(delete_0 nil_0 x_4 nil_0)))
(declare-fun x_5 (Bool_0 Nat_0 Nat_0) Bool)
(assert (forall ((x_23 Bool_0) (x_7 Nat_0) (z_3 Nat_0))
	(=> (x_5 x_23 z_3 x_7)
	    (x_5 x_23 (S_0 z_3) (S_0 x_7)))))
(assert (forall ((z_3 Nat_0))
	(x_5 false_0 (S_0 z_3) Z_0)))
(assert (forall ((y_4 Nat_0))
	(x_5 true_0 Z_0 y_4)))
(assert (forall ((x_27 list_0) (x_28 Nat_0) (x_29 Nat_0) (x_30 Bool_0) (n_0 Nat_0) (xs_2 list_0))
	(=>	(and (diseqBool_0 x_30 true_0)
			(delete_0 x_27 n_0 xs_2)
			(len_0 x_28 x_27)
			(len_0 x_29 xs_2)
			(x_5 x_30 x_28 x_29))
		false)))
(check-sat)
