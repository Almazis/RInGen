(set-logic HORN)
(declare-datatypes ((Bool_0 0)) (((false_0 ) (true_0 ))))
(declare-fun diseqBool_0 (Bool_0 Bool_0) Bool)
(declare-fun isfalse_1 (Bool_0) Bool)
(declare-fun istrue_1 (Bool_0) Bool)
(assert (isfalse_1 false_0))
(assert (istrue_1 true_0))
(assert (diseqBool_0 false_0 true_0))
(assert (diseqBool_0 true_0 false_0))
(declare-fun and_0 (Bool_0 Bool_0 Bool_0) Bool)
(declare-fun or_0 (Bool_0 Bool_0 Bool_0) Bool)
(declare-fun hence_0 (Bool_0 Bool_0 Bool_0) Bool)
(declare-fun not_0 (Bool_0 Bool_0) Bool)
(assert (and_0 false_0 false_0 false_0))
(assert (and_0 false_0 true_0 false_0))
(assert (and_0 false_0 false_0 true_0))
(assert (and_0 true_0 true_0 true_0))
(assert (or_0 false_0 false_0 false_0))
(assert (or_0 true_0 true_0 false_0))
(assert (or_0 true_0 false_0 true_0))
(assert (or_0 true_0 true_0 true_0))
(assert (hence_0 true_0 false_0 false_0))
(assert (hence_0 false_0 true_0 false_0))
(assert (hence_0 true_0 false_0 true_0))
(assert (hence_0 true_0 true_0 true_0))
(assert (not_0 true_0 false_0))
(assert (not_0 false_0 true_0))
(declare-datatypes ((Nat_0 0)) (((Z_0 ) (S_0 (projS_0 Nat_0)))))
(declare-fun diseqNat_0 (Nat_0 Nat_0) Bool)
(declare-fun projS_1 (Nat_0 Nat_0) Bool)
(declare-fun isZ_2 (Nat_0) Bool)
(declare-fun isS_0 (Nat_0) Bool)
(assert (forall ((x_28 Nat_0))
	(projS_1 x_28 (S_0 x_28))))
(assert (isZ_2 Z_0))
(assert (forall ((x_30 Nat_0))
	(isS_0 (S_0 x_30))))
(assert (forall ((x_31 Nat_0))
	(diseqNat_0 Z_0 (S_0 x_31))))
(assert (forall ((x_32 Nat_0))
	(diseqNat_0 (S_0 x_32) Z_0)))
(assert (forall ((x_33 Nat_0) (x_34 Nat_0))
	(=> (diseqNat_0 x_33 x_34)
	    (diseqNat_0 (S_0 x_33) (S_0 x_34)))))
(declare-datatypes ((list_0 0)) (((nil_0 ) (cons_0 (head_0 Nat_0) (tail_0 list_0)))))
(declare-fun diseqlist_0 (list_0 list_0) Bool)
(declare-fun head_1 (Nat_0 list_0) Bool)
(declare-fun tail_1 (list_0 list_0) Bool)
(declare-fun isnil_0 (list_0) Bool)
(declare-fun iscons_0 (list_0) Bool)
(assert (forall ((x_36 Nat_0) (x_37 list_0))
	(head_1 x_36 (cons_0 x_36 x_37))))
(assert (forall ((x_36 Nat_0) (x_37 list_0))
	(tail_1 x_37 (cons_0 x_36 x_37))))
(assert (isnil_0 nil_0))
(assert (forall ((x_39 Nat_0) (x_40 list_0))
	(iscons_0 (cons_0 x_39 x_40))))
(assert (forall ((x_41 Nat_0) (x_42 list_0))
	(diseqlist_0 nil_0 (cons_0 x_41 x_42))))
(assert (forall ((x_43 Nat_0) (x_44 list_0))
	(diseqlist_0 (cons_0 x_43 x_44) nil_0)))
(assert (forall ((x_45 Nat_0) (x_46 list_0) (x_47 Nat_0) (x_48 list_0))
	(=> (diseqNat_0 x_45 x_47)
	    (diseqlist_0 (cons_0 x_45 x_46) (cons_0 x_47 x_48)))))
(assert (forall ((x_45 Nat_0) (x_46 list_0) (x_47 Nat_0) (x_48 list_0))
	(=> (diseqlist_0 x_46 x_48)
	    (diseqlist_0 (cons_0 x_45 x_46) (cons_0 x_47 x_48)))))
(declare-fun x_0 (Bool_0 Nat_0 Nat_0) Bool)
(assert (forall ((x_7 Bool_0) (y_1 Nat_0) (x_2 Nat_0))
	(=> (x_0 x_7 x_2 y_1)
	    (x_0 x_7 (S_0 x_2) (S_0 y_1)))))
(assert (forall ((x_2 Nat_0))
	(x_0 false_0 (S_0 x_2) Z_0)))
(assert (forall ((z_1 Nat_0))
	(x_0 false_0 Z_0 (S_0 z_1))))
(assert (x_0 true_0 Z_0 Z_0))
(declare-fun elem_0 (Bool_0 Nat_0 list_0) Bool)
(assert (forall ((z_2 Nat_0) (xs_0 list_0) (x_3 Nat_0))
	(=> (x_0 true_0 x_3 z_2)
	    (elem_0 true_0 x_3 (cons_0 z_2 xs_0)))))
(assert (forall ((x_15 Bool_0) (x_14 Bool_0) (z_2 Nat_0) (xs_0 list_0) (x_3 Nat_0))
	(=>	(and (diseqBool_0 x_14 true_0)
			(elem_0 x_15 x_3 xs_0)
			(x_0 x_14 x_3 z_2))
		(elem_0 x_15 x_3 (cons_0 z_2 xs_0)))))
(assert (forall ((x_3 Nat_0))
	(elem_0 false_0 x_3 nil_0)))
(declare-fun x_4 (list_0 list_0 list_0) Bool)
(assert (forall ((x_19 list_0) (z_3 Nat_0) (xs_1 list_0) (y_3 list_0))
	(=> (x_4 x_19 xs_1 y_3)
	    (x_4 (cons_0 z_3 x_19) (cons_0 z_3 xs_1) y_3))))
(assert (forall ((x_20 list_0))
	(x_4 x_20 nil_0 x_20)))
(assert (forall ((x_21 list_0) (x_22 Bool_0) (x_6 Nat_0) (xs_2 list_0) (ys_0 list_0))
	(=>	(and (diseqBool_0 x_22 true_0)
			(elem_0 true_0 x_6 ys_0)
			(x_4 x_21 xs_2 ys_0)
			(elem_0 x_22 x_6 x_21))
		false)))
(check-sat)
