(set-logic HORN)
(declare-datatypes ((Nat_0 0)) (((Z_2 ) (Z_3 (unS_0 Nat_0)))))
(declare-fun diseqNat_0 (Nat_0 Nat_0) Bool)
(declare-fun unS_1 (Nat_0 Nat_0) Bool)
(declare-fun isZ_2 (Nat_0) Bool)
(declare-fun isZ_3 (Nat_0) Bool)
(assert (forall ((x_31 Nat_0))
	(unS_1 x_31 (Z_3 x_31))))
(assert (isZ_2 Z_2))
(assert (forall ((x_33 Nat_0))
	(isZ_3 (Z_3 x_33))))
(assert (forall ((x_34 Nat_0))
	(diseqNat_0 Z_2 (Z_3 x_34))))
(assert (forall ((x_35 Nat_0))
	(diseqNat_0 (Z_3 x_35) Z_2)))
(assert (forall ((x_36 Nat_0) (x_37 Nat_0))
	(=> (diseqNat_0 x_36 x_37)
	    (diseqNat_0 (Z_3 x_36) (Z_3 x_37)))))
(declare-fun add_0 (Nat_0 Nat_0 Nat_0) Bool)
(declare-fun minus_0 (Nat_0 Nat_0 Nat_0) Bool)
(declare-fun le_0 (Nat_0 Nat_0) Bool)
(declare-fun ge_0 (Nat_0 Nat_0) Bool)
(declare-fun lt_0 (Nat_0 Nat_0) Bool)
(declare-fun gt_0 (Nat_0 Nat_0) Bool)
(declare-fun mult_0 (Nat_0 Nat_0 Nat_0) Bool)
(declare-fun div_0 (Nat_0 Nat_0 Nat_0) Bool)
(declare-fun mod_0 (Nat_0 Nat_0 Nat_0) Bool)
(assert (forall ((y_2 Nat_0))
	(add_0 y_2 Z_2 y_2)))
(assert (forall ((r_0 Nat_0) (x_15 Nat_0) (y_2 Nat_0))
	(=> (add_0 r_0 x_15 y_2)
	    (add_0 (Z_3 r_0) (Z_3 x_15) y_2))))
(assert (forall ((y_2 Nat_0))
	(minus_0 Z_2 Z_2 y_2)))
(assert (forall ((r_0 Nat_0) (x_15 Nat_0) (y_2 Nat_0))
	(=> (minus_0 r_0 x_15 y_2)
	    (minus_0 (Z_3 r_0) (Z_3 x_15) y_2))))
(assert (forall ((y_2 Nat_0))
	(le_0 Z_2 y_2)))
(assert (forall ((x_15 Nat_0) (y_2 Nat_0))
	(=> (le_0 x_15 y_2)
	    (le_0 (Z_3 x_15) (Z_3 y_2)))))
(assert (forall ((y_2 Nat_0))
	(ge_0 y_2 Z_2)))
(assert (forall ((x_15 Nat_0) (y_2 Nat_0))
	(=> (ge_0 x_15 y_2)
	    (ge_0 (Z_3 x_15) (Z_3 y_2)))))
(assert (forall ((y_2 Nat_0))
	(lt_0 Z_2 (Z_3 y_2))))
(assert (forall ((x_15 Nat_0) (y_2 Nat_0))
	(=> (lt_0 x_15 y_2)
	    (lt_0 (Z_3 x_15) (Z_3 y_2)))))
(assert (forall ((y_2 Nat_0))
	(gt_0 (Z_3 y_2) Z_2)))
(assert (forall ((x_15 Nat_0) (y_2 Nat_0))
	(=> (gt_0 x_15 y_2)
	    (gt_0 (Z_3 x_15) (Z_3 y_2)))))
(assert (forall ((y_2 Nat_0))
	(mult_0 Z_2 Z_2 y_2)))
(assert (forall ((r_0 Nat_0) (x_15 Nat_0) (y_2 Nat_0) (z_4 Nat_0))
	(=>	(and (mult_0 r_0 x_15 y_2)
			(add_0 z_4 r_0 y_2))
		(mult_0 z_4 (Z_3 x_15) y_2))))
(assert (forall ((x_15 Nat_0) (y_2 Nat_0))
	(=> (lt_0 x_15 y_2)
	    (div_0 Z_2 x_15 y_2))))
(assert (forall ((r_0 Nat_0) (x_15 Nat_0) (y_2 Nat_0) (z_4 Nat_0))
	(=>	(and (ge_0 x_15 y_2)
			(minus_0 z_4 x_15 y_2)
			(div_0 r_0 z_4 y_2))
		(div_0 (Z_3 r_0) x_15 y_2))))
(assert (forall ((x_15 Nat_0) (y_2 Nat_0))
	(=> (lt_0 x_15 y_2)
	    (mod_0 x_15 x_15 y_2))))
(assert (forall ((r_0 Nat_0) (x_15 Nat_0) (y_2 Nat_0) (z_4 Nat_0))
	(=>	(and (ge_0 x_15 y_2)
			(minus_0 z_4 x_15 y_2)
			(mod_0 r_0 z_4 y_2))
		(mod_0 r_0 x_15 y_2))))
(declare-datatypes ((list_0 0)) (((nil_0 ) (cons_0 (head_0 Nat_0) (tail_0 list_0)))))
(declare-fun diseqlist_0 (list_0 list_0) Bool)
(declare-fun head_1 (Nat_0 list_0) Bool)
(declare-fun tail_1 (list_0 list_0) Bool)
(declare-fun isnil_0 (list_0) Bool)
(declare-fun iscons_0 (list_0) Bool)
(assert (forall ((x_17 Nat_0) (x_18 list_0))
	(head_1 x_17 (cons_0 x_17 x_18))))
(assert (forall ((x_17 Nat_0) (x_18 list_0))
	(tail_1 x_18 (cons_0 x_17 x_18))))
(assert (isnil_0 nil_0))
(assert (forall ((x_20 Nat_0) (x_21 list_0))
	(iscons_0 (cons_0 x_20 x_21))))
(assert (forall ((x_22 Nat_0) (x_23 list_0))
	(diseqlist_0 nil_0 (cons_0 x_22 x_23))))
(assert (forall ((x_24 Nat_0) (x_25 list_0))
	(diseqlist_0 (cons_0 x_24 x_25) nil_0)))
(assert (forall ((x_26 Nat_0) (x_27 list_0) (x_28 Nat_0) (x_29 list_0))
	(=> (diseqNat_0 x_26 x_28)
	    (diseqlist_0 (cons_0 x_26 x_27) (cons_0 x_28 x_29)))))
(assert (forall ((x_26 Nat_0) (x_27 list_0) (x_28 Nat_0) (x_29 list_0))
	(=> (diseqlist_0 x_27 x_29)
	    (diseqlist_0 (cons_0 x_26 x_27) (cons_0 x_28 x_29)))))
(declare-fun butlast_0 (list_0 list_0) Bool)
(assert (forall ((x_7 list_0) (x_1 Nat_0) (x_2 list_0) (y_0 Nat_0))
	(=> (butlast_0 x_7 (cons_0 x_1 x_2))
	    (butlast_0 (cons_0 y_0 x_7) (cons_0 y_0 (cons_0 x_1 x_2))))))
(assert (forall ((y_0 Nat_0))
	(butlast_0 nil_0 (cons_0 y_0 nil_0))))
(assert (butlast_0 nil_0 nil_0))
(declare-fun x_3 (list_0 list_0 list_0) Bool)
(assert (forall ((x_11 list_0) (z_1 Nat_0) (xs_0 list_0) (y_1 list_0))
	(=> (x_3 x_11 xs_0 y_1)
	    (x_3 (cons_0 z_1 x_11) (cons_0 z_1 xs_0) y_1))))
(assert (forall ((x_12 list_0))
	(x_3 x_12 nil_0 x_12)))
(assert (forall ((x_13 list_0) (x_14 list_0) (xs_1 list_0) (x_5 Nat_0))
	(=>	(and (diseqlist_0 x_14 xs_1)
			(x_3 x_13 xs_1 (cons_0 x_5 nil_0))
			(butlast_0 x_14 x_13))
		false)))
(check-sat)
