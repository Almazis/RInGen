(set-logic HORN)
(declare-datatypes ((Nat_1 0)) (((Z_2 ) (Z_3 (unS_0 Nat_1)))))
(declare-fun diseqNat_1 (Nat_1 Nat_1) Bool)
(declare-fun unS_1 (Nat_1 Nat_1) Bool)
(declare-fun isZ_3 (Nat_1) Bool)
(declare-fun isZ_4 (Nat_1) Bool)
(assert (forall ((x_32 Nat_1))
	(unS_1 x_32 (Z_3 x_32))))
(assert (isZ_3 Z_2))
(assert (forall ((x_34 Nat_1))
	(isZ_4 (Z_3 x_34))))
(assert (forall ((x_35 Nat_1))
	(diseqNat_1 Z_2 (Z_3 x_35))))
(assert (forall ((x_36 Nat_1))
	(diseqNat_1 (Z_3 x_36) Z_2)))
(assert (forall ((x_37 Nat_1) (x_38 Nat_1))
	(=> (diseqNat_1 x_37 x_38)
	    (diseqNat_1 (Z_3 x_37) (Z_3 x_38)))))
(declare-fun add_0 (Nat_1 Nat_1 Nat_1) Bool)
(declare-fun minus_0 (Nat_1 Nat_1 Nat_1) Bool)
(declare-fun le_0 (Nat_1 Nat_1) Bool)
(declare-fun ge_0 (Nat_1 Nat_1) Bool)
(declare-fun lt_0 (Nat_1 Nat_1) Bool)
(declare-fun gt_0 (Nat_1 Nat_1) Bool)
(declare-fun mult_0 (Nat_1 Nat_1 Nat_1) Bool)
(declare-fun div_0 (Nat_1 Nat_1 Nat_1) Bool)
(declare-fun mod_0 (Nat_1 Nat_1 Nat_1) Bool)
(assert (forall ((y_1 Nat_1))
	(add_0 y_1 Z_2 y_1)))
(assert (forall ((r_0 Nat_1) (x_8 Nat_1) (y_1 Nat_1))
	(=> (add_0 r_0 x_8 y_1)
	    (add_0 (Z_3 r_0) (Z_3 x_8) y_1))))
(assert (forall ((y_1 Nat_1))
	(minus_0 Z_2 Z_2 y_1)))
(assert (forall ((r_0 Nat_1) (x_8 Nat_1) (y_1 Nat_1))
	(=> (minus_0 r_0 x_8 y_1)
	    (minus_0 (Z_3 r_0) (Z_3 x_8) y_1))))
(assert (forall ((y_1 Nat_1))
	(le_0 Z_2 y_1)))
(assert (forall ((x_8 Nat_1) (y_1 Nat_1))
	(=> (le_0 x_8 y_1)
	    (le_0 (Z_3 x_8) (Z_3 y_1)))))
(assert (forall ((y_1 Nat_1))
	(ge_0 y_1 Z_2)))
(assert (forall ((x_8 Nat_1) (y_1 Nat_1))
	(=> (ge_0 x_8 y_1)
	    (ge_0 (Z_3 x_8) (Z_3 y_1)))))
(assert (forall ((y_1 Nat_1))
	(lt_0 Z_2 (Z_3 y_1))))
(assert (forall ((x_8 Nat_1) (y_1 Nat_1))
	(=> (lt_0 x_8 y_1)
	    (lt_0 (Z_3 x_8) (Z_3 y_1)))))
(assert (forall ((y_1 Nat_1))
	(gt_0 (Z_3 y_1) Z_2)))
(assert (forall ((x_8 Nat_1) (y_1 Nat_1))
	(=> (gt_0 x_8 y_1)
	    (gt_0 (Z_3 x_8) (Z_3 y_1)))))
(assert (forall ((y_1 Nat_1))
	(mult_0 Z_2 Z_2 y_1)))
(assert (forall ((r_0 Nat_1) (x_8 Nat_1) (y_1 Nat_1) (z_4 Nat_1))
	(=>	(and (mult_0 r_0 x_8 y_1)
			(add_0 z_4 r_0 y_1))
		(mult_0 z_4 (Z_3 x_8) y_1))))
(assert (forall ((x_8 Nat_1) (y_1 Nat_1))
	(=> (lt_0 x_8 y_1)
	    (div_0 Z_2 x_8 y_1))))
(assert (forall ((r_0 Nat_1) (x_8 Nat_1) (y_1 Nat_1) (z_4 Nat_1))
	(=>	(and (ge_0 x_8 y_1)
			(minus_0 z_4 x_8 y_1)
			(div_0 r_0 z_4 y_1))
		(div_0 (Z_3 r_0) x_8 y_1))))
(assert (forall ((x_8 Nat_1) (y_1 Nat_1))
	(=> (lt_0 x_8 y_1)
	    (mod_0 x_8 x_8 y_1))))
(assert (forall ((r_0 Nat_1) (x_8 Nat_1) (y_1 Nat_1) (z_4 Nat_1))
	(=>	(and (ge_0 x_8 y_1)
			(minus_0 z_4 x_8 y_1)
			(mod_0 r_0 z_4 y_1))
		(mod_0 r_0 x_8 y_1))))
(declare-datatypes ((list_0 0)) (((nil_0 ) (cons_0 (head_0 Nat_1) (tail_0 list_0)))))
(declare-fun diseqlist_0 (list_0 list_0) Bool)
(declare-fun head_1 (Nat_1 list_0) Bool)
(declare-fun tail_1 (list_0 list_0) Bool)
(declare-fun isnil_0 (list_0) Bool)
(declare-fun iscons_0 (list_0) Bool)
(assert (forall ((x_10 Nat_1) (x_11 list_0))
	(head_1 x_10 (cons_0 x_10 x_11))))
(assert (forall ((x_10 Nat_1) (x_11 list_0))
	(tail_1 x_11 (cons_0 x_10 x_11))))
(assert (isnil_0 nil_0))
(assert (forall ((x_13 Nat_1) (x_14 list_0))
	(iscons_0 (cons_0 x_13 x_14))))
(assert (forall ((x_15 Nat_1) (x_16 list_0))
	(diseqlist_0 nil_0 (cons_0 x_15 x_16))))
(assert (forall ((x_17 Nat_1) (x_18 list_0))
	(diseqlist_0 (cons_0 x_17 x_18) nil_0)))
(assert (forall ((x_19 Nat_1) (x_20 list_0) (x_21 Nat_1) (x_22 list_0))
	(=> (diseqNat_1 x_19 x_21)
	    (diseqlist_0 (cons_0 x_19 x_20) (cons_0 x_21 x_22)))))
(assert (forall ((x_19 Nat_1) (x_20 list_0) (x_21 Nat_1) (x_22 list_0))
	(=> (diseqlist_0 x_20 x_22)
	    (diseqlist_0 (cons_0 x_19 x_20) (cons_0 x_21 x_22)))))
(declare-datatypes ((Nat_0 0)) (((Z_0 ) (S_0 (projS_0 Nat_0)))))
(declare-fun diseqNat_0 (Nat_0 Nat_0) Bool)
(declare-fun projS_1 (Nat_0 Nat_0) Bool)
(declare-fun isZ_2 (Nat_0) Bool)
(declare-fun isS_0 (Nat_0) Bool)
(assert (forall ((x_24 Nat_0))
	(projS_1 x_24 (S_0 x_24))))
(assert (isZ_2 Z_0))
(assert (forall ((x_26 Nat_0))
	(isS_0 (S_0 x_26))))
(assert (forall ((x_27 Nat_0))
	(diseqNat_0 Z_0 (S_0 x_27))))
(assert (forall ((x_28 Nat_0))
	(diseqNat_0 (S_0 x_28) Z_0)))
(assert (forall ((x_29 Nat_0) (x_30 Nat_0))
	(=> (diseqNat_0 x_29 x_30)
	    (diseqNat_0 (S_0 x_29) (S_0 x_30)))))
(declare-fun drop_0 (list_0 Nat_0 list_0) Bool)
(assert (forall ((x_3 list_0) (x_1 Nat_1) (x_2 list_0) (z_1 Nat_0))
	(=> (drop_0 x_3 z_1 x_2)
	    (drop_0 x_3 (S_0 z_1) (cons_0 x_1 x_2)))))
(assert (forall ((z_1 Nat_0))
	(drop_0 nil_0 (S_0 z_1) nil_0)))
(assert (forall ((x_6 list_0))
	(drop_0 x_6 Z_0 x_6)))
(assert (forall ((x_7 list_0) (xs_0 list_0))
	(=>	(and (diseqlist_0 x_7 xs_0)
			(drop_0 x_7 Z_0 xs_0))
		false)))
(check-sat)
