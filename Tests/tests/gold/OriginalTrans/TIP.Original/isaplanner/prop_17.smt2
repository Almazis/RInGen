(set-logic HORN)
(declare-datatypes ((Bool_0 0)) (((false_0 ) (true_0 ))))
(declare-fun diseqBool_0 (Bool_0 Bool_0) Bool)
(declare-fun isfalse_1 (Bool_0) Bool)
(declare-fun istrue_1 (Bool_0) Bool)
(assert (isfalse_1 false_0))
(assert (istrue_1 true_0))
(assert (diseqBool_0 false_0 true_0))
(assert (diseqBool_0 true_0 false_0))
(declare-fun and_0 (Bool_0 Bool_0 Bool_0) Bool)
(declare-fun or_0 (Bool_0 Bool_0 Bool_0) Bool)
(declare-fun hence_0 (Bool_0 Bool_0 Bool_0) Bool)
(declare-fun not_0 (Bool_0 Bool_0) Bool)
(assert (and_0 false_0 false_0 false_0))
(assert (and_0 false_0 true_0 false_0))
(assert (and_0 false_0 false_0 true_0))
(assert (and_0 true_0 true_0 true_0))
(assert (or_0 false_0 false_0 false_0))
(assert (or_0 true_0 true_0 false_0))
(assert (or_0 true_0 false_0 true_0))
(assert (or_0 true_0 true_0 true_0))
(assert (hence_0 true_0 false_0 false_0))
(assert (hence_0 false_0 true_0 false_0))
(assert (hence_0 true_0 false_0 true_0))
(assert (hence_0 true_0 true_0 true_0))
(assert (not_0 true_0 false_0))
(assert (not_0 false_0 true_0))
(declare-datatypes ((Nat_0 0)) (((Z_0 ) (S_0 (projS_0 Nat_0)))))
(declare-fun diseqNat_0 (Nat_0 Nat_0) Bool)
(declare-fun projS_1 (Nat_0 Nat_0) Bool)
(declare-fun isZ_2 (Nat_0) Bool)
(declare-fun isS_0 (Nat_0) Bool)
(assert (forall ((x_21 Nat_0))
	(projS_1 x_21 (S_0 x_21))))
(assert (isZ_2 Z_0))
(assert (forall ((x_23 Nat_0))
	(isS_0 (S_0 x_23))))
(assert (forall ((x_24 Nat_0))
	(diseqNat_0 Z_0 (S_0 x_24))))
(assert (forall ((x_25 Nat_0))
	(diseqNat_0 (S_0 x_25) Z_0)))
(assert (forall ((x_26 Nat_0) (x_27 Nat_0))
	(=> (diseqNat_0 x_26 x_27)
	    (diseqNat_0 (S_0 x_26) (S_0 x_27)))))
(declare-fun x_0 (Bool_0 Nat_0 Nat_0) Bool)
(assert (forall ((x_6 Bool_0) (y_1 Nat_0) (x_2 Nat_0))
	(=> (x_0 x_6 x_2 y_1)
	    (x_0 x_6 (S_0 x_2) (S_0 y_1)))))
(assert (forall ((x_2 Nat_0))
	(x_0 false_0 (S_0 x_2) Z_0)))
(assert (forall ((z_1 Nat_0))
	(x_0 false_0 Z_0 (S_0 z_1))))
(assert (x_0 true_0 Z_0 Z_0))
(declare-fun x_3 (Bool_0 Nat_0 Nat_0) Bool)
(assert (forall ((x_11 Bool_0) (x_5 Nat_0) (z_2 Nat_0))
	(=> (x_3 x_11 z_2 x_5)
	    (x_3 x_11 (S_0 z_2) (S_0 x_5)))))
(assert (forall ((z_2 Nat_0))
	(x_3 false_0 (S_0 z_2) Z_0)))
(assert (forall ((y_2 Nat_0))
	(x_3 true_0 Z_0 y_2)))
(assert (forall ((x_15 Bool_0) (x_16 Bool_0) (n_0 Nat_0))
	(=>	(and (diseqBool_0 x_15 x_16)
			(x_3 x_15 n_0 Z_0)
			(x_0 x_16 n_0 Z_0))
		false)))
(check-sat)
