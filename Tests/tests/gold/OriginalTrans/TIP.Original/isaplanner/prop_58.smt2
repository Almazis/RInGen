(set-logic HORN)
(declare-datatypes ((Nat_1 0)) (((Z_4 ) (Z_5 (unS_0 Nat_1)))))
(declare-fun diseqNat_1 (Nat_1 Nat_1) Bool)
(declare-fun unS_1 (Nat_1 Nat_1) Bool)
(declare-fun isZ_3 (Nat_1) Bool)
(declare-fun isZ_4 (Nat_1) Bool)
(assert (forall ((x_74 Nat_1))
	(unS_1 x_74 (Z_5 x_74))))
(assert (isZ_3 Z_4))
(assert (forall ((x_76 Nat_1))
	(isZ_4 (Z_5 x_76))))
(assert (forall ((x_77 Nat_1))
	(diseqNat_1 Z_4 (Z_5 x_77))))
(assert (forall ((x_78 Nat_1))
	(diseqNat_1 (Z_5 x_78) Z_4)))
(assert (forall ((x_79 Nat_1) (x_80 Nat_1))
	(=> (diseqNat_1 x_79 x_80)
	    (diseqNat_1 (Z_5 x_79) (Z_5 x_80)))))
(declare-fun add_0 (Nat_1 Nat_1 Nat_1) Bool)
(declare-fun minus_0 (Nat_1 Nat_1 Nat_1) Bool)
(declare-fun le_0 (Nat_1 Nat_1) Bool)
(declare-fun ge_0 (Nat_1 Nat_1) Bool)
(declare-fun lt_0 (Nat_1 Nat_1) Bool)
(declare-fun gt_0 (Nat_1 Nat_1) Bool)
(declare-fun mult_0 (Nat_1 Nat_1 Nat_1) Bool)
(declare-fun div_0 (Nat_1 Nat_1 Nat_1) Bool)
(declare-fun mod_0 (Nat_1 Nat_1 Nat_1) Bool)
(assert (forall ((y_3 Nat_1))
	(add_0 y_3 Z_4 y_3)))
(assert (forall ((r_0 Nat_1) (x_27 Nat_1) (y_3 Nat_1))
	(=> (add_0 r_0 x_27 y_3)
	    (add_0 (Z_5 r_0) (Z_5 x_27) y_3))))
(assert (forall ((y_3 Nat_1))
	(minus_0 Z_4 Z_4 y_3)))
(assert (forall ((r_0 Nat_1) (x_27 Nat_1) (y_3 Nat_1))
	(=> (minus_0 r_0 x_27 y_3)
	    (minus_0 (Z_5 r_0) (Z_5 x_27) y_3))))
(assert (forall ((y_3 Nat_1))
	(le_0 Z_4 y_3)))
(assert (forall ((x_27 Nat_1) (y_3 Nat_1))
	(=> (le_0 x_27 y_3)
	    (le_0 (Z_5 x_27) (Z_5 y_3)))))
(assert (forall ((y_3 Nat_1))
	(ge_0 y_3 Z_4)))
(assert (forall ((x_27 Nat_1) (y_3 Nat_1))
	(=> (ge_0 x_27 y_3)
	    (ge_0 (Z_5 x_27) (Z_5 y_3)))))
(assert (forall ((y_3 Nat_1))
	(lt_0 Z_4 (Z_5 y_3))))
(assert (forall ((x_27 Nat_1) (y_3 Nat_1))
	(=> (lt_0 x_27 y_3)
	    (lt_0 (Z_5 x_27) (Z_5 y_3)))))
(assert (forall ((y_3 Nat_1))
	(gt_0 (Z_5 y_3) Z_4)))
(assert (forall ((x_27 Nat_1) (y_3 Nat_1))
	(=> (gt_0 x_27 y_3)
	    (gt_0 (Z_5 x_27) (Z_5 y_3)))))
(assert (forall ((y_3 Nat_1))
	(mult_0 Z_4 Z_4 y_3)))
(assert (forall ((r_0 Nat_1) (x_27 Nat_1) (y_3 Nat_1) (z_6 Nat_1))
	(=>	(and (mult_0 r_0 x_27 y_3)
			(add_0 z_6 r_0 y_3))
		(mult_0 z_6 (Z_5 x_27) y_3))))
(assert (forall ((x_27 Nat_1) (y_3 Nat_1))
	(=> (lt_0 x_27 y_3)
	    (div_0 Z_4 x_27 y_3))))
(assert (forall ((r_0 Nat_1) (x_27 Nat_1) (y_3 Nat_1) (z_6 Nat_1))
	(=>	(and (ge_0 x_27 y_3)
			(minus_0 z_6 x_27 y_3)
			(div_0 r_0 z_6 y_3))
		(div_0 (Z_5 r_0) x_27 y_3))))
(assert (forall ((x_27 Nat_1) (y_3 Nat_1))
	(=> (lt_0 x_27 y_3)
	    (mod_0 x_27 x_27 y_3))))
(assert (forall ((r_0 Nat_1) (x_27 Nat_1) (y_3 Nat_1) (z_6 Nat_1))
	(=>	(and (ge_0 x_27 y_3)
			(minus_0 z_6 x_27 y_3)
			(mod_0 r_0 z_6 y_3))
		(mod_0 r_0 x_27 y_3))))
(declare-datatypes ((pair_0 0)) (((pair_1 (projpair_0 Nat_1) (projpair_1 Nat_1)))))
(declare-fun diseqpair_0 (pair_0 pair_0) Bool)
(declare-fun projpair_2 (Nat_1 pair_0) Bool)
(declare-fun projpair_3 (Nat_1 pair_0) Bool)
(declare-fun ispair_0 (pair_0) Bool)
(assert (forall ((x_28 Nat_1) (x_29 Nat_1))
	(projpair_2 x_28 (pair_1 x_28 x_29))))
(assert (forall ((x_28 Nat_1) (x_29 Nat_1))
	(projpair_3 x_29 (pair_1 x_28 x_29))))
(assert (forall ((x_31 Nat_1) (x_32 Nat_1))
	(ispair_0 (pair_1 x_31 x_32))))
(assert (forall ((x_33 Nat_1) (x_34 Nat_1) (x_35 Nat_1) (x_36 Nat_1))
	(=> (diseqNat_1 x_33 x_35)
	    (diseqpair_0 (pair_1 x_33 x_34) (pair_1 x_35 x_36)))))
(assert (forall ((x_33 Nat_1) (x_34 Nat_1) (x_35 Nat_1) (x_36 Nat_1))
	(=> (diseqNat_1 x_34 x_36)
	    (diseqpair_0 (pair_1 x_33 x_34) (pair_1 x_35 x_36)))))
(declare-datatypes ((list_0 0)) (((nil_0 ) (cons_0 (head_0 Nat_1) (tail_0 list_0)))))
(declare-fun diseqlist_0 (list_0 list_0) Bool)
(declare-fun head_2 (Nat_1 list_0) Bool)
(declare-fun tail_2 (list_0 list_0) Bool)
(declare-fun isnil_0 (list_0) Bool)
(declare-fun iscons_0 (list_0) Bool)
(assert (forall ((x_38 Nat_1) (x_39 list_0))
	(head_2 x_38 (cons_0 x_38 x_39))))
(assert (forall ((x_38 Nat_1) (x_39 list_0))
	(tail_2 x_39 (cons_0 x_38 x_39))))
(assert (isnil_0 nil_0))
(assert (forall ((x_41 Nat_1) (x_42 list_0))
	(iscons_0 (cons_0 x_41 x_42))))
(assert (forall ((x_43 Nat_1) (x_44 list_0))
	(diseqlist_0 nil_0 (cons_0 x_43 x_44))))
(assert (forall ((x_45 Nat_1) (x_46 list_0))
	(diseqlist_0 (cons_0 x_45 x_46) nil_0)))
(assert (forall ((x_47 Nat_1) (x_48 list_0) (x_49 Nat_1) (x_50 list_0))
	(=> (diseqNat_1 x_47 x_49)
	    (diseqlist_0 (cons_0 x_47 x_48) (cons_0 x_49 x_50)))))
(assert (forall ((x_47 Nat_1) (x_48 list_0) (x_49 Nat_1) (x_50 list_0))
	(=> (diseqlist_0 x_48 x_50)
	    (diseqlist_0 (cons_0 x_47 x_48) (cons_0 x_49 x_50)))))
(declare-datatypes ((list_1 0)) (((nil_1 ) (cons_1 (head_1 pair_0) (tail_1 list_1)))))
(declare-fun diseqlist_1 (list_1 list_1) Bool)
(declare-fun head_3 (pair_0 list_1) Bool)
(declare-fun tail_3 (list_1 list_1) Bool)
(declare-fun isnil_1 (list_1) Bool)
(declare-fun iscons_1 (list_1) Bool)
(assert (forall ((x_52 pair_0) (x_53 list_1))
	(head_3 x_52 (cons_1 x_52 x_53))))
(assert (forall ((x_52 pair_0) (x_53 list_1))
	(tail_3 x_53 (cons_1 x_52 x_53))))
(assert (isnil_1 nil_1))
(assert (forall ((x_55 pair_0) (x_56 list_1))
	(iscons_1 (cons_1 x_55 x_56))))
(assert (forall ((x_57 pair_0) (x_58 list_1))
	(diseqlist_1 nil_1 (cons_1 x_57 x_58))))
(assert (forall ((x_59 pair_0) (x_60 list_1))
	(diseqlist_1 (cons_1 x_59 x_60) nil_1)))
(assert (forall ((x_61 pair_0) (x_62 list_1) (x_63 pair_0) (x_64 list_1))
	(=> (diseqpair_0 x_61 x_63)
	    (diseqlist_1 (cons_1 x_61 x_62) (cons_1 x_63 x_64)))))
(assert (forall ((x_61 pair_0) (x_62 list_1) (x_63 pair_0) (x_64 list_1))
	(=> (diseqlist_1 x_62 x_64)
	    (diseqlist_1 (cons_1 x_61 x_62) (cons_1 x_63 x_64)))))
(declare-datatypes ((Nat_0 0)) (((Z_0 ) (S_0 (projS_0 Nat_0)))))
(declare-fun diseqNat_0 (Nat_0 Nat_0) Bool)
(declare-fun projS_1 (Nat_0 Nat_0) Bool)
(declare-fun isZ_2 (Nat_0) Bool)
(declare-fun isS_0 (Nat_0) Bool)
(assert (forall ((x_66 Nat_0))
	(projS_1 x_66 (S_0 x_66))))
(assert (isZ_2 Z_0))
(assert (forall ((x_68 Nat_0))
	(isS_0 (S_0 x_68))))
(assert (forall ((x_69 Nat_0))
	(diseqNat_0 Z_0 (S_0 x_69))))
(assert (forall ((x_70 Nat_0))
	(diseqNat_0 (S_0 x_70) Z_0)))
(assert (forall ((x_71 Nat_0) (x_72 Nat_0))
	(=> (diseqNat_0 x_71 x_72)
	    (diseqNat_0 (S_0 x_71) (S_0 x_72)))))
(declare-fun zip_0 (list_1 list_0 list_0) Bool)
(assert (forall ((x_11 list_1) (x_2 Nat_1) (x_3 list_0) (z_1 Nat_1) (x_1 list_0))
	(=> (zip_0 x_11 x_1 x_3)
	    (zip_0 (cons_1 (pair_1 z_1 x_2) x_11) (cons_0 z_1 x_1) (cons_0 x_2 x_3)))))
(assert (forall ((z_1 Nat_1) (x_1 list_0))
	(zip_0 nil_1 (cons_0 z_1 x_1) nil_0)))
(assert (forall ((y_0 list_0))
	(zip_0 nil_1 nil_0 y_0)))
(declare-fun drop_0 (list_0 Nat_0 list_0) Bool)
(assert (forall ((x_14 list_0) (x_5 Nat_1) (x_6 list_0) (z_2 Nat_0))
	(=> (drop_0 x_14 z_2 x_6)
	    (drop_0 x_14 (S_0 z_2) (cons_0 x_5 x_6)))))
(assert (forall ((z_2 Nat_0))
	(drop_0 nil_0 (S_0 z_2) nil_0)))
(assert (forall ((x_17 list_0))
	(drop_0 x_17 Z_0 x_17)))
(declare-fun drop_1 (list_1 Nat_0 list_1) Bool)
(assert (forall ((x_18 list_1) (x_8 pair_0) (x_9 list_1) (z_3 Nat_0))
	(=> (drop_1 x_18 z_3 x_9)
	    (drop_1 x_18 (S_0 z_3) (cons_1 x_8 x_9)))))
(assert (forall ((z_3 Nat_0))
	(drop_1 nil_1 (S_0 z_3) nil_1)))
(assert (forall ((x_21 list_1))
	(drop_1 x_21 Z_0 x_21)))
(assert (forall ((x_22 list_1) (x_23 list_1) (x_24 list_0) (x_25 list_0) (x_26 list_1) (n_0 Nat_0) (xs_0 list_0) (ys_0 list_0))
	(=>	(and (diseqlist_1 x_23 x_26)
			(zip_0 x_22 xs_0 ys_0)
			(drop_1 x_23 n_0 x_22)
			(drop_0 x_24 n_0 xs_0)
			(drop_0 x_25 n_0 ys_0)
			(zip_0 x_26 x_24 x_25))
		false)))
(check-sat)
