(set-logic HORN)
(declare-datatypes ((Nat_1 0)) (((Z_4 ) (Z_5 (unS_0 Nat_1)))))
(declare-fun diseqNat_1 (Nat_1 Nat_1) Bool)
(declare-fun unS_1 (Nat_1 Nat_1) Bool)
(declare-fun isZ_3 (Nat_1) Bool)
(declare-fun isZ_4 (Nat_1) Bool)
(assert (forall ((x_46 Nat_1))
	(unS_1 x_46 (Z_5 x_46))))
(assert (isZ_3 Z_4))
(assert (forall ((x_48 Nat_1))
	(isZ_4 (Z_5 x_48))))
(assert (forall ((x_49 Nat_1))
	(diseqNat_1 Z_4 (Z_5 x_49))))
(assert (forall ((x_50 Nat_1))
	(diseqNat_1 (Z_5 x_50) Z_4)))
(assert (forall ((x_51 Nat_1) (x_52 Nat_1))
	(=> (diseqNat_1 x_51 x_52)
	    (diseqNat_1 (Z_5 x_51) (Z_5 x_52)))))
(declare-fun add_0 (Nat_1 Nat_1 Nat_1) Bool)
(declare-fun minus_0 (Nat_1 Nat_1 Nat_1) Bool)
(declare-fun le_0 (Nat_1 Nat_1) Bool)
(declare-fun ge_0 (Nat_1 Nat_1) Bool)
(declare-fun lt_0 (Nat_1 Nat_1) Bool)
(declare-fun gt_0 (Nat_1 Nat_1) Bool)
(declare-fun mult_0 (Nat_1 Nat_1 Nat_1) Bool)
(declare-fun div_0 (Nat_1 Nat_1 Nat_1) Bool)
(declare-fun mod_0 (Nat_1 Nat_1 Nat_1) Bool)
(assert (forall ((y_3 Nat_1))
	(add_0 y_3 Z_4 y_3)))
(assert (forall ((r_0 Nat_1) (x_22 Nat_1) (y_3 Nat_1))
	(=> (add_0 r_0 x_22 y_3)
	    (add_0 (Z_5 r_0) (Z_5 x_22) y_3))))
(assert (forall ((y_3 Nat_1))
	(minus_0 Z_4 Z_4 y_3)))
(assert (forall ((r_0 Nat_1) (x_22 Nat_1) (y_3 Nat_1))
	(=> (minus_0 r_0 x_22 y_3)
	    (minus_0 (Z_5 r_0) (Z_5 x_22) y_3))))
(assert (forall ((y_3 Nat_1))
	(le_0 Z_4 y_3)))
(assert (forall ((x_22 Nat_1) (y_3 Nat_1))
	(=> (le_0 x_22 y_3)
	    (le_0 (Z_5 x_22) (Z_5 y_3)))))
(assert (forall ((y_3 Nat_1))
	(ge_0 y_3 Z_4)))
(assert (forall ((x_22 Nat_1) (y_3 Nat_1))
	(=> (ge_0 x_22 y_3)
	    (ge_0 (Z_5 x_22) (Z_5 y_3)))))
(assert (forall ((y_3 Nat_1))
	(lt_0 Z_4 (Z_5 y_3))))
(assert (forall ((x_22 Nat_1) (y_3 Nat_1))
	(=> (lt_0 x_22 y_3)
	    (lt_0 (Z_5 x_22) (Z_5 y_3)))))
(assert (forall ((y_3 Nat_1))
	(gt_0 (Z_5 y_3) Z_4)))
(assert (forall ((x_22 Nat_1) (y_3 Nat_1))
	(=> (gt_0 x_22 y_3)
	    (gt_0 (Z_5 x_22) (Z_5 y_3)))))
(assert (forall ((y_3 Nat_1))
	(mult_0 Z_4 Z_4 y_3)))
(assert (forall ((r_0 Nat_1) (x_22 Nat_1) (y_3 Nat_1) (z_6 Nat_1))
	(=>	(and (mult_0 r_0 x_22 y_3)
			(add_0 z_6 r_0 y_3))
		(mult_0 z_6 (Z_5 x_22) y_3))))
(assert (forall ((x_22 Nat_1) (y_3 Nat_1))
	(=> (lt_0 x_22 y_3)
	    (div_0 Z_4 x_22 y_3))))
(assert (forall ((r_0 Nat_1) (x_22 Nat_1) (y_3 Nat_1) (z_6 Nat_1))
	(=>	(and (ge_0 x_22 y_3)
			(minus_0 z_6 x_22 y_3)
			(div_0 r_0 z_6 y_3))
		(div_0 (Z_5 r_0) x_22 y_3))))
(assert (forall ((x_22 Nat_1) (y_3 Nat_1))
	(=> (lt_0 x_22 y_3)
	    (mod_0 x_22 x_22 y_3))))
(assert (forall ((r_0 Nat_1) (x_22 Nat_1) (y_3 Nat_1) (z_6 Nat_1))
	(=>	(and (ge_0 x_22 y_3)
			(minus_0 z_6 x_22 y_3)
			(mod_0 r_0 z_6 y_3))
		(mod_0 r_0 x_22 y_3))))
(declare-datatypes ((list_0 0)) (((nil_0 ) (cons_0 (head_0 Nat_1) (tail_0 list_0)))))
(declare-fun diseqlist_0 (list_0 list_0) Bool)
(declare-fun head_1 (Nat_1 list_0) Bool)
(declare-fun tail_1 (list_0 list_0) Bool)
(declare-fun isnil_0 (list_0) Bool)
(declare-fun iscons_0 (list_0) Bool)
(assert (forall ((x_24 Nat_1) (x_25 list_0))
	(head_1 x_24 (cons_0 x_24 x_25))))
(assert (forall ((x_24 Nat_1) (x_25 list_0))
	(tail_1 x_25 (cons_0 x_24 x_25))))
(assert (isnil_0 nil_0))
(assert (forall ((x_27 Nat_1) (x_28 list_0))
	(iscons_0 (cons_0 x_27 x_28))))
(assert (forall ((x_29 Nat_1) (x_30 list_0))
	(diseqlist_0 nil_0 (cons_0 x_29 x_30))))
(assert (forall ((x_31 Nat_1) (x_32 list_0))
	(diseqlist_0 (cons_0 x_31 x_32) nil_0)))
(assert (forall ((x_33 Nat_1) (x_34 list_0) (x_35 Nat_1) (x_36 list_0))
	(=> (diseqNat_1 x_33 x_35)
	    (diseqlist_0 (cons_0 x_33 x_34) (cons_0 x_35 x_36)))))
(assert (forall ((x_33 Nat_1) (x_34 list_0) (x_35 Nat_1) (x_36 list_0))
	(=> (diseqlist_0 x_34 x_36)
	    (diseqlist_0 (cons_0 x_33 x_34) (cons_0 x_35 x_36)))))
(declare-datatypes ((Nat_0 0)) (((Z_0 ) (S_0 (projS_0 Nat_0)))))
(declare-fun diseqNat_0 (Nat_0 Nat_0) Bool)
(declare-fun projS_1 (Nat_0 Nat_0) Bool)
(declare-fun isZ_2 (Nat_0) Bool)
(declare-fun isS_0 (Nat_0) Bool)
(assert (forall ((x_38 Nat_0))
	(projS_1 x_38 (S_0 x_38))))
(assert (isZ_2 Z_0))
(assert (forall ((x_40 Nat_0))
	(isS_0 (S_0 x_40))))
(assert (forall ((x_41 Nat_0))
	(diseqNat_0 Z_0 (S_0 x_41))))
(assert (forall ((x_42 Nat_0))
	(diseqNat_0 (S_0 x_42) Z_0)))
(assert (forall ((x_43 Nat_0) (x_44 Nat_0))
	(=> (diseqNat_0 x_43 x_44)
	    (diseqNat_0 (S_0 x_43) (S_0 x_44)))))
(declare-fun take_0 (list_0 Nat_0 list_0) Bool)
(assert (forall ((x_9 list_0) (x_1 Nat_1) (x_2 list_0) (z_1 Nat_0))
	(=> (take_0 x_9 z_1 x_2)
	    (take_0 (cons_0 x_1 x_9) (S_0 z_1) (cons_0 x_1 x_2)))))
(assert (forall ((z_1 Nat_0))
	(take_0 nil_0 (S_0 z_1) nil_0)))
(assert (forall ((y_0 list_0))
	(take_0 nil_0 Z_0 y_0)))
(declare-fun drop_0 (list_0 Nat_0 list_0) Bool)
(assert (forall ((x_12 list_0) (x_4 Nat_1) (x_5 list_0) (z_2 Nat_0))
	(=> (drop_0 x_12 z_2 x_5)
	    (drop_0 x_12 (S_0 z_2) (cons_0 x_4 x_5)))))
(assert (forall ((z_2 Nat_0))
	(drop_0 nil_0 (S_0 z_2) nil_0)))
(assert (forall ((x_15 list_0))
	(drop_0 x_15 Z_0 x_15)))
(declare-fun x_6 (list_0 list_0 list_0) Bool)
(assert (forall ((x_17 list_0) (z_3 Nat_1) (xs_0 list_0) (y_2 list_0))
	(=> (x_6 x_17 xs_0 y_2)
	    (x_6 (cons_0 z_3 x_17) (cons_0 z_3 xs_0) y_2))))
(assert (forall ((x_18 list_0))
	(x_6 x_18 nil_0 x_18)))
(assert (forall ((x_19 list_0) (x_20 list_0) (x_21 list_0) (n_0 Nat_0) (xs_1 list_0))
	(=>	(and (diseqlist_0 x_21 xs_1)
			(take_0 x_19 n_0 xs_1)
			(drop_0 x_20 n_0 xs_1)
			(x_6 x_21 x_19 x_20))
		false)))
(check-sat)
