(set-logic HORN)
(declare-datatypes ((Nat_0 0)) (((Z_0 ) (S_0 (projS_0 Nat_0)))))
(declare-fun diseqNat_0 (Nat_0 Nat_0) Bool)
(declare-fun projS_1 (Nat_0 Nat_0) Bool)
(declare-fun isZ_2 (Nat_0) Bool)
(declare-fun isS_0 (Nat_0) Bool)
(assert (forall ((x_23 Nat_0))
	(projS_1 x_23 (S_0 x_23))))
(assert (isZ_2 Z_0))
(assert (forall ((x_25 Nat_0))
	(isS_0 (S_0 x_25))))
(assert (forall ((x_26 Nat_0))
	(diseqNat_0 Z_0 (S_0 x_26))))
(assert (forall ((x_27 Nat_0))
	(diseqNat_0 (S_0 x_27) Z_0)))
(assert (forall ((x_28 Nat_0) (x_29 Nat_0))
	(=> (diseqNat_0 x_28 x_29)
	    (diseqNat_0 (S_0 x_28) (S_0 x_29)))))
(declare-datatypes ((list_0 0)) (((nil_0 ) (cons_0 (head_0 Nat_0) (tail_0 list_0)))))
(declare-fun diseqlist_0 (list_0 list_0) Bool)
(declare-fun head_1 (Nat_0 list_0) Bool)
(declare-fun tail_1 (list_0 list_0) Bool)
(declare-fun isnil_0 (list_0) Bool)
(declare-fun iscons_0 (list_0) Bool)
(assert (forall ((x_31 Nat_0) (x_32 list_0))
	(head_1 x_31 (cons_0 x_31 x_32))))
(assert (forall ((x_31 Nat_0) (x_32 list_0))
	(tail_1 x_32 (cons_0 x_31 x_32))))
(assert (isnil_0 nil_0))
(assert (forall ((x_34 Nat_0) (x_35 list_0))
	(iscons_0 (cons_0 x_34 x_35))))
(assert (forall ((x_36 Nat_0) (x_37 list_0))
	(diseqlist_0 nil_0 (cons_0 x_36 x_37))))
(assert (forall ((x_38 Nat_0) (x_39 list_0))
	(diseqlist_0 (cons_0 x_38 x_39) nil_0)))
(assert (forall ((x_40 Nat_0) (x_41 list_0) (x_42 Nat_0) (x_43 list_0))
	(=> (diseqNat_0 x_40 x_42)
	    (diseqlist_0 (cons_0 x_40 x_41) (cons_0 x_42 x_43)))))
(assert (forall ((x_40 Nat_0) (x_41 list_0) (x_42 Nat_0) (x_43 list_0))
	(=> (diseqlist_0 x_41 x_43)
	    (diseqlist_0 (cons_0 x_40 x_41) (cons_0 x_42 x_43)))))
(declare-fun last_0 (Nat_0 list_0) Bool)
(assert (forall ((x_7 Nat_0) (x_1 Nat_0) (x_2 list_0) (y_0 Nat_0))
	(=> (last_0 x_7 (cons_0 x_1 x_2))
	    (last_0 x_7 (cons_0 y_0 (cons_0 x_1 x_2))))))
(assert (forall ((x_9 Nat_0))
	(last_0 x_9 (cons_0 x_9 nil_0))))
(assert (last_0 Z_0 nil_0))
(declare-fun lastOfTwo_0 (Nat_0 list_0 list_0) Bool)
(assert (forall ((x_11 Nat_0) (z_2 Nat_0) (x_4 list_0) (x_3 list_0))
	(=> (last_0 x_11 (cons_0 z_2 x_4))
	    (lastOfTwo_0 x_11 x_3 (cons_0 z_2 x_4)))))
(assert (forall ((x_13 Nat_0) (x_3 list_0))
	(=> (last_0 x_13 x_3)
	    (lastOfTwo_0 x_13 x_3 nil_0))))
(declare-fun x_5 (list_0 list_0 list_0) Bool)
(assert (forall ((x_16 list_0) (z_3 Nat_0) (xs_0 list_0) (y_2 list_0))
	(=> (x_5 x_16 xs_0 y_2)
	    (x_5 (cons_0 z_3 x_16) (cons_0 z_3 xs_0) y_2))))
(assert (forall ((x_17 list_0))
	(x_5 x_17 nil_0 x_17)))
(assert (forall ((x_18 list_0) (x_19 Nat_0) (x_20 Nat_0) (xs_1 list_0) (ys_0 list_0))
	(=>	(and (diseqNat_0 x_19 x_20)
			(x_5 x_18 xs_1 ys_0)
			(last_0 x_19 x_18)
			(lastOfTwo_0 x_20 xs_1 ys_0))
		false)))
(check-sat)
