(set-logic HORN)
(declare-datatypes ((Nat_0 0)) (((Z_1 ) (Z_2 (unS_0 Nat_0)))))
(declare-fun diseqNat_0 (Nat_0 Nat_0) Bool)
(declare-fun unS_1 (Nat_0 Nat_0) Bool)
(declare-fun isZ_2 (Nat_0) Bool)
(declare-fun isZ_3 (Nat_0) Bool)
(assert (forall ((x_55 Nat_0))
	(unS_1 x_55 (Z_2 x_55))))
(assert (isZ_2 Z_1))
(assert (forall ((x_57 Nat_0))
	(isZ_3 (Z_2 x_57))))
(assert (forall ((x_58 Nat_0))
	(diseqNat_0 Z_1 (Z_2 x_58))))
(assert (forall ((x_59 Nat_0))
	(diseqNat_0 (Z_2 x_59) Z_1)))
(assert (forall ((x_60 Nat_0) (x_61 Nat_0))
	(=> (diseqNat_0 x_60 x_61)
	    (diseqNat_0 (Z_2 x_60) (Z_2 x_61)))))
(declare-fun add_0 (Nat_0 Nat_0 Nat_0) Bool)
(declare-fun minus_0 (Nat_0 Nat_0 Nat_0) Bool)
(declare-fun le_0 (Nat_0 Nat_0) Bool)
(declare-fun ge_0 (Nat_0 Nat_0) Bool)
(declare-fun lt_0 (Nat_0 Nat_0) Bool)
(declare-fun gt_0 (Nat_0 Nat_0) Bool)
(declare-fun mult_0 (Nat_0 Nat_0 Nat_0) Bool)
(declare-fun div_0 (Nat_0 Nat_0 Nat_0) Bool)
(declare-fun mod_0 (Nat_0 Nat_0 Nat_0) Bool)
(assert (forall ((y_3 Nat_0))
	(add_0 y_3 Z_1 y_3)))
(assert (forall ((r_0 Nat_0) (x_25 Nat_0) (y_3 Nat_0))
	(=> (add_0 r_0 x_25 y_3)
	    (add_0 (Z_2 r_0) (Z_2 x_25) y_3))))
(assert (forall ((y_3 Nat_0))
	(minus_0 Z_1 Z_1 y_3)))
(assert (forall ((r_0 Nat_0) (x_25 Nat_0) (y_3 Nat_0))
	(=> (minus_0 r_0 x_25 y_3)
	    (minus_0 (Z_2 r_0) (Z_2 x_25) y_3))))
(assert (forall ((y_3 Nat_0))
	(le_0 Z_1 y_3)))
(assert (forall ((x_25 Nat_0) (y_3 Nat_0))
	(=> (le_0 x_25 y_3)
	    (le_0 (Z_2 x_25) (Z_2 y_3)))))
(assert (forall ((y_3 Nat_0))
	(ge_0 y_3 Z_1)))
(assert (forall ((x_25 Nat_0) (y_3 Nat_0))
	(=> (ge_0 x_25 y_3)
	    (ge_0 (Z_2 x_25) (Z_2 y_3)))))
(assert (forall ((y_3 Nat_0))
	(lt_0 Z_1 (Z_2 y_3))))
(assert (forall ((x_25 Nat_0) (y_3 Nat_0))
	(=> (lt_0 x_25 y_3)
	    (lt_0 (Z_2 x_25) (Z_2 y_3)))))
(assert (forall ((y_3 Nat_0))
	(gt_0 (Z_2 y_3) Z_1)))
(assert (forall ((x_25 Nat_0) (y_3 Nat_0))
	(=> (gt_0 x_25 y_3)
	    (gt_0 (Z_2 x_25) (Z_2 y_3)))))
(assert (forall ((y_3 Nat_0))
	(mult_0 Z_1 Z_1 y_3)))
(assert (forall ((r_0 Nat_0) (x_25 Nat_0) (y_3 Nat_0) (z_3 Nat_0))
	(=>	(and (mult_0 r_0 x_25 y_3)
			(add_0 z_3 r_0 y_3))
		(mult_0 z_3 (Z_2 x_25) y_3))))
(assert (forall ((x_25 Nat_0) (y_3 Nat_0))
	(=> (lt_0 x_25 y_3)
	    (div_0 Z_1 x_25 y_3))))
(assert (forall ((r_0 Nat_0) (x_25 Nat_0) (y_3 Nat_0) (z_3 Nat_0))
	(=>	(and (ge_0 x_25 y_3)
			(minus_0 z_3 x_25 y_3)
			(div_0 r_0 z_3 y_3))
		(div_0 (Z_2 r_0) x_25 y_3))))
(assert (forall ((x_25 Nat_0) (y_3 Nat_0))
	(=> (lt_0 x_25 y_3)
	    (mod_0 x_25 x_25 y_3))))
(assert (forall ((r_0 Nat_0) (x_25 Nat_0) (y_3 Nat_0) (z_3 Nat_0))
	(=>	(and (ge_0 x_25 y_3)
			(minus_0 z_3 x_25 y_3)
			(mod_0 r_0 z_3 y_3))
		(mod_0 r_0 x_25 y_3))))
(declare-datatypes ((list_0 0)) (((nil_0 ) (cons_0 (head_0 Nat_0) (tail_0 list_0)))))
(declare-fun diseqlist_0 (list_0 list_0) Bool)
(declare-fun head_2 (Nat_0 list_0) Bool)
(declare-fun tail_2 (list_0 list_0) Bool)
(declare-fun isnil_0 (list_0) Bool)
(declare-fun iscons_0 (list_0) Bool)
(assert (forall ((x_27 Nat_0) (x_28 list_0))
	(head_2 x_27 (cons_0 x_27 x_28))))
(assert (forall ((x_27 Nat_0) (x_28 list_0))
	(tail_2 x_28 (cons_0 x_27 x_28))))
(assert (isnil_0 nil_0))
(assert (forall ((x_30 Nat_0) (x_31 list_0))
	(iscons_0 (cons_0 x_30 x_31))))
(assert (forall ((x_32 Nat_0) (x_33 list_0))
	(diseqlist_0 nil_0 (cons_0 x_32 x_33))))
(assert (forall ((x_34 Nat_0) (x_35 list_0))
	(diseqlist_0 (cons_0 x_34 x_35) nil_0)))
(assert (forall ((x_36 Nat_0) (x_37 list_0) (x_38 Nat_0) (x_39 list_0))
	(=> (diseqNat_0 x_36 x_38)
	    (diseqlist_0 (cons_0 x_36 x_37) (cons_0 x_38 x_39)))))
(assert (forall ((x_36 Nat_0) (x_37 list_0) (x_38 Nat_0) (x_39 list_0))
	(=> (diseqlist_0 x_37 x_39)
	    (diseqlist_0 (cons_0 x_36 x_37) (cons_0 x_38 x_39)))))
(declare-datatypes ((list_1 0)) (((nil_1 ) (cons_1 (head_1 list_0) (tail_1 list_1)))))
(declare-fun diseqlist_1 (list_1 list_1) Bool)
(declare-fun head_3 (list_0 list_1) Bool)
(declare-fun tail_3 (list_1 list_1) Bool)
(declare-fun isnil_1 (list_1) Bool)
(declare-fun iscons_1 (list_1) Bool)
(assert (forall ((x_41 list_0) (x_42 list_1))
	(head_3 x_41 (cons_1 x_41 x_42))))
(assert (forall ((x_41 list_0) (x_42 list_1))
	(tail_3 x_42 (cons_1 x_41 x_42))))
(assert (isnil_1 nil_1))
(assert (forall ((x_44 list_0) (x_45 list_1))
	(iscons_1 (cons_1 x_44 x_45))))
(assert (forall ((x_46 list_0) (x_47 list_1))
	(diseqlist_1 nil_1 (cons_1 x_46 x_47))))
(assert (forall ((x_48 list_0) (x_49 list_1))
	(diseqlist_1 (cons_1 x_48 x_49) nil_1)))
(assert (forall ((x_50 list_0) (x_51 list_1) (x_52 list_0) (x_53 list_1))
	(=> (diseqlist_0 x_50 x_52)
	    (diseqlist_1 (cons_1 x_50 x_51) (cons_1 x_52 x_53)))))
(assert (forall ((x_50 list_0) (x_51 list_1) (x_52 list_0) (x_53 list_1))
	(=> (diseqlist_1 x_51 x_53)
	    (diseqlist_1 (cons_1 x_50 x_51) (cons_1 x_52 x_53)))))
(declare-fun x_0 (list_0 list_0 list_0) Bool)
(assert (forall ((x_7 list_0) (z_0 Nat_0) (xs_0 list_0) (y_0 list_0))
	(=> (x_0 x_7 xs_0 y_0)
	    (x_0 (cons_0 z_0 x_7) (cons_0 z_0 xs_0) y_0))))
(assert (forall ((x_8 list_0))
	(x_0 x_8 nil_0 x_8)))
(declare-fun rev_0 (list_0 list_0) Bool)
(assert (forall ((x_10 list_0) (x_11 list_0) (y_1 Nat_0) (xs_1 list_0))
	(=>	(and (rev_0 x_10 xs_1)
			(x_0 x_11 x_10 (cons_0 y_1 nil_0)))
		(rev_0 x_11 (cons_0 y_1 xs_1)))))
(assert (rev_0 nil_0 nil_0))
(declare-fun qrevflat_0 (list_0 list_1 list_0) Bool)
(assert (forall ((x_13 list_0) (x_14 list_0) (x_15 list_0) (xs_2 list_0) (xss_0 list_1) (y_2 list_0))
	(=>	(and (rev_0 x_14 xs_2)
			(x_0 x_15 x_14 y_2)
			(qrevflat_0 x_13 xss_0 x_15))
		(qrevflat_0 x_13 (cons_1 xs_2 xss_0) y_2))))
(assert (forall ((x_17 list_0))
	(qrevflat_0 x_17 nil_1 x_17)))
(declare-fun revflat_0 (list_0 list_1) Bool)
(assert (forall ((x_18 list_0) (x_19 list_0) (x_20 list_0) (xs_3 list_0) (xss_1 list_1))
	(=>	(and (revflat_0 x_19 xss_1)
			(rev_0 x_20 xs_3)
			(x_0 x_18 x_19 x_20))
		(revflat_0 x_18 (cons_1 xs_3 xss_1)))))
(assert (revflat_0 nil_0 nil_1))
(assert (forall ((x_23 list_0) (x_24 list_0) (x_5 list_1))
	(=>	(and (diseqlist_0 x_23 x_24)
			(revflat_0 x_23 x_5)
			(qrevflat_0 x_24 x_5 nil_0))
		false)))
(check-sat)
