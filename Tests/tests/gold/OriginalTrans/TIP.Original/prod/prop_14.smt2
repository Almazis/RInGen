(set-logic HORN)
(declare-datatypes ((Bool_0 0)) (((false_0 ) (true_0 ))))
(declare-fun diseqBool_0 (Bool_0 Bool_0) Bool)
(declare-fun isfalse_1 (Bool_0) Bool)
(declare-fun istrue_1 (Bool_0) Bool)
(assert (isfalse_1 false_0))
(assert (istrue_1 true_0))
(assert (diseqBool_0 false_0 true_0))
(assert (diseqBool_0 true_0 false_0))
(declare-fun and_0 (Bool_0 Bool_0 Bool_0) Bool)
(declare-fun or_0 (Bool_0 Bool_0 Bool_0) Bool)
(declare-fun hence_0 (Bool_0 Bool_0 Bool_0) Bool)
(declare-fun not_0 (Bool_0 Bool_0) Bool)
(assert (and_0 false_0 false_0 false_0))
(assert (and_0 false_0 true_0 false_0))
(assert (and_0 false_0 false_0 true_0))
(assert (and_0 true_0 true_0 true_0))
(assert (or_0 false_0 false_0 false_0))
(assert (or_0 true_0 true_0 false_0))
(assert (or_0 true_0 false_0 true_0))
(assert (or_0 true_0 true_0 true_0))
(assert (hence_0 true_0 false_0 false_0))
(assert (hence_0 false_0 true_0 false_0))
(assert (hence_0 true_0 false_0 true_0))
(assert (hence_0 true_0 true_0 true_0))
(assert (not_0 true_0 false_0))
(assert (not_0 false_0 true_0))
(declare-datatypes ((Nat_0 0)) (((Z_0 ) (S_0 (projS_0 Nat_0)))))
(declare-fun diseqNat_0 (Nat_0 Nat_0) Bool)
(declare-fun projS_1 (Nat_0 Nat_0) Bool)
(declare-fun isZ_2 (Nat_0) Bool)
(declare-fun isS_0 (Nat_0) Bool)
(assert (forall ((x_37 Nat_0))
	(projS_1 x_37 (S_0 x_37))))
(assert (isZ_2 Z_0))
(assert (forall ((x_39 Nat_0))
	(isS_0 (S_0 x_39))))
(assert (forall ((x_40 Nat_0))
	(diseqNat_0 Z_0 (S_0 x_40))))
(assert (forall ((x_41 Nat_0))
	(diseqNat_0 (S_0 x_41) Z_0)))
(assert (forall ((x_42 Nat_0) (x_43 Nat_0))
	(=> (diseqNat_0 x_42 x_43)
	    (diseqNat_0 (S_0 x_42) (S_0 x_43)))))
(declare-datatypes ((list_0 0)) (((nil_0 ) (cons_0 (head_0 Nat_0) (tail_0 list_0)))))
(declare-fun diseqlist_0 (list_0 list_0) Bool)
(declare-fun head_1 (Nat_0 list_0) Bool)
(declare-fun tail_1 (list_0 list_0) Bool)
(declare-fun isnil_0 (list_0) Bool)
(declare-fun iscons_0 (list_0) Bool)
(assert (forall ((x_45 Nat_0) (x_46 list_0))
	(head_1 x_45 (cons_0 x_45 x_46))))
(assert (forall ((x_45 Nat_0) (x_46 list_0))
	(tail_1 x_46 (cons_0 x_45 x_46))))
(assert (isnil_0 nil_0))
(assert (forall ((x_48 Nat_0) (x_49 list_0))
	(iscons_0 (cons_0 x_48 x_49))))
(assert (forall ((x_50 Nat_0) (x_51 list_0))
	(diseqlist_0 nil_0 (cons_0 x_50 x_51))))
(assert (forall ((x_52 Nat_0) (x_53 list_0))
	(diseqlist_0 (cons_0 x_52 x_53) nil_0)))
(assert (forall ((x_54 Nat_0) (x_55 list_0) (x_56 Nat_0) (x_57 list_0))
	(=> (diseqNat_0 x_54 x_56)
	    (diseqlist_0 (cons_0 x_54 x_55) (cons_0 x_56 x_57)))))
(assert (forall ((x_54 Nat_0) (x_55 list_0) (x_56 Nat_0) (x_57 list_0))
	(=> (diseqlist_0 x_55 x_57)
	    (diseqlist_0 (cons_0 x_54 x_55) (cons_0 x_56 x_57)))))
(declare-fun x_0 (Bool_0 Nat_0 Nat_0) Bool)
(assert (forall ((x_10 Bool_0) (x_2 Nat_0) (z_1 Nat_0))
	(=> (x_0 x_10 z_1 x_2)
	    (x_0 x_10 (S_0 z_1) (S_0 x_2)))))
(assert (forall ((z_1 Nat_0))
	(x_0 false_0 (S_0 z_1) Z_0)))
(assert (forall ((y_0 Nat_0))
	(x_0 true_0 Z_0 y_0)))
(declare-fun insert_0 (list_0 Nat_0 list_0) Bool)
(assert (forall ((z_2 Nat_0) (xs_0 list_0) (x_3 Nat_0))
	(=> (x_0 true_0 x_3 z_2)
	    (insert_0 (cons_0 x_3 (cons_0 z_2 xs_0)) x_3 (cons_0 z_2 xs_0)))))
(assert (forall ((x_17 list_0) (x_15 Bool_0) (z_2 Nat_0) (xs_0 list_0) (x_3 Nat_0))
	(=>	(and (diseqBool_0 x_15 true_0)
			(insert_0 x_17 x_3 xs_0)
			(x_0 x_15 x_3 z_2))
		(insert_0 (cons_0 z_2 x_17) x_3 (cons_0 z_2 xs_0)))))
(assert (forall ((x_3 Nat_0))
	(insert_0 (cons_0 x_3 nil_0) x_3 nil_0)))
(declare-fun isort_0 (list_0 list_0) Bool)
(assert (forall ((x_19 list_0) (x_20 list_0) (y_2 Nat_0) (xs_1 list_0))
	(=>	(and (isort_0 x_20 xs_1)
			(insert_0 x_19 y_2 x_20))
		(isort_0 x_19 (cons_0 y_2 xs_1)))))
(assert (isort_0 nil_0 nil_0))
(declare-fun x_5 (Bool_0 Bool_0 Bool_0) Bool)
(assert (forall ((x_23 Bool_0))
	(x_5 x_23 true_0 x_23)))
(assert (forall ((x_6 Bool_0) (y_3 Bool_0))
	(=> (diseqBool_0 x_6 true_0)
	    (x_5 false_0 x_6 y_3))))
(declare-fun sorted_0 (Bool_0 list_0) Bool)
(assert (forall ((x_25 Bool_0) (x_26 Bool_0) (x_27 Bool_0) (y_5 Nat_0) (xs_2 list_0) (y_4 Nat_0))
	(=>	(and (x_0 x_26 y_4 y_5)
			(sorted_0 x_27 (cons_0 y_5 xs_2))
			(x_5 x_25 x_26 x_27))
		(sorted_0 x_25 (cons_0 y_4 (cons_0 y_5 xs_2))))))
(assert (forall ((y_4 Nat_0))
	(sorted_0 true_0 (cons_0 y_4 nil_0))))
(assert (sorted_0 true_0 nil_0))
(assert (forall ((x_31 list_0) (x_32 Bool_0) (x_8 list_0))
	(=>	(and (diseqBool_0 x_32 true_0)
			(isort_0 x_31 x_8)
			(sorted_0 x_32 x_31))
		false)))
(check-sat)
