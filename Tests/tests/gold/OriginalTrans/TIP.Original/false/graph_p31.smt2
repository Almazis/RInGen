(set-logic HORN)
(declare-datatypes ((Nat_0 0)) (((Z_7 ) (Z_8 (unS_0 Nat_0)))))
(declare-fun diseqNat_0 (Nat_0 Nat_0) Bool)
(declare-fun unS_1 (Nat_0 Nat_0) Bool)
(declare-fun isZ_2 (Nat_0) Bool)
(declare-fun isZ_3 (Nat_0) Bool)
(assert (forall ((x_97 Nat_0))
	(unS_1 x_97 (Z_8 x_97))))
(assert (isZ_2 Z_7))
(assert (forall ((x_99 Nat_0))
	(isZ_3 (Z_8 x_99))))
(assert (forall ((x_100 Nat_0))
	(diseqNat_0 Z_7 (Z_8 x_100))))
(assert (forall ((x_101 Nat_0))
	(diseqNat_0 (Z_8 x_101) Z_7)))
(assert (forall ((x_102 Nat_0) (x_103 Nat_0))
	(=> (diseqNat_0 x_102 x_103)
	    (diseqNat_0 (Z_8 x_102) (Z_8 x_103)))))
(declare-fun add_0 (Nat_0 Nat_0 Nat_0) Bool)
(declare-fun minus_0 (Nat_0 Nat_0 Nat_0) Bool)
(declare-fun le_0 (Nat_0 Nat_0) Bool)
(declare-fun ge_0 (Nat_0 Nat_0) Bool)
(declare-fun lt_0 (Nat_0 Nat_0) Bool)
(declare-fun gt_0 (Nat_0 Nat_0) Bool)
(declare-fun mult_0 (Nat_0 Nat_0 Nat_0) Bool)
(declare-fun div_0 (Nat_0 Nat_0 Nat_0) Bool)
(declare-fun mod_0 (Nat_0 Nat_0 Nat_0) Bool)
(assert (forall ((y_11 Nat_0))
	(add_0 y_11 Z_7 y_11)))
(assert (forall ((r_0 Nat_0) (x_85 Nat_0) (y_11 Nat_0))
	(=> (add_0 r_0 x_85 y_11)
	    (add_0 (Z_8 r_0) (Z_8 x_85) y_11))))
(assert (forall ((y_11 Nat_0))
	(minus_0 Z_7 Z_7 y_11)))
(assert (forall ((r_0 Nat_0) (x_85 Nat_0) (y_11 Nat_0))
	(=> (minus_0 r_0 x_85 y_11)
	    (minus_0 (Z_8 r_0) (Z_8 x_85) y_11))))
(assert (forall ((y_11 Nat_0))
	(le_0 Z_7 y_11)))
(assert (forall ((x_85 Nat_0) (y_11 Nat_0))
	(=> (le_0 x_85 y_11)
	    (le_0 (Z_8 x_85) (Z_8 y_11)))))
(assert (forall ((y_11 Nat_0))
	(ge_0 y_11 Z_7)))
(assert (forall ((x_85 Nat_0) (y_11 Nat_0))
	(=> (ge_0 x_85 y_11)
	    (ge_0 (Z_8 x_85) (Z_8 y_11)))))
(assert (forall ((y_11 Nat_0))
	(lt_0 Z_7 (Z_8 y_11))))
(assert (forall ((x_85 Nat_0) (y_11 Nat_0))
	(=> (lt_0 x_85 y_11)
	    (lt_0 (Z_8 x_85) (Z_8 y_11)))))
(assert (forall ((y_11 Nat_0))
	(gt_0 (Z_8 y_11) Z_7)))
(assert (forall ((x_85 Nat_0) (y_11 Nat_0))
	(=> (gt_0 x_85 y_11)
	    (gt_0 (Z_8 x_85) (Z_8 y_11)))))
(assert (forall ((y_11 Nat_0))
	(mult_0 Z_7 Z_7 y_11)))
(assert (forall ((r_0 Nat_0) (x_85 Nat_0) (y_11 Nat_0) (z_9 Nat_0))
	(=>	(and (mult_0 r_0 x_85 y_11)
			(add_0 z_9 r_0 y_11))
		(mult_0 z_9 (Z_8 x_85) y_11))))
(assert (forall ((x_85 Nat_0) (y_11 Nat_0))
	(=> (lt_0 x_85 y_11)
	    (div_0 Z_7 x_85 y_11))))
(assert (forall ((r_0 Nat_0) (x_85 Nat_0) (y_11 Nat_0) (z_9 Nat_0))
	(=>	(and (ge_0 x_85 y_11)
			(minus_0 z_9 x_85 y_11)
			(div_0 r_0 z_9 y_11))
		(div_0 (Z_8 r_0) x_85 y_11))))
(assert (forall ((x_85 Nat_0) (y_11 Nat_0))
	(=> (lt_0 x_85 y_11)
	    (mod_0 x_85 x_85 y_11))))
(assert (forall ((r_0 Nat_0) (x_85 Nat_0) (y_11 Nat_0) (z_9 Nat_0))
	(=>	(and (ge_0 x_85 y_11)
			(minus_0 z_9 x_85 y_11)
			(mod_0 r_0 z_9 y_11))
		(mod_0 r_0 x_85 y_11))))
(declare-datatypes ((Bool_0 0)) (((false_0 ) (true_0 ))))
(declare-fun diseqBool_0 (Bool_0 Bool_0) Bool)
(declare-fun isfalse_1 (Bool_0) Bool)
(declare-fun istrue_1 (Bool_0) Bool)
(assert (isfalse_1 false_0))
(assert (istrue_1 true_0))
(assert (diseqBool_0 false_0 true_0))
(assert (diseqBool_0 true_0 false_0))
(declare-fun and_1 (Bool_0 Bool_0 Bool_0) Bool)
(declare-fun or_0 (Bool_0 Bool_0 Bool_0) Bool)
(declare-fun hence_0 (Bool_0 Bool_0 Bool_0) Bool)
(declare-fun not_0 (Bool_0 Bool_0) Bool)
(assert (and_1 false_0 false_0 false_0))
(assert (and_1 false_0 true_0 false_0))
(assert (and_1 false_0 false_0 true_0))
(assert (and_1 true_0 true_0 true_0))
(assert (or_0 false_0 false_0 false_0))
(assert (or_0 true_0 true_0 false_0))
(assert (or_0 true_0 false_0 true_0))
(assert (or_0 true_0 true_0 true_0))
(assert (hence_0 true_0 false_0 false_0))
(assert (hence_0 false_0 true_0 false_0))
(assert (hence_0 true_0 false_0 true_0))
(assert (hence_0 true_0 true_0 true_0))
(assert (not_0 true_0 false_0))
(assert (not_0 false_0 true_0))
(declare-datatypes ((pair_0 0)) (((pair_1 (projpair_0 Nat_0) (projpair_1 Nat_0)))))
(declare-fun diseqpair_0 (pair_0 pair_0) Bool)
(declare-fun projpair_2 (Nat_0 pair_0) Bool)
(declare-fun projpair_3 (Nat_0 pair_0) Bool)
(declare-fun ispair_0 (pair_0) Bool)
(assert (forall ((x_106 Nat_0) (x_107 Nat_0))
	(projpair_2 x_106 (pair_1 x_106 x_107))))
(assert (forall ((x_106 Nat_0) (x_107 Nat_0))
	(projpair_3 x_107 (pair_1 x_106 x_107))))
(assert (forall ((x_109 Nat_0) (x_110 Nat_0))
	(ispair_0 (pair_1 x_109 x_110))))
(assert (forall ((x_111 Nat_0) (x_112 Nat_0) (x_113 Nat_0) (x_114 Nat_0))
	(=> (diseqNat_0 x_111 x_113)
	    (diseqpair_0 (pair_1 x_111 x_112) (pair_1 x_113 x_114)))))
(assert (forall ((x_111 Nat_0) (x_112 Nat_0) (x_113 Nat_0) (x_114 Nat_0))
	(=> (diseqNat_0 x_112 x_114)
	    (diseqpair_0 (pair_1 x_111 x_112) (pair_1 x_113 x_114)))))
(declare-datatypes ((list_0 0)) (((nil_0 ) (cons_0 (head_0 Bool_0) (tail_0 list_0)))))
(declare-fun diseqlist_0 (list_0 list_0) Bool)
(declare-fun head_4 (Bool_0 list_0) Bool)
(declare-fun tail_4 (list_0 list_0) Bool)
(declare-fun isnil_0 (list_0) Bool)
(declare-fun iscons_0 (list_0) Bool)
(assert (forall ((x_116 Bool_0) (x_117 list_0))
	(head_4 x_116 (cons_0 x_116 x_117))))
(assert (forall ((x_116 Bool_0) (x_117 list_0))
	(tail_4 x_117 (cons_0 x_116 x_117))))
(assert (isnil_0 nil_0))
(assert (forall ((x_119 Bool_0) (x_120 list_0))
	(iscons_0 (cons_0 x_119 x_120))))
(assert (forall ((x_121 Bool_0) (x_122 list_0))
	(diseqlist_0 nil_0 (cons_0 x_121 x_122))))
(assert (forall ((x_123 Bool_0) (x_124 list_0))
	(diseqlist_0 (cons_0 x_123 x_124) nil_0)))
(assert (forall ((x_125 Bool_0) (x_126 list_0) (x_127 Bool_0) (x_128 list_0))
	(=> (diseqBool_0 x_125 x_127)
	    (diseqlist_0 (cons_0 x_125 x_126) (cons_0 x_127 x_128)))))
(assert (forall ((x_125 Bool_0) (x_126 list_0) (x_127 Bool_0) (x_128 list_0))
	(=> (diseqlist_0 x_126 x_128)
	    (diseqlist_0 (cons_0 x_125 x_126) (cons_0 x_127 x_128)))))
(declare-datatypes ((list_1 0)) (((nil_1 ) (cons_1 (head_1 Nat_0) (tail_1 list_1)))))
(declare-fun diseqlist_1 (list_1 list_1) Bool)
(declare-fun head_5 (Nat_0 list_1) Bool)
(declare-fun tail_5 (list_1 list_1) Bool)
(declare-fun isnil_1 (list_1) Bool)
(declare-fun iscons_1 (list_1) Bool)
(assert (forall ((x_130 Nat_0) (x_131 list_1))
	(head_5 x_130 (cons_1 x_130 x_131))))
(assert (forall ((x_130 Nat_0) (x_131 list_1))
	(tail_5 x_131 (cons_1 x_130 x_131))))
(assert (isnil_1 nil_1))
(assert (forall ((x_133 Nat_0) (x_134 list_1))
	(iscons_1 (cons_1 x_133 x_134))))
(assert (forall ((x_135 Nat_0) (x_136 list_1))
	(diseqlist_1 nil_1 (cons_1 x_135 x_136))))
(assert (forall ((x_137 Nat_0) (x_138 list_1))
	(diseqlist_1 (cons_1 x_137 x_138) nil_1)))
(assert (forall ((x_139 Nat_0) (x_140 list_1) (x_141 Nat_0) (x_142 list_1))
	(=> (diseqNat_0 x_139 x_141)
	    (diseqlist_1 (cons_1 x_139 x_140) (cons_1 x_141 x_142)))))
(assert (forall ((x_139 Nat_0) (x_140 list_1) (x_141 Nat_0) (x_142 list_1))
	(=> (diseqlist_1 x_140 x_142)
	    (diseqlist_1 (cons_1 x_139 x_140) (cons_1 x_141 x_142)))))
(declare-datatypes ((list_2 0)) (((nil_2 ) (cons_2 (head_2 pair_0) (tail_2 list_2)))))
(declare-fun diseqlist_2 (list_2 list_2) Bool)
(declare-fun head_6 (pair_0 list_2) Bool)
(declare-fun tail_6 (list_2 list_2) Bool)
(declare-fun isnil_2 (list_2) Bool)
(declare-fun iscons_2 (list_2) Bool)
(assert (forall ((x_144 pair_0) (x_145 list_2))
	(head_6 x_144 (cons_2 x_144 x_145))))
(assert (forall ((x_144 pair_0) (x_145 list_2))
	(tail_6 x_145 (cons_2 x_144 x_145))))
(assert (isnil_2 nil_2))
(assert (forall ((x_147 pair_0) (x_148 list_2))
	(iscons_2 (cons_2 x_147 x_148))))
(assert (forall ((x_149 pair_0) (x_150 list_2))
	(diseqlist_2 nil_2 (cons_2 x_149 x_150))))
(assert (forall ((x_151 pair_0) (x_152 list_2))
	(diseqlist_2 (cons_2 x_151 x_152) nil_2)))
(assert (forall ((x_153 pair_0) (x_154 list_2) (x_155 pair_0) (x_156 list_2))
	(=> (diseqpair_0 x_153 x_155)
	    (diseqlist_2 (cons_2 x_153 x_154) (cons_2 x_155 x_156)))))
(assert (forall ((x_153 pair_0) (x_154 list_2) (x_155 pair_0) (x_156 list_2))
	(=> (diseqlist_2 x_154 x_156)
	    (diseqlist_2 (cons_2 x_153 x_154) (cons_2 x_155 x_156)))))
(declare-datatypes ((list_3 0)) (((nil_3 ) (cons_3 (head_3 list_2) (tail_3 list_3)))))
(declare-fun diseqlist_3 (list_3 list_3) Bool)
(declare-fun head_7 (list_2 list_3) Bool)
(declare-fun tail_7 (list_3 list_3) Bool)
(declare-fun isnil_3 (list_3) Bool)
(declare-fun iscons_3 (list_3) Bool)
(assert (forall ((x_158 list_2) (x_159 list_3))
	(head_7 x_158 (cons_3 x_158 x_159))))
(assert (forall ((x_158 list_2) (x_159 list_3))
	(tail_7 x_159 (cons_3 x_158 x_159))))
(assert (isnil_3 nil_3))
(assert (forall ((x_161 list_2) (x_162 list_3))
	(iscons_3 (cons_3 x_161 x_162))))
(assert (forall ((x_163 list_2) (x_164 list_3))
	(diseqlist_3 nil_3 (cons_3 x_163 x_164))))
(assert (forall ((x_165 list_2) (x_166 list_3))
	(diseqlist_3 (cons_3 x_165 x_166) nil_3)))
(assert (forall ((x_167 list_2) (x_168 list_3) (x_169 list_2) (x_170 list_3))
	(=> (diseqlist_2 x_167 x_169)
	    (diseqlist_3 (cons_3 x_167 x_168) (cons_3 x_169 x_170)))))
(assert (forall ((x_167 list_2) (x_168 list_3) (x_169 list_2) (x_170 list_3))
	(=> (diseqlist_3 x_168 x_170)
	    (diseqlist_3 (cons_3 x_167 x_168) (cons_3 x_169 x_170)))))
(declare-datatypes ((Maybe_0 0)) (((Nothing_0 ) (Just_0 (projJust_0 Nat_0)))))
(declare-fun diseqMaybe_0 (Maybe_0 Maybe_0) Bool)
(declare-fun projJust_1 (Nat_0 Maybe_0) Bool)
(declare-fun isNothing_0 (Maybe_0) Bool)
(declare-fun isJust_0 (Maybe_0) Bool)
(assert (forall ((x_172 Nat_0))
	(projJust_1 x_172 (Just_0 x_172))))
(assert (isNothing_0 Nothing_0))
(assert (forall ((x_174 Nat_0))
	(isJust_0 (Just_0 x_174))))
(assert (forall ((x_175 Nat_0))
	(diseqMaybe_0 Nothing_0 (Just_0 x_175))))
(assert (forall ((x_176 Nat_0))
	(diseqMaybe_0 (Just_0 x_176) Nothing_0)))
(assert (forall ((x_177 Nat_0) (x_178 Nat_0))
	(=> (diseqNat_0 x_177 x_178)
	    (diseqMaybe_0 (Just_0 x_177) (Just_0 x_178)))))
(declare-fun primEnumFromTo_0 (list_1 Nat_0 Nat_0) Bool)
(assert (forall ((x_0 Nat_0) (y_0 Nat_0))
	(=> (gt_0 x_0 y_0)
	    (primEnumFromTo_0 nil_1 x_0 y_0))))
(assert (forall ((x_86 Nat_0) (x_17 list_1) (x_0 Nat_0) (y_0 Nat_0))
	(=>	(and (le_0 x_0 y_0)
			(primEnumFromTo_0 x_17 x_86 y_0)
			(add_0 x_86 (Z_8 Z_7) x_0))
		(primEnumFromTo_0 (cons_1 x_0 x_17) x_0 y_0))))
(declare-fun petersen_0 (list_2 Nat_0 list_1) Bool)
(assert (forall ((x_87 Nat_0) (x_19 list_2) (z_0 Nat_0) (x_2 list_1) (x_1 Nat_0))
	(=>	(and (petersen_0 x_19 x_1 x_2)
			(add_0 x_87 x_1 z_0))
		(petersen_0 (cons_2 (pair_1 z_0 x_87) x_19) x_1 (cons_1 z_0 x_2)))))
(assert (forall ((x_1 Nat_0))
	(petersen_0 nil_2 x_1 nil_1)))
(declare-fun petersen_1 (list_2 list_1) Bool)
(assert (forall ((x_88 Nat_0) (x_22 list_2) (y_2 Nat_0) (z_1 list_1))
	(=>	(and (petersen_1 x_22 z_1)
			(add_0 x_88 (Z_8 Z_7) y_2))
		(petersen_1 (cons_2 (pair_1 y_2 x_88) x_22) (cons_1 y_2 z_1)))))
(assert (petersen_1 nil_2 nil_1))
(declare-fun petersen_2 (list_3 Nat_0 list_2) Bool)
(assert (forall ((x_89 Nat_0) (x_90 Nat_0) (x_25 list_3) (u_0 Nat_0) (v_0 Nat_0) (x_5 list_2) (x_4 Nat_0))
	(=>	(and (petersen_2 x_25 x_4 x_5)
			(add_0 x_89 x_4 u_0)
			(add_0 x_90 x_4 v_0))
		(petersen_2 (cons_3 (cons_2 (pair_1 u_0 v_0) (cons_2 (pair_1 x_89 x_90) nil_2)) x_25) x_4 (cons_2 (pair_1 u_0 v_0) x_5)))))
(assert (forall ((x_4 Nat_0))
	(petersen_2 nil_3 x_4 nil_2)))
(declare-fun index_0 (Maybe_0 list_1 Nat_0) Bool)
(assert (forall ((z_3 Nat_0) (xs_0 list_1))
	(index_0 (Just_0 z_3) (cons_1 z_3 xs_0) Z_7)))
(assert (forall ((x_91 Nat_0) (x_28 Maybe_0) (z_3 Nat_0) (xs_0 list_1) (y_4 Nat_0))
	(=>	(and (diseqNat_0 y_4 Z_7)
			(index_0 x_28 xs_0 x_91)
			(minus_0 x_91 y_4 (Z_8 Z_7)))
		(index_0 x_28 (cons_1 z_3 xs_0) y_4))))
(assert (forall ((y_4 Nat_0))
	(index_0 Nothing_0 nil_1 y_4)))
(declare-fun formula_0 (list_0 list_1) Bool)
(assert (forall ((x_32 list_0) (y_5 Nat_0) (z_4 list_1))
	(=>	(and (lt_0 y_5 (Z_8 (Z_8 (Z_8 Z_7))))
			(formula_0 x_32 z_4))
		(formula_0 (cons_0 true_0 x_32) (cons_1 y_5 z_4)))))
(assert (forall ((x_34 list_0) (y_5 Nat_0) (z_4 list_1))
	(=>	(and (ge_0 y_5 (Z_8 (Z_8 (Z_8 Z_7))))
			(formula_0 x_34 z_4))
		(formula_0 (cons_0 false_0 x_34) (cons_1 y_5 z_4)))))
(assert (formula_0 nil_0 nil_1))
(declare-fun colouring_0 (list_0 list_1 list_2) Bool)
(assert (forall ((x_39 list_0) (c_0 Nat_0) (u_1 Nat_0) (v_1 Nat_0) (z_5 list_2) (a_0 list_1))
	(=>	(and (colouring_0 x_39 a_0 z_5)
			(index_0 (Just_0 c_0) a_0 v_1)
			(index_0 (Just_0 c_0) a_0 u_1))
		(colouring_0 (cons_0 false_0 x_39) a_0 (cons_2 (pair_1 u_1 v_1) z_5)))))
(assert (forall ((x_43 list_0) (c_1 Nat_0) (c_0 Nat_0) (u_1 Nat_0) (v_1 Nat_0) (z_5 list_2) (a_0 list_1))
	(=>	(and (diseqNat_0 c_0 c_1)
			(colouring_0 x_43 a_0 z_5)
			(index_0 (Just_0 c_1) a_0 v_1)
			(index_0 (Just_0 c_0) a_0 u_1))
		(colouring_0 (cons_0 true_0 x_43) a_0 (cons_2 (pair_1 u_1 v_1) z_5)))))
(assert (forall ((x_47 list_0) (c_0 Nat_0) (u_1 Nat_0) (v_1 Nat_0) (z_5 list_2) (a_0 list_1))
	(=>	(and (colouring_0 x_47 a_0 z_5)
			(index_0 Nothing_0 a_0 v_1)
			(index_0 (Just_0 c_0) a_0 u_1))
		(colouring_0 (cons_0 false_0 x_47) a_0 (cons_2 (pair_1 u_1 v_1) z_5)))))
(assert (forall ((x_50 list_0) (u_1 Nat_0) (v_1 Nat_0) (z_5 list_2) (a_0 list_1))
	(=>	(and (colouring_0 x_50 a_0 z_5)
			(index_0 Nothing_0 a_0 u_1))
		(colouring_0 (cons_0 false_0 x_50) a_0 (cons_2 (pair_1 u_1 v_1) z_5)))))
(assert (forall ((a_0 list_1))
	(colouring_0 nil_0 a_0 nil_2)))
(declare-fun and_0 (Bool_0 list_0) Bool)
(assert (forall ((x_52 Bool_0) (x_53 Bool_0) (y_7 Bool_0) (xs_1 list_0))
	(=>	(and (and_0 x_53 xs_1)
			(and_1 x_52 y_7 x_53))
		(and_0 x_52 (cons_0 y_7 xs_1)))))
(assert (and_0 true_0 nil_0))
(declare-fun colouring_1 (Bool_0 list_2 list_1) Bool)
(assert (forall ((x_55 Bool_0) (x_56 list_0) (x_10 list_2) (y_8 list_1))
	(=>	(and (colouring_0 x_56 y_8 x_10)
			(and_0 x_55 x_56))
		(colouring_1 x_55 x_10 y_8))))
(declare-fun x_11 (list_2 list_2 list_2) Bool)
(assert (forall ((x_59 list_2) (z_6 pair_0) (xs_2 list_2) (y_9 list_2))
	(=> (x_11 x_59 xs_2 y_9)
	    (x_11 (cons_2 z_6 x_59) (cons_2 z_6 xs_2) y_9))))
(assert (forall ((x_60 list_2))
	(x_11 x_60 nil_2 x_60)))
(declare-fun concat_0 (list_2 list_3) Bool)
(assert (forall ((x_61 list_2) (x_62 list_2) (y_10 list_2) (xs_3 list_3))
	(=>	(and (concat_0 x_62 xs_3)
			(x_11 x_61 y_10 x_62))
		(concat_0 x_61 (cons_3 y_10 xs_3)))))
(assert (concat_0 nil_2 nil_3))
(declare-fun petersen_3 (list_2 Nat_0) Bool)
(assert (petersen_3 nil_2 Z_7))
(assert (forall ((x_93 Nat_0) (x_92 Nat_0) (x_66 list_2) (x_67 list_1) (x_68 list_2) (x_69 list_3) (x_70 list_2) (x_71 list_1) (x_72 list_2) (x_14 Nat_0))
	(=>	(and (diseqNat_0 x_14 Z_7)
			(primEnumFromTo_0 x_67 Z_7 x_92)
			(petersen_1 x_68 x_67)
			(petersen_2 x_69 x_14 (cons_2 (pair_1 x_93 Z_7) x_68))
			(concat_0 x_70 x_69)
			(primEnumFromTo_0 x_71 Z_7 x_14)
			(petersen_0 x_72 x_14 x_71)
			(x_11 x_66 x_70 x_72)
			(minus_0 x_93 x_14 (Z_8 Z_7))
			(minus_0 x_92 x_14 (Z_8 Z_7)))
		(petersen_3 x_66 x_14))))
(assert (forall ((x_95 Nat_0) (x_94 Nat_0) (x_82 list_0) (x_74 list_1) (x_75 list_2) (x_76 list_3) (x_77 list_2) (x_78 list_1) (x_79 list_2) (x_80 list_2) (a_1 list_1))
	(=>	(and true
			(formula_0 x_82 a_1)
			(and_0 true_0 x_82)
			(primEnumFromTo_0 x_74 Z_7 x_94)
			(petersen_1 x_75 x_74)
			(petersen_2 x_76 (Z_8 (Z_8 (Z_8 (Z_8 (Z_8 (Z_8 (Z_8 (Z_8 (Z_8 (Z_8 (Z_8 (Z_8 (Z_8 (Z_8 (Z_8 (Z_8 (Z_8 (Z_8 (Z_8 (Z_8 (Z_8 (Z_8 (Z_8 (Z_8 (Z_8 (Z_8 (Z_8 (Z_8 (Z_8 (Z_8 (Z_8 Z_7))))))))))))))))))))))))))))))) (cons_2 (pair_1 x_95 Z_7) x_75))
			(concat_0 x_77 x_76)
			(primEnumFromTo_0 x_78 Z_7 (Z_8 (Z_8 (Z_8 (Z_8 (Z_8 (Z_8 (Z_8 (Z_8 (Z_8 (Z_8 (Z_8 (Z_8 (Z_8 (Z_8 (Z_8 (Z_8 (Z_8 (Z_8 (Z_8 (Z_8 (Z_8 (Z_8 (Z_8 (Z_8 (Z_8 (Z_8 (Z_8 (Z_8 (Z_8 (Z_8 (Z_8 Z_7))))))))))))))))))))))))))))))))
			(petersen_0 x_79 (Z_8 (Z_8 (Z_8 (Z_8 (Z_8 (Z_8 (Z_8 (Z_8 (Z_8 (Z_8 (Z_8 (Z_8 (Z_8 (Z_8 (Z_8 (Z_8 (Z_8 (Z_8 (Z_8 (Z_8 (Z_8 (Z_8 (Z_8 (Z_8 (Z_8 (Z_8 (Z_8 (Z_8 (Z_8 (Z_8 (Z_8 Z_7))))))))))))))))))))))))))))))) x_78)
			(x_11 x_80 x_77 x_79)
			(colouring_1 true_0 x_80 a_1)
			(minus_0 x_95 (Z_8 (Z_8 (Z_8 (Z_8 (Z_8 (Z_8 (Z_8 (Z_8 (Z_8 (Z_8 (Z_8 (Z_8 (Z_8 (Z_8 (Z_8 (Z_8 (Z_8 (Z_8 (Z_8 (Z_8 (Z_8 (Z_8 (Z_8 (Z_8 (Z_8 (Z_8 (Z_8 (Z_8 (Z_8 (Z_8 (Z_8 Z_7))))))))))))))))))))))))))))))) (Z_8 Z_7))
			(minus_0 x_94 (Z_8 (Z_8 (Z_8 (Z_8 (Z_8 (Z_8 (Z_8 (Z_8 (Z_8 (Z_8 (Z_8 (Z_8 (Z_8 (Z_8 (Z_8 (Z_8 (Z_8 (Z_8 (Z_8 (Z_8 (Z_8 (Z_8 (Z_8 (Z_8 (Z_8 (Z_8 (Z_8 (Z_8 (Z_8 (Z_8 (Z_8 Z_7))))))))))))))))))))))))))))))) (Z_8 Z_7)))
		false)))
(check-sat)
