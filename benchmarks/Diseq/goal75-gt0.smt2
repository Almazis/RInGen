(set-logic HORN)

(declare-datatype Nat ((Z) (S (nextnat Nat))))
(declare-fun add (Nat Nat Nat) Bool)
(declare-fun lt (Nat Nat) Bool)
(declare-fun le (Nat Nat) Bool)
(declare-fun gt (Nat Nat) Bool)
(declare-fun ge (Nat Nat) Bool)
(assert (forall ((y Nat)) (add Z y y)))
(assert (forall ((x Nat) (y Nat) (z Nat)) (=> (add x y z) (add (S x) y (S z)))))
(assert (forall ((y Nat)) (lt Z (S y))))
(assert (forall ((x Nat) (y Nat)) (=> (lt x y) (lt (S x) (S y)))))
(assert (forall ((x Nat) (y Nat)) (=> (or (lt x y) (= x y)) (le x y))))
(assert (forall ((x Nat) (y Nat)) (=> (lt y x) (gt x y))))
(assert (forall ((x Nat) (y Nat)) (=> (le y x) (ge x y))))
(declare-fun diseqNat (Nat Nat) Bool)
(assert (forall ((x Nat)) (diseqNat Z (S x))))
(assert (forall ((x Nat)) (diseqNat (S x) Z)))
(assert (forall ((x Nat) (y Nat)) (=> (diseqNat x y) (diseqNat (S x) (S y)))))
(declare-datatype Lst ((nil) (cons (car Nat) (cdr Lst))))
(declare-fun diseqLst (Lst Lst) Bool)
(assert (forall ((c Nat) (x Lst)) (diseqLst nil (cons c x))))
(assert (forall ((c Nat) (x Lst)) (diseqLst (cons c x) nil)))
(assert (forall ((c1 Nat) (c2 Nat) (x Lst) (y Lst)) (=> (diseqNat c1 c2) (diseqLst (cons c1 x) (cons c2 y)))))
(assert (forall ((c1 Nat) (c2 Nat) (x Lst) (y Lst)) (=> (diseqLst x y) (diseqLst (cons c1 x) (cons c2 y)))))


(declare-fun incorrect () Bool)
(declare-fun rev (Lst Lst) Bool)
(declare-fun filter (Lst Lst) Bool)
(declare-fun diff_list (Lst Lst) Bool)
(declare-fun append (Lst Lst Lst) Bool)
(assert (forall ((A Lst) (B Lst)) (=> (= A nil) (append A B B))))
(assert (forall ((A Nat)
         (B Lst)
         (C Lst)
         (D Lst)
         (E Lst)
         (F Lst))
  (=> (and (append B E C) (= F (cons A C)) (= D (cons A B))) (append D E F))))
(assert (forall ((A Lst) (B Lst))
  (=> (and (= B nil) (= A nil)) (rev A B))))
(assert (forall ((A Nat)
         (B Lst)
         (C Lst)
         (D Lst)
         (E Lst)
         (F Lst))
  (=> (and (append C D F) (rev B C) (= D (cons A nil)) (= E (cons A B)))
      (rev E F))))
(assert (forall ((A Lst) (B Lst))
  (=> (and (= B nil) (= A nil)) (filter A B))))
(assert (forall ((A Nat) (B Lst) (C Lst) (D Lst) (E Lst))
  (=> (and (filter B C) (= E (cons A C)) (= D (cons A B)) (gt A Z))
      (filter D E))))
(assert (forall ((A Nat) (B Lst) (C Lst) (D Lst))
  (=> (and (filter B D) (= C (cons A B)) (le A Z)) (filter C D))))
(assert (forall ((A Lst)
         (B Lst)
         (C Lst)
         (D Lst)
         (E Lst))
  (=> (and (diff_list D E) (filter B A) (rev A D) (rev B C) (filter C E))
      incorrect)))
(assert (forall ((A Lst) (B Nat) (C Lst))
  (=> (= A (cons B C)) (diff_list nil A))))
(assert (forall ((A Lst) (B Nat) (C Lst))
  (=> (= A (cons B C)) (diff_list A nil))))
(assert (forall ((A Lst)
         (B Lst)
         (C Nat)
         (D Lst)
         (E Nat)
         (F Lst))
  (=> (and (= A (cons E F)) (= B (cons C D)) (diseqNat C E)) (diff_list B A))))
(assert (forall ((A Lst) (B Lst) (C Lst) (D Nat) (E Lst))
  (=> (and (diff_list C E) (= A (cons D E)) (= B (cons D C)))
      (diff_list B A))))
(assert (=> incorrect false))
(check-sat)

