(set-logic HORN)

(declare-datatype Nat ((Z) (S (nextnat Nat))))
(declare-fun add (Nat Nat Nat) Bool)
(declare-fun lt (Nat Nat) Bool)
(declare-fun le (Nat Nat) Bool)
(declare-fun gt (Nat Nat) Bool)
(declare-fun ge (Nat Nat) Bool)
(assert (forall ((y Nat)) (add Z y y)))
(assert (forall ((x Nat) (y Nat) (z Nat)) (=> (add x y z) (add (S x) y (S z)))))
(assert (forall ((y Nat)) (lt Z (S y))))
(assert (forall ((x Nat) (y Nat)) (=> (lt x y) (lt (S x) (S y)))))
(assert (forall ((x Nat) (y Nat)) (=> (or (lt x y) (= x y)) (le x y))))
(assert (forall ((x Nat) (y Nat)) (=> (lt y x) (gt x y))))
(assert (forall ((x Nat) (y Nat)) (=> (le y x) (ge x y))))
(declare-fun diseqNat (Nat Nat) Bool)
(assert (forall ((x Nat)) (diseqNat Z (S x))))
(assert (forall ((x Nat)) (diseqNat (S x) Z)))
(assert (forall ((x Nat) (y Nat)) (=> (diseqNat x y) (diseqNat (S x) (S y)))))
(declare-datatype Lst ((nil) (cons (car Nat) (cdr Lst))))
(declare-fun diseqLst (Lst Lst) Bool)
(assert (forall ((c Nat) (x Lst)) (diseqLst nil (cons c x))))
(assert (forall ((c Nat) (x Lst)) (diseqLst (cons c x) nil)))
(assert (forall ((c1 Nat) (c2 Nat) (x Lst) (y Lst)) (=> (diseqNat c1 c2) (diseqLst (cons c1 x) (cons c2 y)))))
(assert (forall ((c1 Nat) (c2 Nat) (x Lst) (y Lst)) (=> (diseqLst x y) (diseqLst (cons c1 x) (cons c2 y)))))


(declare-fun len (Lst Nat) Bool)
(declare-fun drop (Nat Lst Lst) Bool)
(declare-fun incorrect () Bool)
(declare-fun diff_list (Lst Lst) Bool)
(declare-fun minus (Nat Nat Nat) Bool)
(declare-fun append (Lst Lst Lst) Bool)
(assert (forall ((A Nat) (B Nat) (C Nat)) (=> (and (= C Z) (le A B)) (minus A B C))))
(assert (forall ((A Nat) (B Nat) (C Nat))
  (=> (and (ge A (S B)) (add C B A)) (minus A B C))))
(assert (forall ((A Lst) (B Nat)) (=> (and (= B Z) (= A nil)) (len A B))))
(assert (forall ((A Nat) (B Lst) (C Nat) (D Lst) (E Nat))
  (=> (and (len B C) (= D (cons A B)) (= E (S C)) (ge C Z)) (len D E))))
(assert (forall ((A Nat) (B Lst) (C Lst))
  (=> (and (= C nil) (= B nil)) (drop A B C))))
(assert (forall ((A Nat) (B Lst) (C Nat) (D Lst) (E Lst))
  (=> (and (= D (cons A B)) (= C Z) (= E (cons A B))) (drop C D E))))
(assert (forall ((A Nat) (B Nat) (C Lst) (D Nat) (E Lst) (F Lst))
  (=> (and (drop B C F) (= E (cons A C)) (= D (S B)) (diseqNat D Z))
      (drop D E F))))
(assert (forall ((A Lst) (B Lst)) (=> (= A nil) (append A B B))))
(assert (forall ((A Nat)
         (B Lst)
         (C Lst)
         (D Lst)
         (E Lst)
         (F Lst))
  (=> (and (append B E C) (= F (cons A C)) (= D (cons A B))) (append D E F))))
(assert (forall ((A Lst)
         (B Lst)
         (C Lst)
         (D Nat)
         (E Nat)
         (F Nat)
         (G Lst)
         (H Lst)
         (I Lst)
         (J Lst))
  (=> (and (diff_list I J)
           (append B C A)
           (drop D A I)
           (drop D B G)
           (len B E)
           (drop F C H)
           (minus D E F)
           (append G H J)
           (ge D Z)
           (ge E Z))
      incorrect)))
(assert (forall ((A Lst) (B Nat) (C Lst))
  (=> (= A (cons B C)) (diff_list nil A))))
(assert (forall ((A Lst) (B Nat) (C Lst))
  (=> (= A (cons B C)) (diff_list A nil))))
(assert (forall ((A Lst)
         (B Lst)
         (C Nat)
         (D Lst)
         (E Nat)
         (F Lst))
  (=> (and (= A (cons E F)) (= B (cons C D)) (diseqNat C E)) (diff_list B A))))
(assert (forall ((A Lst) (B Lst) (C Lst) (D Nat) (E Lst))
  (=> (and (diff_list C E) (= A (cons D E)) (= B (cons D C)))
      (diff_list B A))))
(assert (=> incorrect false))
(check-sat)

