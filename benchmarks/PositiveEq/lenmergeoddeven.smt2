(set-logic HORN)

(declare-datatype Nat ((Z) (S (nextnat Nat))))
(declare-datatype Tree ((leaf) (node (trn1 Nat) (ltree Tree) (rtree Tree))))
(declare-datatype Lst ((nil) (cons (car Nat) (cdr Lst))))
(declare-datatype Lst2 ((nil2) (cons2 (car1 Nat) (car2 Nat) (cdr2 Lst2))))
(declare-datatype Queue ((queue (queue1 Lst) (queue2 Lst))))


(declare-fun add (Nat Nat Nat) Bool)
(declare-fun lt (Nat Nat) Bool)
(declare-fun le (Nat Nat) Bool)
(declare-fun gt (Nat Nat) Bool)
(declare-fun ge (Nat Nat) Bool)
(assert (forall ((y Nat)) (add Z y y)))
(assert (forall ((x Nat) (y Nat) (z Nat)) (=> (add x y z) (add (S x) y (S z)))))
(assert (forall ((y Nat)) (lt Z (S y))))
(assert (forall ((x Nat) (y Nat)) (=> (lt x y) (lt (S x) (S y)))))
(assert (forall ((x Nat) (y Nat)) (=> (or (lt x y) (= x y)) (le x y))))
(assert (forall ((x Nat)) (gt (S x) Z)))
(assert (forall ((x Nat) (y Nat)) (=> (gt x y) (gt (S x) (S y)))))
(assert (forall ((x Nat) (y Nat)) (=> (or (gt x y) (= x y)) (ge x y))))

(declare-fun merge (Lst Lst Lst) Bool)
(declare-fun len (Lst Nat) Bool)
(declare-fun incorrect () Bool)
(declare-fun evenpos (Lst Lst) Bool)
(declare-fun oddpos (Lst Lst) Bool)
(assert (forall ((A Lst) (B Lst))
  (=> (and (= B nil) (= A nil)) (evenpos A B))))
(assert (forall ((A Nat) (B Lst) (C Lst))
  (=> (and (= B (cons A nil)) (= C nil)) (evenpos B C))))
(assert (forall ((A Nat)
         (B Nat)
         (C Lst)
         (D Lst)
         (E Lst)
         (F Lst))
  (let ((a!1 (and (evenpos C D)
                  (= E (cons A (cons B C)))
                  (= F (cons A D)))))
    (=> a!1 (evenpos E F)))))
(assert (forall ((A Lst) (B Lst))
  (=> (and (= B nil) (= A nil)) (oddpos A B))))
(assert (forall ((A Nat) (B Lst) (C Lst) (D Lst) (E Lst))
  (=> (and (evenpos B C) (= E (cons A C)) (= D (cons A B))) (oddpos D E))))
(assert (forall ((A Lst) (B Lst)) (=> (= A nil) (merge A B B))))
(assert (forall ((A Nat)
         (B Lst)
         (C Lst)
         (D Lst)
         (E Lst)
         (F Lst))
  (=> (and (merge E B C) (= F (cons A C)) (= D (cons A B))) (merge D E F))))
(assert (forall ((A Lst) (B Nat)) (=> (and (= B Z) (= A nil)) (len A B))))
(assert (forall ((A Nat) (B Lst) (C Nat) (D Lst) (E Nat))
  (=> (and (len B C) (= D (cons A B)) (= E (S C))) (len D E))))
(assert (forall ((A Lst)
         (B Lst)
         (C Nat)
         (D Lst)
         (E Nat)
         (F Lst)
         (G Nat)
		 (G2 Nat))
  (let ((a!1 (and (len F G)
                  (oddpos A B)
                  (evenpos A D)
                  (merge B D F)
                  (len B C)
                  (len D E)
				  (add C E G2)
                  (= G (S G2)))))
    (=> a!1 incorrect))))
(assert (=> incorrect false))
(check-sat)

