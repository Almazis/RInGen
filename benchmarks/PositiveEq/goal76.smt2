(set-logic HORN)

(declare-datatype Nat ((Z) (S (nextnat Nat))))
(declare-datatype Tree ((leaf) (node (trn1 Nat) (ltree Tree) (rtree Tree))))
(declare-datatype Lst ((nil) (cons (car Nat) (cdr Lst))))
(declare-datatype Lst2 ((nil2) (cons2 (car1 Nat) (car2 Nat) (cdr2 Lst2))))
(declare-datatype Queue ((queue (queue1 Lst) (queue2 Lst))))



(declare-fun add (Nat Nat Nat) Bool)
(declare-fun lt (Nat Nat) Bool)
(declare-fun le (Nat Nat) Bool)
(declare-fun gt (Nat Nat) Bool)
(declare-fun ge (Nat Nat) Bool)
(assert (forall ((y Nat)) (add Z y y)))
(assert (forall ((x Nat) (y Nat) (z Nat)) (=> (add x y z) (add (S x) y (S z)))))
(assert (forall ((y Nat)) (lt Z (S y))))
(assert (forall ((x Nat) (y Nat)) (=> (lt x y) (lt (S x) (S y)))))
(assert (forall ((x Nat) (y Nat)) (=> (or (lt x y) (= x y)) (le x y))))
(assert (forall ((x Nat)) (gt (S x) Z)))
(assert (forall ((x Nat) (y Nat)) (=> (gt x y) (gt (S x) (S y)))))
(assert (forall ((x Nat) (y Nat)) (=> (or (gt x y) (= x y)) (ge x y))))

(declare-fun len (Lst Nat) Bool)
(declare-fun drop (Nat Lst Lst) Bool)
(declare-fun rev (Lst Lst) Bool)
(declare-fun incorrect () Bool)
(declare-fun minus (Nat Nat Nat) Bool)
(declare-fun take (Nat Lst Lst) Bool)
(declare-fun append (Lst Lst Lst) Bool)
(assert (forall ((A Nat) (B Nat) (C Nat)) (=> (and (= C Z) (le A B)) (minus A B C))))
(assert (forall ((A Nat) (B Nat) (C Nat))
  (=> (and (ge A (S B)) (add C B A)) (minus A B C))))
(assert (forall ((A Nat) (B Lst) (C Lst))
  (=> (and (= C nil) (= B nil)) (drop A B C))))
(assert (forall ((A Nat) (B Lst) (C Nat) (D Lst) (E Lst))
  (=> (and (= D (cons A B)) (= C Z) (= E (cons A B))) (drop C D E))))
(assert (forall ((A Nat) (B Nat) (C Lst) (D Nat) (E Lst) (F Lst))
  (=> (and (drop B C F) (= E (cons A C)) (= (S B) D))
      (drop D E F))))
(assert (forall ((A Nat) (B Lst) (C Lst))
  (=> (and (= C nil) (= B nil)) (take A B C))))
(assert (forall ((A Nat) (B Lst) (C Nat) (D Lst) (E Lst))
  (=> (and (= E nil) (= C Z) (= D (cons A B))) (take C D E))))
(assert (forall ((A Nat)
         (B Nat)
         (C Lst)
         (D Lst)
         (E Nat)
         (F Lst)
         (G Lst))
  (=> (and (take B C D)
           (= G (cons A D))
           (= F (cons A C))
           (= (S B) E))
      (take E F G))))
(assert (forall ((A Lst) (B Lst)) (=> (= A nil) (append A B B))))
(assert (forall ((A Nat)
         (B Lst)
         (C Lst)
         (D Lst)
         (E Lst)
         (F Lst))
  (=> (and (append B E C) (= F (cons A C)) (= D (cons A B))) (append D E F))))
(assert (forall ((A Lst) (B Lst))
  (=> (and (= B nil) (= A nil)) (rev A B))))
(assert (forall ((A Nat)
         (B Lst)
         (C Lst)
         (D Lst)
         (E Lst)
         (F Lst))
  (=> (and (append C D F) (rev B C) (= D (cons A nil)) (= E (cons A B)))
      (rev E F))))
(assert (forall ((A Lst) (B Nat)) (=> (and (= B Z) (= A nil)) (len A B))))
(assert (forall ((A Nat) (B Lst) (C Nat) (D Lst) (E Nat))
  (=> (and (len B C) (= D (cons A B)) (= (S C) E)) (len D E))))
(assert (forall ((A Lst)
         (B Nat)
         (C Nat)
         (D Lst)
         (E Nat)
         (F Lst)
         (G Lst)
         (H Lst)
		 (XX Nat))
  (=> (and (= (cons XX G) H)
           (take C D A)
           (rev A G)
           (len D B)
           (minus B C E)
           (rev D F)
           (drop E F H))
      incorrect)))
(assert (=> incorrect false))
(check-sat)
(get-model)
