(set-logic HORN)

(declare-datatype Nat ((Z) (S (nextnat Nat))))
(declare-datatype Tree ((leaf) (node (trn1 Nat) (ltree Tree) (rtree Tree))))
(declare-datatype Lst ((nil) (cons (car Nat) (cdr Lst))))
(declare-datatype Lst2 ((nil2) (cons2 (car1 Nat) (car2 Nat) (cdr2 Lst2))))
(declare-datatype Queue ((queue (queue1 Lst) (queue2 Lst))))


(declare-fun add (Nat Nat Nat) Bool)
(declare-fun lt (Nat Nat) Bool)
(declare-fun le (Nat Nat) Bool)
(declare-fun gt (Nat Nat) Bool)
(declare-fun ge (Nat Nat) Bool)
(assert (forall ((y Nat)) (add Z y y)))
(assert (forall ((x Nat) (y Nat) (z Nat)) (=> (add x y z) (add (S x) y (S z)))))
(assert (forall ((y Nat)) (lt Z (S y))))
(assert (forall ((x Nat) (y Nat)) (=> (lt x y) (lt (S x) (S y)))))
(assert (forall ((x Nat) (y Nat)) (=> (or (lt x y) (= x y)) (le x y))))
(assert (forall ((x Nat)) (gt (S x) Z)))
(assert (forall ((x Nat) (y Nat)) (=> (gt x y) (gt (S x) (S y)))))
(assert (forall ((x Nat) (y Nat)) (=> (or (gt x y) (= x y)) (ge x y))))

(declare-fun height (Tree Nat) Bool)
(declare-fun incorrect () Bool)
(declare-fun size (Tree Nat) Bool)
(declare-fun nmax (Nat Nat Nat) Bool)
(declare-fun leftdrop (Nat Tree Tree) Bool)
(assert (forall ((A Nat) (B Nat)) (=> (le (S A) B) (nmax A B B))))
(assert (forall ((A Nat) (B Nat)) (=> (ge B A) (nmax B A B))))
(assert (forall ((A Nat) (B Tree) (C Tree))
  (=> (and (= C leaf) (= B leaf)) (leftdrop A B C))))
(assert (forall ((A Nat)
         (B Tree)
         (C Tree)
         (D Nat)
         (E Tree)
         (F Tree))
  (=> (and (= E (node A B C)) (le D Z) (= F (node A B C))) (leftdrop D E F))))
(assert (forall ((A Nat)
         (B Tree)
         (C Nat)
         (D Tree)
         (E Nat)
         (F Tree)
         (G Tree))
  (=> (and (leftdrop C D G) (= F (node A D B)) (= E (S C)) (gt E Z))
      (leftdrop E F G))))
(assert (forall ((A Tree) (B Nat)) (=> (and (= B Z) (= A leaf)) (height A B))))
(assert (forall ((A Nat)
         (B Tree)
         (C Nat)
         (D Nat)
         (E Tree)
         (F Nat)
         (G Tree)
         (H Nat))
  (=> (and (height E F)
           (height B C)
           (nmax C F D)
           (= H (S D))
           (= G (node A B E)))
      (height G H))))
(assert (forall ((A Tree) (B Nat)) (=> (and (= B Z) (= A leaf)) (size A B))))
(assert (forall ((A Nat)
         (B Tree)
         (C Nat)
         (D Tree)
         (E Nat)
         (F Tree)
         (G Nat))
  (=> (and (size D E) (size B C) (= F (node A B D)) (add (S E) C G)) (size F G))))
(assert (forall ((A Tree) (B Tree) (C Nat))
  (=> (and (height B C) (height A (S (S Z))) (size A (S (S (S Z)))) (leftdrop (S Z) A B) (= C Z))
      incorrect)))
(assert (=> incorrect false))
(check-sat)

