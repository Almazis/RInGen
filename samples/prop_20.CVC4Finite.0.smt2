(set-logic UF)
(declare-sort Nat_1 0)
(declare-fun Z_3 () Nat_1)
(declare-fun S_1 (Nat_1) Nat_1)
(declare-sort list_0 0)
(declare-fun nil_0 () list_0)
(declare-fun cons_0 (Nat_1 list_0) list_0)
(declare-sort Nat_0 0)
(declare-fun Z_0 () Nat_0)
(declare-fun S_0 (Nat_0) Nat_0)
(declare-fun length_0 (Nat_0 list_0) Bool)
(assert (forall ((x_0 list_0) (y_0 Nat_1) (xs_0 list_0) (x_5 Nat_0) (x_6 Nat_0))
	(=>	(and (= x_5 (S_0 x_6))
			(length_0 x_6 xs_0)
			(= x_0 (cons_0 y_0 xs_0)))
		(length_0 x_5 x_0))))
(assert (forall ((x_0 list_0) (x_7 Nat_0))
	(=>	(and (= x_7 Z_0)
			(= x_0 nil_0))
		(length_0 x_7 x_0))))
(declare-fun even_0 (Bool Nat_0) Bool)
(assert (forall ((x_1 Nat_0) (y_1 Nat_0) (z_1 Nat_0) (x_8 Bool) (x_9 Bool))
	(=>	(and (= x_8 x_9)
			(even_0 x_9 z_1)
			(= x_1 (S_0 y_1))
			(= y_1 (S_0 z_1)))
		(even_0 x_8 x_1))))
(assert (forall ((x_1 Nat_0) (y_1 Nat_0) (x_10 Bool))
	(=>	(and (= x_10 false)
			(= x_1 (S_0 y_1))
			(= y_1 Z_0))
		(even_0 x_10 x_1))))
(assert (forall ((x_1 Nat_0) (x_11 Bool))
	(=>	(and (= x_11 true)
			(= x_1 Z_0))
		(even_0 x_11 x_1))))
(declare-fun x_2 (list_0 list_0 list_0) Bool)
(assert (forall ((x_3 list_0) (y_2 list_0) (z_2 Nat_1) (xs_1 list_0) (x_12 list_0) (x_13 list_0))
	(=>	(and (= x_12 (cons_0 z_2 x_13))
			(x_2 x_13 xs_1 y_2)
			(= x_3 (cons_0 z_2 xs_1)))
		(x_2 x_12 x_3 y_2))))
(assert (forall ((x_3 list_0) (y_2 list_0) (x_14 list_0))
	(=>	(and (= x_14 y_2)
			(= x_3 nil_0))
		(x_2 x_14 x_3 y_2))))
(assert (forall ((x_4 list_0) (x_15 list_0) (x_16 Nat_0) (x_17 Bool))
	(=>	(and (= x_17 false)
			(x_2 x_15 x_4 x_4)
			(length_0 x_16 x_15)
			(even_0 x_17 x_16))
		false)))
(check-sat)
