(set-logic ALL)
(declare-sort Nat_1 0)
(declare-fun Z_3 () Nat_1)
(declare-fun S_1 (Nat_1) Nat_1)
(declare-fun add_0 (Nat_1 Nat_1 Nat_1) Bool)
(declare-fun minus_0 (Nat_1 Nat_1 Nat_1) Bool)
(declare-fun le_0 (Nat_1 Nat_1) Bool)
(declare-fun ge_0 (Nat_1 Nat_1) Bool)
(declare-fun lt_0 (Nat_1 Nat_1) Bool)
(declare-fun gt_0 (Nat_1 Nat_1) Bool)
(declare-fun mult_0 (Nat_1 Nat_1 Nat_1) Bool)
(declare-fun div_0 (Nat_1 Nat_1 Nat_1) Bool)
(declare-fun mod_0 (Nat_1 Nat_1 Nat_1) Bool)
(assert (forall ((y_3 Nat_1))
	(add_0 y_3 Z_3 y_3)))
(assert (forall ((x_18 Nat_1) (y_3 Nat_1) (r_0 Nat_1))
	(=> (add_0 r_0 x_18 y_3)
	    (add_0 (S_1 r_0) (S_1 x_18) y_3))))
(assert (forall ((y_3 Nat_1))
	(minus_0 Z_3 Z_3 y_3)))
(assert (forall ((x_18 Nat_1) (y_3 Nat_1) (r_0 Nat_1))
	(=> (minus_0 r_0 x_18 y_3)
	    (minus_0 (S_1 r_0) (S_1 x_18) y_3))))
(assert (forall ((y_3 Nat_1))
	(le_0 Z_3 y_3)))
(assert (forall ((x_18 Nat_1) (y_3 Nat_1))
	(=> (le_0 x_18 y_3)
	    (le_0 (S_1 x_18) (S_1 y_3)))))
(assert (forall ((y_3 Nat_1))
	(ge_0 y_3 Z_3)))
(assert (forall ((x_18 Nat_1) (y_3 Nat_1))
	(=> (ge_0 x_18 y_3)
	    (ge_0 (S_1 x_18) (S_1 y_3)))))
(assert (forall ((y_3 Nat_1))
	(lt_0 Z_3 (S_1 y_3))))
(assert (forall ((x_18 Nat_1) (y_3 Nat_1))
	(=> (lt_0 x_18 y_3)
	    (lt_0 (S_1 x_18) (S_1 y_3)))))
(assert (forall ((y_3 Nat_1))
	(gt_0 (S_1 y_3) Z_3)))
(assert (forall ((x_18 Nat_1) (y_3 Nat_1))
	(=> (gt_0 x_18 y_3)
	    (gt_0 (S_1 x_18) (S_1 y_3)))))
(assert (forall ((y_3 Nat_1))
	(mult_0 Z_3 Z_3 y_3)))
(assert (forall ((x_18 Nat_1) (y_3 Nat_1) (r_0 Nat_1) (z_4 Nat_1))
	(=>	(and (mult_0 r_0 x_18 y_3)
			(add_0 z_4 r_0 y_3))
		(mult_0 z_4 (S_1 x_18) y_3))))
(assert (forall ((x_18 Nat_1) (y_3 Nat_1))
	(=> (lt_0 x_18 y_3)
	    (div_0 Z_3 x_18 y_3))))
(assert (forall ((x_18 Nat_1) (y_3 Nat_1) (r_0 Nat_1) (z_4 Nat_1))
	(=>	(and (ge_0 x_18 y_3)
			(minus_0 z_4 x_18 y_3)
			(div_0 r_0 z_4 y_3))
		(div_0 (S_1 r_0) x_18 y_3))))
(assert (forall ((x_18 Nat_1) (y_3 Nat_1))
	(=> (lt_0 x_18 y_3)
	    (mod_0 x_18 x_18 y_3))))
(assert (forall ((x_18 Nat_1) (y_3 Nat_1) (r_0 Nat_1) (z_4 Nat_1))
	(=>	(and (ge_0 x_18 y_3)
			(minus_0 z_4 x_18 y_3)
			(mod_0 r_0 z_4 y_3))
		(mod_0 r_0 x_18 y_3))))
(declare-sort list_0 0)
(declare-fun nil_0 () list_0)
(declare-fun cons_0 (Nat_1 list_0) list_0)
(declare-fun diseqlist_0 (list_0 list_0) Bool)
(declare-fun head_1 (Nat_1 list_0) Bool)
(declare-fun tail_1 (list_0 list_0) Bool)
(declare-fun isnil_0 (list_0) Bool)
(declare-fun iscons_0 (list_0) Bool)
(assert (forall ((x_22 list_0) (x_20 Nat_1) (x_21 list_0))
	(=> (= x_22 (cons_0 x_20 x_21))
	    (head_1 x_20 x_22))))
(assert (forall ((x_22 list_0) (x_20 Nat_1) (x_21 list_0))
	(=> (= x_22 (cons_0 x_20 x_21))
	    (tail_1 x_21 x_22))))
(assert (isnil_0 nil_0))
(assert (forall ((x_23 Nat_1) (x_24 list_0))
	(iscons_0 (cons_0 x_23 x_24))))
(assert (forall ((x_25 Nat_1) (x_26 list_0))
	(diseqlist_0 nil_0 (cons_0 x_25 x_26))))
(assert (forall ((x_27 Nat_1) (x_28 list_0))
	(diseqlist_0 (cons_0 x_27 x_28) nil_0)))
(assert (forall ((x_29 Nat_1) (x_30 list_0) (x_31 Nat_1) (x_32 list_0))
	(=> (not (= x_29 x_31))
	    (diseqlist_0 (cons_0 x_29 x_30) (cons_0 x_31 x_32)))))
(assert (forall ((x_29 Nat_1) (x_30 list_0) (x_31 Nat_1) (x_32 list_0))
	(=> (diseqlist_0 x_30 x_32)
	    (diseqlist_0 (cons_0 x_29 x_30) (cons_0 x_31 x_32)))))
(declare-sort Nat_0 0)
(declare-fun Z_0 () Nat_0)
(declare-fun S_0 (Nat_0) Nat_0)
(declare-fun diseqNat_0 (Nat_0 Nat_0) Bool)
(declare-fun projS_1 (Nat_0 Nat_0) Bool)
(declare-fun isZ_0 (Nat_0) Bool)
(declare-fun isS_0 (Nat_0) Bool)
(assert (forall ((x_35 Nat_0) (x_34 Nat_0))
	(=> (= x_35 (S_0 x_34))
	    (projS_1 x_34 x_35))))
(assert (isZ_0 Z_0))
(assert (forall ((x_36 Nat_0))
	(isS_0 (S_0 x_36))))
(assert (forall ((x_37 Nat_0))
	(diseqNat_0 Z_0 (S_0 x_37))))
(assert (forall ((x_38 Nat_0))
	(diseqNat_0 (S_0 x_38) Z_0)))
(assert (forall ((x_39 Nat_0) (x_40 Nat_0))
	(=> (diseqNat_0 x_39 x_40)
	    (diseqNat_0 (S_0 x_39) (S_0 x_40)))))
(declare-fun length_0 (Nat_0 list_0) Bool)
(assert (forall ((x_0 list_0) (y_0 Nat_1) (xs_0 list_0) (x_5 Nat_0) (x_6 Nat_0))
	(=>	(and (= x_5 (S_0 x_6))
			(length_0 x_6 xs_0)
			(= x_0 (cons_0 y_0 xs_0)))
		(length_0 x_5 x_0))))
(assert (forall ((x_0 list_0) (x_7 Nat_0))
	(=>	(and (= x_7 Z_0)
			(= x_0 nil_0))
		(length_0 x_7 x_0))))
(declare-fun even_0 (Bool Nat_0) Bool)
(assert (forall ((x_1 Nat_0) (y_1 Nat_0) (z_1 Nat_0) (x_8 Bool) (x_9 Bool))
	(=>	(and (= x_8 x_9)
			(even_0 x_9 z_1)
			(= x_1 (S_0 y_1))
			(= y_1 (S_0 z_1)))
		(even_0 x_8 x_1))))
(assert (forall ((x_1 Nat_0) (y_1 Nat_0) (x_10 Bool))
	(=>	(and (= x_10 false)
			(= x_1 (S_0 y_1))
			(= y_1 Z_0))
		(even_0 x_10 x_1))))
(assert (forall ((x_1 Nat_0) (x_11 Bool))
	(=>	(and (= x_11 true)
			(= x_1 Z_0))
		(even_0 x_11 x_1))))
(declare-fun x_2 (list_0 list_0 list_0) Bool)
(assert (forall ((x_3 list_0) (y_2 list_0) (z_2 Nat_1) (xs_1 list_0) (x_12 list_0) (x_13 list_0))
	(=>	(and (= x_12 (cons_0 z_2 x_13))
			(x_2 x_13 xs_1 y_2)
			(= x_3 (cons_0 z_2 xs_1)))
		(x_2 x_12 x_3 y_2))))
(assert (forall ((x_3 list_0) (y_2 list_0) (x_14 list_0))
	(=>	(and (= x_14 y_2)
			(= x_3 nil_0))
		(x_2 x_14 x_3 y_2))))
(assert (forall ((x_4 list_0) (x_15 list_0) (x_16 Nat_0) (x_17 Bool))
	(=>	(and (= x_17 false)
			(x_2 x_15 x_4 x_4)
			(length_0 x_16 x_15)
			(even_0 x_17 x_16))
		false)))
(check-sat)
