{

open Parser

open System
open System.Text

open FSharp.Text.Lexing

let lexeme lexbuf =
    LexBuffer<_>.LexemeString lexbuf
}

let digit = ['0'-'9']
let alpha = ['a'-'z' 'A'-'Z']
let identifier = alpha+ (alpha | ['_' '-' '$' '*' '!' '?'])*
let operator = ['+' '-' '*' '%' '/' '=' '>' '<'] | "<=" | ">="
let ident = (alpha | digit | ['-' '+' '=' '>' '<' '&' '*' '/' '|' ':' '_' '.' '!' '\'' '#' '$'])+
let whitespace = [' ' '\t' ]
let newline = '\n' | '\r' '\n'

rule tokenize = parse
    | whitespace	{ tokenize lexbuf }
    | newline       { tokenize lexbuf }
    | '('           { LPAREN }
    | ')'           { RPAREN }
    | "match"       { MATCH }
    | ['-']?digit+  { Int (Int32.Parse (lexeme lexbuf)) }
    | ident { Sym (lexeme lexbuf) }
    | eof   { EOF }
    | _ { lexeme lexbuf |> sprintf "Parsing error: %s" |> failwith }

{
let parse_string str =
    let lexbuf = LexBuffer<_>.FromString str
    Parser.start tokenize lexbuf
}
