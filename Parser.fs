// Implementation file for parser generated by fsyacc
module Parser
#nowarn "64";; // turn off warnings that type variables used in production annotations are instantiated to concrete type
open FSharp.Text.Lexing
open FSharp.Text.Parsing.ParseHelpers
# 1 "Parser.fsy"

open FLispy.Prelude

# 10 "Parser.fs"
// This type is the type of tokens accepted by the parser
type token = 
  | EOF
  | LPAREN
  | RPAREN
  | QUOTE
  | MATCH
  | COMMENT
  | Sym of (string)
  | Str of (string)
  | Int of (int)
// This type is used to give symbolic names to token indexes, useful for error messages
type tokenId = 
    | TOKEN_EOF
    | TOKEN_LPAREN
    | TOKEN_RPAREN
    | TOKEN_QUOTE
    | TOKEN_MATCH
    | TOKEN_COMMENT
    | TOKEN_Sym
    | TOKEN_Str
    | TOKEN_Int
    | TOKEN_end_of_input
    | TOKEN_error
// This type is used to give symbolic names to token indexes, useful for error messages
type nonTerminalId = 
    | NONTERM__startstart
    | NONTERM_start
    | NONTERM_expr
    | NONTERM_pattern
    | NONTERM_match_case
    | NONTERM_match_case_list
    | NONTERM_list

// This function maps tokens to integer indexes
let tagOfToken (t:token) = 
  match t with
  | EOF  -> 0 
  | LPAREN  -> 1 
  | RPAREN  -> 2 
  | QUOTE  -> 3 
  | MATCH  -> 4 
  | COMMENT  -> 5 
  | Sym _ -> 6 
  | Str _ -> 7 
  | Int _ -> 8 

// This function maps integer indexes to symbolic token ids
let tokenTagToTokenId (tokenIdx:int) = 
  match tokenIdx with
  | 0 -> TOKEN_EOF 
  | 1 -> TOKEN_LPAREN 
  | 2 -> TOKEN_RPAREN 
  | 3 -> TOKEN_QUOTE 
  | 4 -> TOKEN_MATCH 
  | 5 -> TOKEN_COMMENT 
  | 6 -> TOKEN_Sym 
  | 7 -> TOKEN_Str 
  | 8 -> TOKEN_Int 
  | 11 -> TOKEN_end_of_input
  | 9 -> TOKEN_error
  | _ -> failwith "tokenTagToTokenId: bad token"

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
let prodIdxToNonTerminal (prodIdx:int) = 
  match prodIdx with
    | 0 -> NONTERM__startstart 
    | 1 -> NONTERM_start 
    | 2 -> NONTERM_expr 
    | 3 -> NONTERM_expr 
    | 4 -> NONTERM_expr 
    | 5 -> NONTERM_expr 
    | 6 -> NONTERM_expr 
    | 7 -> NONTERM_pattern 
    | 8 -> NONTERM_pattern 
    | 9 -> NONTERM_match_case 
    | 10 -> NONTERM_match_case_list 
    | 11 -> NONTERM_match_case_list 
    | 12 -> NONTERM_list 
    | 13 -> NONTERM_list 
    | _ -> failwith "prodIdxToNonTerminal: bad production index"

let _fsyacc_endOfInputTag = 11 
let _fsyacc_tagOfErrorTerminal = 9

// This function gets the name of a token as a string
let token_to_string (t:token) = 
  match t with 
  | EOF  -> "EOF" 
  | LPAREN  -> "LPAREN" 
  | RPAREN  -> "RPAREN" 
  | QUOTE  -> "QUOTE" 
  | MATCH  -> "MATCH" 
  | COMMENT  -> "COMMENT" 
  | Sym _ -> "Sym" 
  | Str _ -> "Str" 
  | Int _ -> "Int" 

// This function gets the data carried by a token as an object
let _fsyacc_dataOfToken (t:token) = 
  match t with 
  | EOF  -> (null : System.Object) 
  | LPAREN  -> (null : System.Object) 
  | RPAREN  -> (null : System.Object) 
  | QUOTE  -> (null : System.Object) 
  | MATCH  -> (null : System.Object) 
  | COMMENT  -> (null : System.Object) 
  | Sym _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | Str _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | Int _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
let _fsyacc_gotos = [| 0us; 65535us; 1us; 65535us; 0us; 1us; 6us; 65535us; 0us; 2us; 6us; 25us; 7us; 8us; 16us; 25us; 20us; 21us; 25us; 25us; 1us; 65535us; 19us; 20us; 2us; 65535us; 9us; 23us; 23us; 23us; 2us; 65535us; 9us; 10us; 23us; 24us; 3us; 65535us; 6us; 13us; 16us; 17us; 25us; 26us; |]
let _fsyacc_sparseGotoTableRowOffsets = [|0us; 1us; 3us; 10us; 12us; 15us; 18us; |]
let _fsyacc_stateToProdIdxsTableElements = [| 1us; 0us; 1us; 0us; 1us; 1us; 1us; 2us; 1us; 3us; 1us; 4us; 2us; 5us; 6us; 1us; 5us; 1us; 5us; 1us; 5us; 1us; 5us; 1us; 5us; 1us; 5us; 1us; 6us; 1us; 6us; 1us; 7us; 1us; 8us; 1us; 8us; 1us; 8us; 1us; 9us; 1us; 9us; 1us; 9us; 1us; 9us; 1us; 10us; 1us; 10us; 1us; 12us; 1us; 12us; |]
let _fsyacc_stateToProdIdxsTableRowOffsets = [|0us; 2us; 4us; 6us; 8us; 10us; 12us; 15us; 17us; 19us; 21us; 23us; 25us; 27us; 29us; 31us; 33us; 35us; 37us; 39us; 41us; 43us; 45us; 47us; 49us; 51us; 53us; |]
let _fsyacc_action_rows = 27
let _fsyacc_actionTableElements = [|4us; 32768us; 1us; 6us; 5us; 5us; 6us; 4us; 8us; 3us; 0us; 49152us; 0us; 16385us; 0us; 16386us; 0us; 16387us; 0us; 16388us; 5us; 16397us; 1us; 6us; 4us; 7us; 5us; 5us; 6us; 4us; 8us; 3us; 4us; 32768us; 1us; 6us; 5us; 5us; 6us; 4us; 8us; 3us; 1us; 32768us; 1us; 9us; 1us; 16395us; 1us; 19us; 1us; 32768us; 2us; 11us; 1us; 32768us; 2us; 12us; 0us; 16389us; 1us; 32768us; 2us; 14us; 0us; 16390us; 0us; 16391us; 4us; 16397us; 1us; 6us; 5us; 5us; 6us; 4us; 8us; 3us; 1us; 32768us; 2us; 18us; 0us; 16392us; 2us; 32768us; 1us; 16us; 6us; 15us; 4us; 32768us; 1us; 6us; 5us; 5us; 6us; 4us; 8us; 3us; 1us; 32768us; 2us; 22us; 0us; 16393us; 1us; 16395us; 1us; 19us; 0us; 16394us; 4us; 16397us; 1us; 6us; 5us; 5us; 6us; 4us; 8us; 3us; 0us; 16396us; |]
let _fsyacc_actionTableRowOffsets = [|0us; 5us; 6us; 7us; 8us; 9us; 10us; 16us; 21us; 23us; 25us; 27us; 29us; 30us; 32us; 33us; 34us; 39us; 41us; 42us; 45us; 50us; 52us; 53us; 55us; 56us; 61us; |]
let _fsyacc_reductionSymbolCounts = [|1us; 1us; 1us; 1us; 1us; 7us; 3us; 1us; 3us; 4us; 2us; 0us; 2us; 0us; |]
let _fsyacc_productionToNonTerminalTable = [|0us; 1us; 2us; 2us; 2us; 2us; 2us; 3us; 3us; 4us; 5us; 5us; 6us; 6us; |]
let _fsyacc_immediateActions = [|65535us; 49152us; 16385us; 16386us; 16387us; 16388us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16389us; 65535us; 16390us; 16391us; 65535us; 65535us; 16392us; 65535us; 65535us; 65535us; 16393us; 65535us; 16394us; 65535us; 16396us; |]
let _fsyacc_reductions ()  =    [| 
# 132 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : ParseExpression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                      raise (FSharp.Text.Parsing.Accept(Microsoft.FSharp.Core.Operators.box _1))
                   )
                 : '_startstart));
# 141 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 16 "Parser.fsy"
                                       _1 
                   )
# 16 "Parser.fsy"
                 : ParseExpression));
# 152 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : int)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 18 "Parser.fsy"
                                       PNumber(_1) 
                   )
# 18 "Parser.fsy"
                 : 'expr));
# 163 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 19 "Parser.fsy"
                                       PSymbol(_1) 
                   )
# 19 "Parser.fsy"
                 : 'expr));
# 174 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 20 "Parser.fsy"
                                       PComment 
                   )
# 20 "Parser.fsy"
                 : 'expr));
# 184 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'match_case_list)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 21 "Parser.fsy"
                                                                                    PMatch(_3, _5) 
                   )
# 21 "Parser.fsy"
                 : 'expr));
# 196 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'list)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 22 "Parser.fsy"
                                                PList(_2) 
                   )
# 22 "Parser.fsy"
                 : 'expr));
# 207 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 24 "Parser.fsy"
                                    PSymbol(_1) 
                   )
# 24 "Parser.fsy"
                 : 'pattern));
# 218 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'list)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 25 "Parser.fsy"
                                                PList(_2) 
                   )
# 25 "Parser.fsy"
                 : 'pattern));
# 229 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'pattern)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 27 "Parser.fsy"
                                                              (_2, _3) 
                   )
# 27 "Parser.fsy"
                 : 'match_case));
# 241 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'match_case)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'match_case_list)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 29 "Parser.fsy"
                                                                   _1 :: _2 
                   )
# 29 "Parser.fsy"
                 : 'match_case_list));
# 253 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 30 "Parser.fsy"
                             [] 
                   )
# 30 "Parser.fsy"
                 : 'match_case_list));
# 263 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'list)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 32 "Parser.fsy"
                                       _1 :: _2 
                   )
# 32 "Parser.fsy"
                 : 'list));
# 275 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 33 "Parser.fsy"
                                       [] 
                   )
# 33 "Parser.fsy"
                 : 'list));
|]
# 286 "Parser.fs"
let tables () : FSharp.Text.Parsing.Tables<_> = 
  { reductions= _fsyacc_reductions ();
    endOfInputTag = _fsyacc_endOfInputTag;
    tagOfToken = tagOfToken;
    dataOfToken = _fsyacc_dataOfToken; 
    actionTableElements = _fsyacc_actionTableElements;
    actionTableRowOffsets = _fsyacc_actionTableRowOffsets;
    stateToProdIdxsTableElements = _fsyacc_stateToProdIdxsTableElements;
    stateToProdIdxsTableRowOffsets = _fsyacc_stateToProdIdxsTableRowOffsets;
    reductionSymbolCounts = _fsyacc_reductionSymbolCounts;
    immediateActions = _fsyacc_immediateActions;
    gotos = _fsyacc_gotos;
    sparseGotoTableRowOffsets = _fsyacc_sparseGotoTableRowOffsets;
    tagOfErrorTerminal = _fsyacc_tagOfErrorTerminal;
    parseError = (fun (ctxt:FSharp.Text.Parsing.ParseErrorContext<_>) -> 
                              match parse_error_rich with 
                              | Some f -> f ctxt
                              | None -> parse_error ctxt.Message);
    numTerminals = 12;
    productionToNonTerminalTable = _fsyacc_productionToNonTerminalTable  }
let engine lexer lexbuf startState = (tables ()).Interpret(lexer, lexbuf, startState)
let start lexer lexbuf : ParseExpression =
    Microsoft.FSharp.Core.Operators.unbox ((tables ()).Interpret(lexer, lexbuf, 0))
